/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiCallback;
import com.onelogin.client.ApiClient;
import com.onelogin.client.ApiException;
import com.onelogin.client.ApiResponse;
import com.onelogin.client.Configuration;
import com.onelogin.client.Pair;
import com.onelogin.client.ProgressRequestBody;
import com.onelogin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onelogin.client.model.Error;
import com.onelogin.client.model.GetUserApps200ResponseInner;
import com.onelogin.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUser2
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUser2Call(String mappings, Boolean validatePolicy, User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUser2ValidateBeforeCall(String mappings, Boolean validatePolicy, User user, final ApiCallback _callback) throws ApiException {
        return createUser2Call(mappings, validatePolicy, user, _callback);

    }

    /**
     * Create User
     * Create User
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public User createUser2(String mappings, Boolean validatePolicy, User user) throws ApiException {
        ApiResponse<User> localVarResp = createUser2WithHttpInfo(mappings, validatePolicy, user);
        return localVarResp.getData();
    }

    /**
     * Create User
     * Create User
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUser2WithHttpInfo(String mappings, Boolean validatePolicy, User user) throws ApiException {
        okhttp3.Call localVarCall = createUser2ValidateBeforeCall(mappings, validatePolicy, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * Create User
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUser2Async(String mappings, Boolean validatePolicy, User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUser2ValidateBeforeCall(mappings, validatePolicy, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser2
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUser2Call(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUser2ValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser2(Async)");
        }

        return deleteUser2Call(userId, _callback);

    }

    /**
     * Delete User
     * Delete User
     * @param userId Set to the id of the user that you want to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser2(Integer userId) throws ApiException {
        deleteUser2WithHttpInfo(userId);
    }

    /**
     * Delete User
     * Delete User
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUser2WithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUser2ValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete User (asynchronously)
     * Delete User
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUser2Async(Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUser2ValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser2
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUser2Call(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUser2ValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser2(Async)");
        }

        return getUser2Call(userId, _callback);

    }

    /**
     * Get User
     * Get User
     * @param userId Set to the id of the user that you want to return. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public User getUser2(Integer userId) throws ApiException {
        ApiResponse<User> localVarResp = getUser2WithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User
     * Get User
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUser2WithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getUser2ValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously)
     * Get User
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUser2Async(Integer userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUser2ValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserApps2
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserApps2Call(Integer userId, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}/apps"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_visibility", ignoreVisibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserApps2ValidateBeforeCall(Integer userId, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserApps2(Async)");
        }

        return getUserApps2Call(userId, ignoreVisibility, _callback);

    }

    /**
     * Get User Apps
     * Get User Apps
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional, default to false)
     * @return List&lt;GetUserApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<GetUserApps200ResponseInner> getUserApps2(Integer userId, Boolean ignoreVisibility) throws ApiException {
        ApiResponse<List<GetUserApps200ResponseInner>> localVarResp = getUserApps2WithHttpInfo(userId, ignoreVisibility);
        return localVarResp.getData();
    }

    /**
     * Get User Apps
     * Get User Apps
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional, default to false)
     * @return ApiResponse&lt;List&lt;GetUserApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetUserApps200ResponseInner>> getUserApps2WithHttpInfo(Integer userId, Boolean ignoreVisibility) throws ApiException {
        okhttp3.Call localVarCall = getUserApps2ValidateBeforeCall(userId, ignoreVisibility, null);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Apps (asynchronously)
     * Get User Apps
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserApps2Async(Integer userId, Boolean ignoreVisibility, final ApiCallback<List<GetUserApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserApps2ValidateBeforeCall(userId, ignoreVisibility, _callback);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers2
     * @param limit How many items to return at one time (max 100) (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId  (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsers2Call(Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, Integer directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_since", createdSince));
        }

        if (createdUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_until", createdUntil));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (updatedUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_until", updatedUntil));
        }

        if (lastLoginSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_since", lastLoginSince));
        }

        if (lastLoginUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_until", lastLoginUntil));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (samaccountname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("samaccountname", samaccountname));
        }

        if (directoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("directory_id", directoryId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_ids", userIds));
        }

        if (customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_attributes.{attribute_name}", customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsers2ValidateBeforeCall(Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, Integer directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        return listUsers2Call(limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);

    }

    /**
     * List Users
     * Get a list of users
     * @param limit How many items to return at one time (max 100) (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId  (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public List<User> listUsers2(Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, Integer directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        ApiResponse<List<User>> localVarResp = listUsers2WithHttpInfo(limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields);
        return localVarResp.getData();
    }

    /**
     * List Users
     * Get a list of users
     * @param limit How many items to return at one time (max 100) (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId  (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> listUsers2WithHttpInfo(Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, Integer directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        okhttp3.Call localVarCall = listUsers2ValidateBeforeCall(limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users (asynchronously)
     * Get a list of users
     * @param limit How many items to return at one time (max 100) (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId  (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsers2Async(Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, Integer directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsers2ValidateBeforeCall(limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser2
     * @param userId Set to the id of the user that you want to return. (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUser2Call(Integer userId, String mappings, Boolean validatePolicy, User user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUser2ValidateBeforeCall(Integer userId, String mappings, Boolean validatePolicy, User user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser2(Async)");
        }

        return updateUser2Call(userId, mappings, validatePolicy, user, _callback);

    }

    /**
     * Update User
     * Update User
     * @param userId Set to the id of the user that you want to return. (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser2(Integer userId, String mappings, Boolean validatePolicy, User user) throws ApiException {
        ApiResponse<User> localVarResp = updateUser2WithHttpInfo(userId, mappings, validatePolicy, user);
        return localVarResp.getData();
    }

    /**
     * Update User
     * Update User
     * @param userId Set to the id of the user that you want to return. (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUser2WithHttpInfo(Integer userId, String mappings, Boolean validatePolicy, User user) throws ApiException {
        okhttp3.Call localVarCall = updateUser2ValidateBeforeCall(userId, mappings, validatePolicy, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * Update User
     * @param userId Set to the id of the user that you want to return. (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUser2Async(Integer userId, String mappings, Boolean validatePolicy, User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUser2ValidateBeforeCall(userId, mappings, validatePolicy, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
