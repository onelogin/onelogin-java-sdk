/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiCallback;
import com.onelogin.client.ApiClient;
import com.onelogin.client.ApiException;
import com.onelogin.client.ApiResponse;
import com.onelogin.client.Configuration;
import com.onelogin.client.Pair;
import com.onelogin.client.ProgressRequestBody;
import com.onelogin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.AuthClaim;
import com.onelogin.client.model.AuthId;
import com.onelogin.client.model.TokenClaim;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApiAuthClaimsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiAuthClaimsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiAuthClaimsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAuthClaim
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthClaimCall(String apiAuthId, String contentType, AuthClaim authClaim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authClaim;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{api_auth_id}/claims"
            .replace("{" + "api_auth_id" + "}", localVarApiClient.escapeString(apiAuthId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthClaimValidateBeforeCall(String apiAuthId, String contentType, AuthClaim authClaim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiAuthId' is set
        if (apiAuthId == null) {
            throw new ApiException("Missing the required parameter 'apiAuthId' when calling createAuthClaim(Async)");
        }

        return createAuthClaimCall(apiAuthId, contentType, authClaim, _callback);

    }

    /**
     * Create Api Auth Server Claim
     * Create Authorization Claim
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Integer createAuthClaim(String apiAuthId, String contentType, AuthClaim authClaim) throws ApiException {
        ApiResponse<Integer> localVarResp = createAuthClaimWithHttpInfo(apiAuthId, contentType, authClaim);
        return localVarResp.getData();
    }

    /**
     * Create Api Auth Server Claim
     * Create Authorization Claim
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> createAuthClaimWithHttpInfo(String apiAuthId, String contentType, AuthClaim authClaim) throws ApiException {
        okhttp3.Call localVarCall = createAuthClaimValidateBeforeCall(apiAuthId, contentType, authClaim, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Api Auth Server Claim (asynchronously)
     * Create Authorization Claim
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthClaimAsync(String apiAuthId, String contentType, AuthClaim authClaim, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthClaimValidateBeforeCall(apiAuthId, contentType, authClaim, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthClaim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The claim is deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthClaimCall(String apiAuthId, Integer claimId, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{api_auth_id}/claims/{claim_id}"
            .replace("{" + "api_auth_id" + "}", localVarApiClient.escapeString(apiAuthId.toString()))
            .replace("{" + "claim_id" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthClaimValidateBeforeCall(String apiAuthId, Integer claimId, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiAuthId' is set
        if (apiAuthId == null) {
            throw new ApiException("Missing the required parameter 'apiAuthId' when calling deleteAuthClaim(Async)");
        }

        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling deleteAuthClaim(Async)");
        }

        return deleteAuthClaimCall(apiAuthId, claimId, contentType, _callback);

    }

    /**
     * Delete Api Auth Server Claim
     * Delete Authorization Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The claim is deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAuthClaim(String apiAuthId, Integer claimId, String contentType) throws ApiException {
        deleteAuthClaimWithHttpInfo(apiAuthId, claimId, contentType);
    }

    /**
     * Delete Api Auth Server Claim
     * Delete Authorization Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The claim is deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAuthClaimWithHttpInfo(String apiAuthId, Integer claimId, String contentType) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthClaimValidateBeforeCall(apiAuthId, claimId, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Api Auth Server Claim (asynchronously)
     * Delete Authorization Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The claim is deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthClaimAsync(String apiAuthId, Integer claimId, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthClaimValidateBeforeCall(apiAuthId, claimId, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthclaims
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthclaimsCall(String apiAuthId, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{api_auth_id}/claims"
            .replace("{" + "api_auth_id" + "}", localVarApiClient.escapeString(apiAuthId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthclaimsValidateBeforeCall(String apiAuthId, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiAuthId' is set
        if (apiAuthId == null) {
            throw new ApiException("Missing the required parameter 'apiAuthId' when calling getAuthclaims(Async)");
        }

        return getAuthclaimsCall(apiAuthId, contentType, _callback);

    }

    /**
     * Get Api Auth Server claims
     * Get Authorization claims
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @return List&lt;TokenClaim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<TokenClaim> getAuthclaims(String apiAuthId, String contentType) throws ApiException {
        ApiResponse<List<TokenClaim>> localVarResp = getAuthclaimsWithHttpInfo(apiAuthId, contentType);
        return localVarResp.getData();
    }

    /**
     * Get Api Auth Server claims
     * Get Authorization claims
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @return ApiResponse&lt;List&lt;TokenClaim&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TokenClaim>> getAuthclaimsWithHttpInfo(String apiAuthId, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getAuthclaimsValidateBeforeCall(apiAuthId, contentType, null);
        Type localVarReturnType = new TypeToken<List<TokenClaim>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Api Auth Server claims (asynchronously)
     * Get Authorization claims
     * @param apiAuthId  (required)
     * @param contentType  (optional, default to application/json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthclaimsAsync(String apiAuthId, String contentType, final ApiCallback<List<TokenClaim>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthclaimsValidateBeforeCall(apiAuthId, contentType, _callback);
        Type localVarReturnType = new TypeToken<List<TokenClaim>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClaim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClaimCall(String apiAuthId, Integer claimId, String contentType, AuthClaim authClaim, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authClaim;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{api_auth_id}/claims/{claim_id}"
            .replace("{" + "api_auth_id" + "}", localVarApiClient.escapeString(apiAuthId.toString()))
            .replace("{" + "claim_id" + "}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClaimValidateBeforeCall(String apiAuthId, Integer claimId, String contentType, AuthClaim authClaim, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiAuthId' is set
        if (apiAuthId == null) {
            throw new ApiException("Missing the required parameter 'apiAuthId' when calling updateClaim(Async)");
        }

        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling updateClaim(Async)");
        }

        return updateClaimCall(apiAuthId, claimId, contentType, authClaim, _callback);

    }

    /**
     * Update Api Auth Server Claim
     * Update Authorization Server Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @return AuthId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public AuthId updateClaim(String apiAuthId, Integer claimId, String contentType, AuthClaim authClaim) throws ApiException {
        ApiResponse<AuthId> localVarResp = updateClaimWithHttpInfo(apiAuthId, claimId, contentType, authClaim);
        return localVarResp.getData();
    }

    /**
     * Update Api Auth Server Claim
     * Update Authorization Server Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @return ApiResponse&lt;AuthId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthId> updateClaimWithHttpInfo(String apiAuthId, Integer claimId, String contentType, AuthClaim authClaim) throws ApiException {
        okhttp3.Call localVarCall = updateClaimValidateBeforeCall(apiAuthId, claimId, contentType, authClaim, null);
        Type localVarReturnType = new TypeToken<AuthId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Api Auth Server Claim (asynchronously)
     * Update Authorization Server Claim
     * @param apiAuthId  (required)
     * @param claimId  (required)
     * @param contentType  (optional, default to application/json)
     * @param authClaim  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClaimAsync(String apiAuthId, Integer claimId, String contentType, AuthClaim authClaim, final ApiCallback<AuthId> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClaimValidateBeforeCall(apiAuthId, claimId, contentType, authClaim, _callback);
        Type localVarReturnType = new TypeToken<AuthId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
