/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiCallback;
import com.onelogin.client.ApiClient;
import com.onelogin.client.ApiException;
import com.onelogin.client.ApiResponse;
import com.onelogin.client.Configuration;
import com.onelogin.client.Pair;
import com.onelogin.client.ProgressRequestBody;
import com.onelogin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.ListMessageTemplates200ResponseInner;
import com.onelogin.client.model.MessageTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BrandingServiceTemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandingServiceTemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandingServiceTemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMessageTemplate
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param messageTemplate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageTemplateCall(Integer brandId, String locale, MessageTemplate messageTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = messageTemplate;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessageTemplateValidateBeforeCall(Integer brandId, String locale, MessageTemplate messageTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling createMessageTemplate(Async)");
        }

        return createMessageTemplateCall(brandId, locale, messageTemplate, _callback);

    }

    /**
     * Create Message Template
     * Create Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param messageTemplate  (optional)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate createMessageTemplate(Integer brandId, String locale, MessageTemplate messageTemplate) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = createMessageTemplateWithHttpInfo(brandId, locale, messageTemplate);
        return localVarResp.getData();
    }

    /**
     * Create Message Template
     * Create Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param messageTemplate  (optional)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> createMessageTemplateWithHttpInfo(Integer brandId, String locale, MessageTemplate messageTemplate) throws ApiException {
        okhttp3.Call localVarCall = createMessageTemplateValidateBeforeCall(brandId, locale, messageTemplate, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Message Template (asynchronously)
     * Create Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param messageTemplate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageTemplateAsync(Integer brandId, String locale, MessageTemplate messageTemplate, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessageTemplateValidateBeforeCall(brandId, locale, messageTemplate, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessageTemplate
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageTemplateCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates/{template_id}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageTemplateValidateBeforeCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteMessageTemplate(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteMessageTemplate(Async)");
        }

        return deleteMessageTemplateCall(brandId, templateId, _callback);

    }

    /**
     * Delete Message Template
     * Delete Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessageTemplate(Integer brandId, Integer templateId) throws ApiException {
        deleteMessageTemplateWithHttpInfo(brandId, templateId);
    }

    /**
     * Delete Message Template
     * Delete Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessageTemplateWithHttpInfo(Integer brandId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageTemplateValidateBeforeCall(brandId, templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Message Template (asynchronously)
     * Delete Message Template
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageTemplateAsync(Integer brandId, Integer templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageTemplateValidateBeforeCall(brandId, templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMasterByType
     * @param templateType The message template type to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMasterByTypeCall(String templateType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/master/templates/{template_type}"
            .replace("{" + "template_type" + "}", localVarApiClient.escapeString(templateType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMasterByTypeValidateBeforeCall(String templateType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateType' is set
        if (templateType == null) {
            throw new ApiException("Missing the required parameter 'templateType' when calling getMasterByType(Async)");
        }

        return getMasterByTypeCall(templateType, _callback);

    }

    /**
     * Get Master Template by Type
     * Get Master Template by Type
     * @param templateType The message template type to return. (required)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate getMasterByType(String templateType) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = getMasterByTypeWithHttpInfo(templateType);
        return localVarResp.getData();
    }

    /**
     * Get Master Template by Type
     * Get Master Template by Type
     * @param templateType The message template type to return. (required)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> getMasterByTypeWithHttpInfo(String templateType) throws ApiException {
        okhttp3.Call localVarCall = getMasterByTypeValidateBeforeCall(templateType, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Master Template by Type (asynchronously)
     * Get Master Template by Type
     * @param templateType The message template type to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMasterByTypeAsync(String templateType, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMasterByTypeValidateBeforeCall(templateType, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessageTemplateById
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageTemplateByIdCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates/{template_id}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageTemplateByIdValidateBeforeCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getMessageTemplateById(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getMessageTemplateById(Async)");
        }

        return getMessageTemplateByIdCall(brandId, templateId, _callback);

    }

    /**
     * Get Message Template
     * Get Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate getMessageTemplateById(Integer brandId, Integer templateId) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = getMessageTemplateByIdWithHttpInfo(brandId, templateId);
        return localVarResp.getData();
    }

    /**
     * Get Message Template
     * Get Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> getMessageTemplateByIdWithHttpInfo(Integer brandId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = getMessageTemplateByIdValidateBeforeCall(brandId, templateId, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Message Template (asynchronously)
     * Get Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMessageTemplateByIdAsync(Integer brandId, Integer templateId, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageTemplateByIdValidateBeforeCall(brandId, templateId, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateByLocale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByLocaleCall(Integer brandId, String templateType, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates/{template_type}/{locale}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "template_type" + "}", localVarApiClient.escapeString(templateType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByLocaleValidateBeforeCall(Integer brandId, String templateType, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getTemplateByLocale(Async)");
        }

        // verify the required parameter 'templateType' is set
        if (templateType == null) {
            throw new ApiException("Missing the required parameter 'templateType' when calling getTemplateByLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getTemplateByLocale(Async)");
        }

        return getTemplateByLocaleCall(brandId, templateType, locale, _callback);

    }

    /**
     * Get Template by Type &amp; Locale
     * Get Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate getTemplateByLocale(Integer brandId, String templateType, String locale) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = getTemplateByLocaleWithHttpInfo(brandId, templateType, locale);
        return localVarResp.getData();
    }

    /**
     * Get Template by Type &amp; Locale
     * Get Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> getTemplateByLocaleWithHttpInfo(Integer brandId, String templateType, String locale) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByLocaleValidateBeforeCall(brandId, templateType, locale, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template by Type &amp; Locale (asynchronously)
     * Get Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateByLocaleAsync(Integer brandId, String templateType, String locale, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByLocaleValidateBeforeCall(brandId, templateType, locale, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessageTemplates
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessageTemplatesCall(Integer brandId, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessageTemplatesValidateBeforeCall(Integer brandId, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling listMessageTemplates(Async)");
        }

        return listMessageTemplatesCall(brandId, locale, _callback);

    }

    /**
     * List Message Templates
     * List Message Templates
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @return List&lt;ListMessageTemplates200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public List<ListMessageTemplates200ResponseInner> listMessageTemplates(Integer brandId, String locale) throws ApiException {
        ApiResponse<List<ListMessageTemplates200ResponseInner>> localVarResp = listMessageTemplatesWithHttpInfo(brandId, locale);
        return localVarResp.getData();
    }

    /**
     * List Message Templates
     * List Message Templates
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @return ApiResponse&lt;List&lt;ListMessageTemplates200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListMessageTemplates200ResponseInner>> listMessageTemplatesWithHttpInfo(Integer brandId, String locale) throws ApiException {
        okhttp3.Call localVarCall = listMessageTemplatesValidateBeforeCall(brandId, locale, null);
        Type localVarReturnType = new TypeToken<List<ListMessageTemplates200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Message Templates (asynchronously)
     * List Message Templates
     * @param brandId Unique identifier for the branding object. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessageTemplatesAsync(Integer brandId, String locale, final ApiCallback<List<ListMessageTemplates200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessageTemplatesValidateBeforeCall(brandId, locale, _callback);
        Type localVarReturnType = new TypeToken<List<ListMessageTemplates200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessageTemplateById
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageTemplateByIdCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates/{template_id}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageTemplateByIdValidateBeforeCall(Integer brandId, Integer templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateMessageTemplateById(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateMessageTemplateById(Async)");
        }

        return updateMessageTemplateByIdCall(brandId, templateId, _callback);

    }

    /**
     * Update Message Template
     * Update Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate updateMessageTemplateById(Integer brandId, Integer templateId) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = updateMessageTemplateByIdWithHttpInfo(brandId, templateId);
        return localVarResp.getData();
    }

    /**
     * Update Message Template
     * Update Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> updateMessageTemplateByIdWithHttpInfo(Integer brandId, Integer templateId) throws ApiException {
        okhttp3.Call localVarCall = updateMessageTemplateByIdValidateBeforeCall(brandId, templateId, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Message Template (asynchronously)
     * Update Message Template by ID
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateId Unique identifier for the template to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageTemplateByIdAsync(Integer brandId, Integer templateId, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageTemplateByIdValidateBeforeCall(brandId, templateId, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplateByLocale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateByLocaleCall(Integer brandId, String templateType, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/branding/brands/{brand_id}/templates/{template_type}/{locale}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "template_type" + "}", localVarApiClient.escapeString(templateType.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateByLocaleValidateBeforeCall(Integer brandId, String templateType, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateTemplateByLocale(Async)");
        }

        // verify the required parameter 'templateType' is set
        if (templateType == null) {
            throw new ApiException("Missing the required parameter 'templateType' when calling updateTemplateByLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling updateTemplateByLocale(Async)");
        }

        return updateTemplateByLocaleCall(brandId, templateType, locale, _callback);

    }

    /**
     * Update Template by Type &amp; Locale
     * Update Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @return MessageTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public MessageTemplate updateTemplateByLocale(Integer brandId, String templateType, String locale) throws ApiException {
        ApiResponse<MessageTemplate> localVarResp = updateTemplateByLocaleWithHttpInfo(brandId, templateType, locale);
        return localVarResp.getData();
    }

    /**
     * Update Template by Type &amp; Locale
     * Update Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @return ApiResponse&lt;MessageTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageTemplate> updateTemplateByLocaleWithHttpInfo(Integer brandId, String templateType, String locale) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateByLocaleValidateBeforeCall(brandId, templateType, locale, null);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Template by Type &amp; Locale (asynchronously)
     * Update Template by Type and Locale
     * @param brandId Unique identifier for the branding object. (required)
     * @param templateType The message template type to return. (required)
     * @param locale The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateByLocaleAsync(Integer brandId, String templateType, String locale, final ApiCallback<MessageTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateByLocaleValidateBeforeCall(brandId, templateType, locale, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
