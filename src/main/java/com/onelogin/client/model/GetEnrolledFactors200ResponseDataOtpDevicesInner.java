/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * GetEnrolledFactors200ResponseDataOtpDevicesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class GetEnrolledFactors200ResponseDataOtpDevicesInner {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_STATE_TOKEN = "state_token";
  @SerializedName(SERIALIZED_NAME_STATE_TOKEN)
  private String stateToken;

  public static final String SERIALIZED_NAME_AUTH_FACTOR_NAME = "auth_factor_name";
  @SerializedName(SERIALIZED_NAME_AUTH_FACTOR_NAME)
  private String authFactorName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_TYPE_DISPLAY_NAME = "type_display_name";
  @SerializedName(SERIALIZED_NAME_TYPE_DISPLAY_NAME)
  private String typeDisplayName;

  public static final String SERIALIZED_NAME_NEEDS_TRIGGER = "needs_trigger";
  @SerializedName(SERIALIZED_NAME_NEEDS_TRIGGER)
  private Boolean needsTrigger;

  public static final String SERIALIZED_NAME_USER_DISPLAY_NAME = "user_display_name";
  @SerializedName(SERIALIZED_NAME_USER_DISPLAY_NAME)
  private String userDisplayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public GetEnrolledFactors200ResponseDataOtpDevicesInner() {
  }

  public GetEnrolledFactors200ResponseDataOtpDevicesInner active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * True &#x3D; enabled (used successfully for authentication at least once). False &#x3D; pending (registered but never used).
   * @return active
  **/
  @javax.annotation.Nullable

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner _default(Boolean _default) {
    
    this._default = _default;
    return this;
  }

   /**
   * True &#x3D; is userâ€™s default MFA device for OneLogin.
   * @return _default
  **/
  @javax.annotation.Nullable

  public Boolean getDefault() {
    return _default;
  }


  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner stateToken(String stateToken) {
    
    this.stateToken = stateToken;
    return this;
  }

   /**
   * A short lived token that is required to Verify the Factor. This token expires in 120 seconds.
   * @return stateToken
  **/
  @javax.annotation.Nullable

  public String getStateToken() {
    return stateToken;
  }


  public void setStateToken(String stateToken) {
    this.stateToken = stateToken;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner authFactorName(String authFactorName) {
    
    this.authFactorName = authFactorName;
    return this;
  }

   /**
   * \&quot;Official\&quot; authentication factor name, as it appears to administrators in OneLogin.
   * @return authFactorName
  **/
  @javax.annotation.Nullable

  public String getAuthFactorName() {
    return authFactorName;
  }


  public void setAuthFactorName(String authFactorName) {
    this.authFactorName = authFactorName;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * For OTP codes sent via SMS, the phone number receiving the SMS message.
   * @return phoneNumber
  **/
  @javax.annotation.Nullable

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner typeDisplayName(String typeDisplayName) {
    
    this.typeDisplayName = typeDisplayName;
    return this;
  }

   /**
   * Authentication factor display name as it appears to users upon initial registration, as defined by admins at Settings &gt; Authentication Factors.
   * @return typeDisplayName
  **/
  @javax.annotation.Nullable

  public String getTypeDisplayName() {
    return typeDisplayName;
  }


  public void setTypeDisplayName(String typeDisplayName) {
    this.typeDisplayName = typeDisplayName;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner needsTrigger(Boolean needsTrigger) {
    
    this.needsTrigger = needsTrigger;
    return this;
  }

   /**
   * true: You MUST Activate this Factor to trigger an SMS or Push notification before Verifying the OTP code. false: No Activation required. You can Verify the OTP immediately. MFA factors that provide both push notifications (user accepts notification) and pull code submission (user initiates code submission from device or enters it manually) should appear twice; once with needs_trigger: true and once with needs_trigger: false.
   * @return needsTrigger
  **/
  @javax.annotation.Nullable

  public Boolean getNeedsTrigger() {
    return needsTrigger;
  }


  public void setNeedsTrigger(Boolean needsTrigger) {
    this.needsTrigger = needsTrigger;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner userDisplayName(String userDisplayName) {
    
    this.userDisplayName = userDisplayName;
    return this;
  }

   /**
   * Authentication factor display name assigned by users when they enroll the device.
   * @return userDisplayName
  **/
  @javax.annotation.Nullable

  public String getUserDisplayName() {
    return userDisplayName;
  }


  public void setUserDisplayName(String userDisplayName) {
    this.userDisplayName = userDisplayName;
  }


  public GetEnrolledFactors200ResponseDataOtpDevicesInner id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * MFA device identifier.
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEnrolledFactors200ResponseDataOtpDevicesInner getEnrolledFactors200ResponseDataOtpDevicesInner = (GetEnrolledFactors200ResponseDataOtpDevicesInner) o;
    return Objects.equals(this.active, getEnrolledFactors200ResponseDataOtpDevicesInner.active) &&
        Objects.equals(this._default, getEnrolledFactors200ResponseDataOtpDevicesInner._default) &&
        Objects.equals(this.stateToken, getEnrolledFactors200ResponseDataOtpDevicesInner.stateToken) &&
        Objects.equals(this.authFactorName, getEnrolledFactors200ResponseDataOtpDevicesInner.authFactorName) &&
        Objects.equals(this.phoneNumber, getEnrolledFactors200ResponseDataOtpDevicesInner.phoneNumber) &&
        Objects.equals(this.typeDisplayName, getEnrolledFactors200ResponseDataOtpDevicesInner.typeDisplayName) &&
        Objects.equals(this.needsTrigger, getEnrolledFactors200ResponseDataOtpDevicesInner.needsTrigger) &&
        Objects.equals(this.userDisplayName, getEnrolledFactors200ResponseDataOtpDevicesInner.userDisplayName) &&
        Objects.equals(this.id, getEnrolledFactors200ResponseDataOtpDevicesInner.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, _default, stateToken, authFactorName, phoneNumber, typeDisplayName, needsTrigger, userDisplayName, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEnrolledFactors200ResponseDataOtpDevicesInner {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    stateToken: ").append(toIndentedString(stateToken)).append("\n");
    sb.append("    authFactorName: ").append(toIndentedString(authFactorName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    typeDisplayName: ").append(toIndentedString(typeDisplayName)).append("\n");
    sb.append("    needsTrigger: ").append(toIndentedString(needsTrigger)).append("\n");
    sb.append("    userDisplayName: ").append(toIndentedString(userDisplayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("default");
    openapiFields.add("state_token");
    openapiFields.add("auth_factor_name");
    openapiFields.add("phone_number");
    openapiFields.add("type_display_name");
    openapiFields.add("needs_trigger");
    openapiFields.add("user_display_name");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetEnrolledFactors200ResponseDataOtpDevicesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetEnrolledFactors200ResponseDataOtpDevicesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEnrolledFactors200ResponseDataOtpDevicesInner is not found in the empty JSON string", GetEnrolledFactors200ResponseDataOtpDevicesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetEnrolledFactors200ResponseDataOtpDevicesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEnrolledFactors200ResponseDataOtpDevicesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("state_token") != null && !jsonObj.get("state_token").isJsonNull()) && !jsonObj.get("state_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_token").toString()));
      }
      if ((jsonObj.get("auth_factor_name") != null && !jsonObj.get("auth_factor_name").isJsonNull()) && !jsonObj.get("auth_factor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_factor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_factor_name").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("type_display_name") != null && !jsonObj.get("type_display_name").isJsonNull()) && !jsonObj.get("type_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_display_name").toString()));
      }
      if ((jsonObj.get("user_display_name") != null && !jsonObj.get("user_display_name").isJsonNull()) && !jsonObj.get("user_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_display_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEnrolledFactors200ResponseDataOtpDevicesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEnrolledFactors200ResponseDataOtpDevicesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEnrolledFactors200ResponseDataOtpDevicesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEnrolledFactors200ResponseDataOtpDevicesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEnrolledFactors200ResponseDataOtpDevicesInner>() {
           @Override
           public void write(JsonWriter out, GetEnrolledFactors200ResponseDataOtpDevicesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEnrolledFactors200ResponseDataOtpDevicesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetEnrolledFactors200ResponseDataOtpDevicesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetEnrolledFactors200ResponseDataOtpDevicesInner
  * @throws IOException if the JSON string is invalid with respect to GetEnrolledFactors200ResponseDataOtpDevicesInner
  */
  public static GetEnrolledFactors200ResponseDataOtpDevicesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEnrolledFactors200ResponseDataOtpDevicesInner.class);
  }

 /**
  * Convert an instance of GetEnrolledFactors200ResponseDataOtpDevicesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

