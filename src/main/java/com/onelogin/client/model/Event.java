/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class Event {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ACTOR_SYSTEM = "actor_system";
  @SerializedName(SERIALIZED_NAME_ACTOR_SYSTEM)
  private String actorSystem;

  public static final String SERIALIZED_NAME_ACTOR_USER_ID = "actor_user_id";
  @SerializedName(SERIALIZED_NAME_ACTOR_USER_ID)
  private Integer actorUserId;

  public static final String SERIALIZED_NAME_ACTOR_USER_NAME = "actor_user_name";
  @SerializedName(SERIALIZED_NAME_ACTOR_USER_NAME)
  private String actorUserName;

  public static final String SERIALIZED_NAME_ADC_ID = "adc_id";
  @SerializedName(SERIALIZED_NAME_ADC_ID)
  private Integer adcId;

  public static final String SERIALIZED_NAME_APP_NAME = "app-name";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private Integer appId;

  public static final String SERIALIZED_NAME_ASSUMED_BY_SUPERADMIN_OR_RESELLER = "assumed_by_superadmin_or_reseller";
  @SerializedName(SERIALIZED_NAME_ASSUMED_BY_SUPERADMIN_OR_RESELLER)
  private Integer assumedBySuperadminOrReseller;

  public static final String SERIALIZED_NAME_ASSUMING_ACTING_USER_ID = "assuming_acting_user_id";
  @SerializedName(SERIALIZED_NAME_ASSUMING_ACTING_USER_ID)
  private Integer assumingActingUserId;

  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "certificate_id";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private Integer certificateId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_MESSAGE = "custom_message";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MESSAGE)
  private String customMessage;

  public static final String SERIALIZED_NAME_DIRECTORY_SYNC_RUN_ID = "directory_sync_run_id";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SYNC_RUN_ID)
  private Integer directorySyncRunId;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "error_description";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  /**
   * Type of event triggered.
   */
  @JsonAdapter(EventTypeIdEnum.Adapter.class)
  public enum EventTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_33(33),
    
    NUMBER_34(34),
    
    NUMBER_35(35),
    
    NUMBER_36(36),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91),
    
    NUMBER_92(92),
    
    NUMBER_95(95),
    
    NUMBER_96(96),
    
    NUMBER_100(100),
    
    NUMBER_101(101),
    
    NUMBER_102(102),
    
    NUMBER_103(103),
    
    NUMBER_104(104),
    
    NUMBER_105(105),
    
    NUMBER_106(106),
    
    NUMBER_110(110),
    
    NUMBER_111(111),
    
    NUMBER_112(112),
    
    NUMBER_113(113),
    
    NUMBER_114(114),
    
    NUMBER_115(115),
    
    NUMBER_116(116),
    
    NUMBER_117(117),
    
    NUMBER_118(118),
    
    NUMBER_119(119),
    
    NUMBER_120(120),
    
    NUMBER_121(121),
    
    NUMBER_122(122),
    
    NUMBER_123(123),
    
    NUMBER_124(124),
    
    NUMBER_125(125),
    
    NUMBER_126(126),
    
    NUMBER_127(127),
    
    NUMBER_128(128),
    
    NUMBER_129(129),
    
    NUMBER_130(130),
    
    NUMBER_131(131),
    
    NUMBER_132(132),
    
    NUMBER_133(133),
    
    NUMBER_134(134),
    
    NUMBER_135(135),
    
    NUMBER_136(136),
    
    NUMBER_137(137),
    
    NUMBER_138(138),
    
    NUMBER_139(139),
    
    NUMBER_140(140),
    
    NUMBER_141(141),
    
    NUMBER_145(145),
    
    NUMBER_146(146),
    
    NUMBER_147(147),
    
    NUMBER_148(148),
    
    NUMBER_149(149),
    
    NUMBER_150(150),
    
    NUMBER_151(151),
    
    NUMBER_152(152),
    
    NUMBER_153(153),
    
    NUMBER_154(154),
    
    NUMBER_155(155),
    
    NUMBER_156(156),
    
    NUMBER_157(157),
    
    NUMBER_158(158),
    
    NUMBER_159(159),
    
    NUMBER_160(160),
    
    NUMBER_161(161),
    
    NUMBER_162(162),
    
    NUMBER_163(163),
    
    NUMBER_164(164),
    
    NUMBER_165(165),
    
    NUMBER_166(166),
    
    NUMBER_167(167),
    
    NUMBER_168(168),
    
    NUMBER_169(169),
    
    NUMBER_170(170),
    
    NUMBER_171(171),
    
    NUMBER_172(172),
    
    NUMBER_173(173),
    
    NUMBER_174(174),
    
    NUMBER_175(175),
    
    NUMBER_176(176),
    
    NUMBER_177(177),
    
    NUMBER_178(178),
    
    NUMBER_179(179),
    
    NUMBER_180(180),
    
    NUMBER_181(181),
    
    NUMBER_182(182),
    
    NUMBER_183(183),
    
    NUMBER_184(184),
    
    NUMBER_185(185),
    
    NUMBER_186(186),
    
    NUMBER_187(187),
    
    NUMBER_188(188),
    
    NUMBER_189(189),
    
    NUMBER_190(190),
    
    NUMBER_191(191),
    
    NUMBER_192(192),
    
    NUMBER_193(193),
    
    NUMBER_194(194),
    
    NUMBER_195(195),
    
    NUMBER_196(196),
    
    NUMBER_197(197),
    
    NUMBER_198(198),
    
    NUMBER_199(199),
    
    NUMBER_200(200),
    
    NUMBER_201(201),
    
    NUMBER_202(202),
    
    NUMBER_203(203),
    
    NUMBER_204(204),
    
    NUMBER_205(205),
    
    NUMBER_206(206),
    
    NUMBER_207(207),
    
    NUMBER_208(208),
    
    NUMBER_209(209),
    
    NUMBER_210(210),
    
    NUMBER_211(211),
    
    NUMBER_212(212),
    
    NUMBER_213(213),
    
    NUMBER_214(214),
    
    NUMBER_215(215),
    
    NUMBER_216(216),
    
    NUMBER_217(217),
    
    NUMBER_218(218),
    
    NUMBER_219(219),
    
    NUMBER_220(220),
    
    NUMBER_221(221),
    
    NUMBER_222(222),
    
    NUMBER_223(223),
    
    NUMBER_224(224),
    
    NUMBER_225(225),
    
    NUMBER_226(226),
    
    NUMBER_227(227),
    
    NUMBER_228(228),
    
    NUMBER_229(229),
    
    NUMBER_230(230),
    
    NUMBER_231(231),
    
    NUMBER_232(232),
    
    NUMBER_233(233),
    
    NUMBER_234(234),
    
    NUMBER_235(235),
    
    NUMBER_236(236),
    
    NUMBER_237(237),
    
    NUMBER_238(238),
    
    NUMBER_239(239),
    
    NUMBER_240(240),
    
    NUMBER_241(241),
    
    NUMBER_242(242),
    
    NUMBER_243(243),
    
    NUMBER_244(244),
    
    NUMBER_245(245),
    
    NUMBER_246(246),
    
    NUMBER_247(247),
    
    NUMBER_248(248),
    
    NUMBER_249(249),
    
    NUMBER_250(250),
    
    NUMBER_251(251),
    
    NUMBER_252(252),
    
    NUMBER_253(253),
    
    NUMBER_254(254),
    
    NUMBER_255(255),
    
    NUMBER_291(291),
    
    NUMBER_300(300),
    
    NUMBER_301(301),
    
    NUMBER_303(303),
    
    NUMBER_304(304),
    
    NUMBER_305(305),
    
    NUMBER_306(306),
    
    NUMBER_307(307),
    
    NUMBER_330(330),
    
    NUMBER_331(331),
    
    NUMBER_332(332),
    
    NUMBER_333(333),
    
    NUMBER_334(334),
    
    NUMBER_400(400),
    
    NUMBER_401(401),
    
    NUMBER_402(402),
    
    NUMBER_410(410),
    
    NUMBER_411(411),
    
    NUMBER_412(412),
    
    NUMBER_501(501),
    
    NUMBER_502(502),
    
    NUMBER_503(503),
    
    NUMBER_510(510),
    
    NUMBER_511(511),
    
    NUMBER_512(512),
    
    NUMBER_513(513),
    
    NUMBER_514(514),
    
    NUMBER_515(515),
    
    NUMBER_516(516),
    
    NUMBER_517(517),
    
    NUMBER_518(518),
    
    NUMBER_519(519),
    
    NUMBER_520(520),
    
    NUMBER_521(521),
    
    NUMBER_522(522),
    
    NUMBER_523(523),
    
    NUMBER_524(524),
    
    NUMBER_525(525),
    
    NUMBER_526(526),
    
    NUMBER_527(527),
    
    NUMBER_528(528),
    
    NUMBER_529(529),
    
    NUMBER_530(530),
    
    NUMBER_531(531),
    
    NUMBER_532(532),
    
    NUMBER_533(533),
    
    NUMBER_534(534),
    
    NUMBER_535(535),
    
    NUMBER_536(536),
    
    NUMBER_537(537),
    
    NUMBER_538(538),
    
    NUMBER_539(539),
    
    NUMBER_540(540),
    
    NUMBER_541(541),
    
    NUMBER_542(542),
    
    NUMBER_545(545),
    
    NUMBER_546(546),
    
    NUMBER_550(550),
    
    NUMBER_551(551),
    
    NUMBER_552(552),
    
    NUMBER_553(553),
    
    NUMBER_554(554),
    
    NUMBER_555(555),
    
    NUMBER_600(600),
    
    NUMBER_601(601),
    
    NUMBER_602(602),
    
    NUMBER_700(700),
    
    NUMBER_701(701),
    
    NUMBER_702(702),
    
    NUMBER_703(703),
    
    NUMBER_704(704),
    
    NUMBER_705(705),
    
    NUMBER_706(706),
    
    NUMBER_800(800),
    
    NUMBER_801(801),
    
    NUMBER_802(802),
    
    NUMBER_803(803),
    
    NUMBER_804(804),
    
    NUMBER_805(805),
    
    NUMBER_900(900),
    
    NUMBER_901(901),
    
    NUMBER_902(902),
    
    NUMBER_903(903),
    
    NUMBER_904(904),
    
    NUMBER_905(905),
    
    NUMBER_906(906),
    
    NUMBER_907(907),
    
    NUMBER_911(911),
    
    NUMBER_912(912),
    
    NUMBER_931(931),
    
    NUMBER_932(932),
    
    NUMBER_950(950),
    
    NUMBER_1001(1001),
    
    NUMBER_1002(1002),
    
    NUMBER_1010(1010),
    
    NUMBER_1100(1100),
    
    NUMBER_1101(1101),
    
    NUMBER_1200(1200),
    
    NUMBER_1201(1201),
    
    NUMBER_1244(1244),
    
    NUMBER_1245(1245),
    
    NUMBER_1300(1300),
    
    NUMBER_1301(1301),
    
    NUMBER_1302(1302),
    
    NUMBER_1303(1303),
    
    NUMBER_1304(1304),
    
    NUMBER_1305(1305),
    
    NUMBER_1400(1400),
    
    NUMBER_1401(1401),
    
    NUMBER_1402(1402),
    
    NUMBER_1403(1403),
    
    NUMBER_1404(1404),
    
    NUMBER_1405(1405),
    
    NUMBER_1406(1406),
    
    NUMBER_1407(1407),
    
    NUMBER_1408(1408),
    
    NUMBER_1409(1409),
    
    NUMBER_1410(1410),
    
    NUMBER_1411(1411),
    
    NUMBER_1412(1412),
    
    NUMBER_1413(1413),
    
    NUMBER_1414(1414),
    
    NUMBER_1415(1415),
    
    NUMBER_1416(1416),
    
    NUMBER_1417(1417),
    
    NUMBER_1418(1418),
    
    NUMBER_1419(1419),
    
    NUMBER_1420(1420),
    
    NUMBER_1421(1421),
    
    NUMBER_1422(1422),
    
    NUMBER_1423(1423),
    
    NUMBER_1424(1424),
    
    NUMBER_1500(1500),
    
    NUMBER_1501(1501),
    
    NUMBER_1502(1502),
    
    NUMBER_1503(1503),
    
    NUMBER_1504(1504),
    
    NUMBER_1505(1505),
    
    NUMBER_1506(1506),
    
    NUMBER_1507(1507),
    
    NUMBER_1508(1508),
    
    NUMBER_1509(1509),
    
    NUMBER_1510(1510),
    
    NUMBER_1511(1511),
    
    NUMBER_1512(1512),
    
    NUMBER_1513(1513),
    
    NUMBER_1514(1514),
    
    NUMBER_1600(1600),
    
    NUMBER_1601(1601),
    
    NUMBER_1602(1602),
    
    NUMBER_1603(1603),
    
    NUMBER_1604(1604),
    
    NUMBER_1605(1605),
    
    NUMBER_1606(1606),
    
    NUMBER_1607(1607),
    
    NUMBER_1608(1608),
    
    NUMBER_1609(1609),
    
    NUMBER_1700(1700),
    
    NUMBER_1701(1701),
    
    NUMBER_1702(1702),
    
    NUMBER_1801(1801),
    
    NUMBER_1802(1802),
    
    NUMBER_1900(1900),
    
    NUMBER_1901(1901),
    
    NUMBER_1902(1902),
    
    NUMBER_1903(1903),
    
    NUMBER_1904(1904),
    
    NUMBER_1905(1905),
    
    NUMBER_2000(2000),
    
    NUMBER_2001(2001),
    
    NUMBER_2002(2002),
    
    NUMBER_2003(2003),
    
    NUMBER_2004(2004),
    
    NUMBER_2005(2005),
    
    NUMBER_2006(2006),
    
    NUMBER_2007(2007),
    
    NUMBER_2008(2008),
    
    NUMBER_2009(2009),
    
    NUMBER_2010(2010),
    
    NUMBER_2011(2011),
    
    NUMBER_2012(2012),
    
    NUMBER_2013(2013),
    
    NUMBER_2014(2014),
    
    NUMBER_2015(2015),
    
    NUMBER_2016(2016),
    
    NUMBER_2017(2017),
    
    NUMBER_2018(2018),
    
    NUMBER_2100(2100),
    
    NUMBER_2101(2101),
    
    NUMBER_2102(2102),
    
    NUMBER_2103(2103),
    
    NUMBER_2104(2104),
    
    NUMBER_2105(2105),
    
    NUMBER_2106(2106),
    
    NUMBER_2107(2107),
    
    NUMBER_2108(2108),
    
    NUMBER_2109(2109),
    
    NUMBER_2110(2110),
    
    NUMBER_2111(2111),
    
    NUMBER_2112(2112),
    
    NUMBER_2113(2113),
    
    NUMBER_2114(2114),
    
    NUMBER_2201(2201),
    
    NUMBER_2202(2202),
    
    NUMBER_2203(2203),
    
    NUMBER_2204(2204),
    
    NUMBER_3000(3000),
    
    NUMBER_3001(3001),
    
    NUMBER_3002(3002),
    
    NUMBER_3003(3003),
    
    NUMBER_3004(3004),
    
    NUMBER_3005(3005),
    
    NUMBER_3006(3006),
    
    NUMBER_3007(3007),
    
    NUMBER_3008(3008),
    
    NUMBER_3009(3009),
    
    NUMBER_3010(3010),
    
    NUMBER_3011(3011),
    
    NUMBER_3012(3012),
    
    NUMBER_3013(3013),
    
    NUMBER_3014(3014),
    
    NUMBER_3015(3015),
    
    NUMBER_3016(3016),
    
    NUMBER_3017(3017),
    
    NUMBER_3018(3018),
    
    NUMBER_3019(3019),
    
    NUMBER_3020(3020),
    
    NUMBER_3021(3021),
    
    NUMBER_3022(3022),
    
    NUMBER_3023(3023),
    
    NUMBER_3024(3024),
    
    NUMBER_3025(3025),
    
    NUMBER_3026(3026),
    
    NUMBER_3027(3027),
    
    NUMBER_3028(3028),
    
    NUMBER_9000(9000),
    
    NUMBER_9001(9001),
    
    NUMBER_9002(9002),
    
    NUMBER_9003(9003),
    
    NUMBER_9004(9004),
    
    NUMBER_9005(9005),
    
    NUMBER_9006(9006),
    
    NUMBER_9007(9007),
    
    NUMBER_9008(9008),
    
    NUMBER_9009(9009),
    
    NUMBER_9010(9010),
    
    NUMBER_9011(9011),
    
    NUMBER_9012(9012),
    
    NUMBER_9013(9013),
    
    NUMBER_9014(9014),
    
    NUMBER_9015(9015),
    
    NUMBER_9016(9016),
    
    NUMBER_9017(9017),
    
    NUMBER_9018(9018),
    
    NUMBER_9019(9019),
    
    NUMBER_9020(9020),
    
    NUMBER_9021(9021),
    
    NUMBER_9022(9022),
    
    NUMBER_9023(9023),
    
    NUMBER_9024(9024),
    
    NUMBER_9025(9025),
    
    NUMBER_9026(9026),
    
    NUMBER_9027(9027),
    
    NUMBER_9028(9028),
    
    NUMBER_9029(9029),
    
    NUMBER_9030(9030),
    
    NUMBER_9031(9031),
    
    NUMBER_9032(9032),
    
    NUMBER_9033(9033),
    
    NUMBER_9034(9034),
    
    NUMBER_9035(9035),
    
    NUMBER_9036(9036),
    
    NUMBER_9037(9037),
    
    NUMBER_9038(9038),
    
    NUMBER_9039(9039),
    
    NUMBER_9040(9040),
    
    NUMBER_9041(9041),
    
    NUMBER_9042(9042),
    
    NUMBER_9043(9043),
    
    NUMBER_9044(9044),
    
    NUMBER_9045(9045),
    
    NUMBER_9046(9046),
    
    NUMBER_9047(9047),
    
    NUMBER_9048(9048),
    
    NUMBER_9049(9049),
    
    NUMBER_9050(9050),
    
    NUMBER_9051(9051),
    
    NUMBER_9052(9052),
    
    NUMBER_9053(9053),
    
    NUMBER_9054(9054),
    
    NUMBER_9055(9055),
    
    NUMBER_9056(9056),
    
    NUMBER_9057(9057),
    
    NUMBER_9058(9058),
    
    NUMBER_9059(9059);

    private Integer value;

    EventTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeIdEnum fromValue(Integer value) {
      for (EventTypeIdEnum b : EventTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return EventTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE_ID = "event_type_id";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_ID)
  private EventTypeIdEnum eventTypeId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group-name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IPADDR = "ipaddr";
  @SerializedName(SERIALIZED_NAME_IPADDR)
  private String ipaddr;

  public static final String SERIALIZED_NAME_MAPPING_ID = "mapping_id";
  @SerializedName(SERIALIZED_NAME_MAPPING_ID)
  private Integer mappingId;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private Integer objectId;

  public static final String SERIALIZED_NAME_OTP_DEVICE_ID = "otp_device_id";
  @SerializedName(SERIALIZED_NAME_OTP_DEVICE_ID)
  private Integer otpDeviceId;

  public static final String SERIALIZED_NAME_OTP_DEVICE_NAME = "otp_device_name";
  @SerializedName(SERIALIZED_NAME_OTP_DEVICE_NAME)
  private String otpDeviceName;

  public static final String SERIALIZED_NAME_PARAM = "param";
  @SerializedName(SERIALIZED_NAME_PARAM)
  private String param;

  public static final String SERIALIZED_NAME_POLICY_ID = "policy_id";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private Integer policyId;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policy_type";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private String policyType;

  public static final String SERIALIZED_NAME_PRIVILEGE_ID = "privilege_id";
  @SerializedName(SERIALIZED_NAME_PRIVILEGE_ID)
  private Integer privilegeId;

  public static final String SERIALIZED_NAME_PROXY_IP = "proxy_ip";
  @SerializedName(SERIALIZED_NAME_PROXY_IP)
  private String proxyIp;

  public static final String SERIALIZED_NAME_RADIUS_CONFIG_ID = "radius_config_id";
  @SerializedName(SERIALIZED_NAME_RADIUS_CONFIG_ID)
  private Integer radiusConfigId;

  public static final String SERIALIZED_NAME_RESOLVED_AT = "resolved_at";
  @SerializedName(SERIALIZED_NAME_RESOLVED_AT)
  private String resolvedAt;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE_ID = "resource_type_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE_ID)
  private Integer resourceTypeId;

  public static final String SERIALIZED_NAME_RISK_COOKIE_ID = "risk_cookie_id";
  @SerializedName(SERIALIZED_NAME_RISK_COOKIE_ID)
  private String riskCookieId;

  public static final String SERIALIZED_NAME_RISK_REASONS = "risk_reasons";
  @SerializedName(SERIALIZED_NAME_RISK_REASONS)
  private String riskReasons;

  public static final String SERIALIZED_NAME_RISK_SCORE = "risk_score";
  @SerializedName(SERIALIZED_NAME_RISK_SCORE)
  private Integer riskScore;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private Integer roleId;

  public static final String SERIALIZED_NAME_ROLE_NAME = "role_name";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY_ID = "service_directory_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY_ID)
  private Integer serviceDirectoryId;

  public static final String SERIALIZED_NAME_SOLVED = "solved";
  @SerializedName(SERIALIZED_NAME_SOLVED)
  private Boolean solved;

  public static final String SERIALIZED_NAME_TRUSTED_IDP_ID = "trusted_idp_id";
  @SerializedName(SERIALIZED_NAME_TRUSTED_IDP_ID)
  private Integer trustedIdpId;

  public static final String SERIALIZED_NAME_USER_FIELD_ID = "user_field_id";
  @SerializedName(SERIALIZED_NAME_USER_FIELD_ID)
  private Integer userFieldId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public Event() {
  }

  public Event accountId(Integer accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Account that triggered the event.
   * @return accountId
  **/
  @javax.annotation.Nullable

  public Integer getAccountId() {
    return accountId;
  }


  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public Event actorSystem(String actorSystem) {
    
    this.actorSystem = actorSystem;
    return this;
  }

   /**
   * Acting system that triggered the event when the actor is not a user.
   * @return actorSystem
  **/
  @javax.annotation.Nullable

  public String getActorSystem() {
    return actorSystem;
  }


  public void setActorSystem(String actorSystem) {
    this.actorSystem = actorSystem;
  }


  public Event actorUserId(Integer actorUserId) {
    
    this.actorUserId = actorUserId;
    return this;
  }

   /**
   * ID of the user whose action triggered the event.
   * @return actorUserId
  **/
  @javax.annotation.Nullable

  public Integer getActorUserId() {
    return actorUserId;
  }


  public void setActorUserId(Integer actorUserId) {
    this.actorUserId = actorUserId;
  }


  public Event actorUserName(String actorUserName) {
    
    this.actorUserName = actorUserName;
    return this;
  }

   /**
   * First and last name of the user whose action triggered the event.
   * @return actorUserName
  **/
  @javax.annotation.Nullable

  public String getActorUserName() {
    return actorUserName;
  }


  public void setActorUserName(String actorUserName) {
    this.actorUserName = actorUserName;
  }


  public Event adcId(Integer adcId) {
    
    this.adcId = adcId;
    return this;
  }

   /**
   * Get adcId
   * @return adcId
  **/
  @javax.annotation.Nullable

  public Integer getAdcId() {
    return adcId;
  }


  public void setAdcId(Integer adcId) {
    this.adcId = adcId;
  }


  public Event appName(String appName) {
    
    this.appName = appName;
    return this;
  }

   /**
   * Name of the app involved in the event, if applicable.
   * @return appName
  **/
  @javax.annotation.Nullable

  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    this.appName = appName;
  }


  public Event appId(Integer appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * ID of the app involved in the event, if applicable.
   * @return appId
  **/
  @javax.annotation.Nullable

  public Integer getAppId() {
    return appId;
  }


  public void setAppId(Integer appId) {
    this.appId = appId;
  }


  public Event assumedBySuperadminOrReseller(Integer assumedBySuperadminOrReseller) {
    
    this.assumedBySuperadminOrReseller = assumedBySuperadminOrReseller;
    return this;
  }

   /**
   * Get assumedBySuperadminOrReseller
   * @return assumedBySuperadminOrReseller
  **/
  @javax.annotation.Nullable

  public Integer getAssumedBySuperadminOrReseller() {
    return assumedBySuperadminOrReseller;
  }


  public void setAssumedBySuperadminOrReseller(Integer assumedBySuperadminOrReseller) {
    this.assumedBySuperadminOrReseller = assumedBySuperadminOrReseller;
  }


  public Event assumingActingUserId(Integer assumingActingUserId) {
    
    this.assumingActingUserId = assumingActingUserId;
    return this;
  }

   /**
   * ID of the user who assumed the role of the acting user to trigger the event, if applicable.
   * @return assumingActingUserId
  **/
  @javax.annotation.Nullable

  public Integer getAssumingActingUserId() {
    return assumingActingUserId;
  }


  public void setAssumingActingUserId(Integer assumingActingUserId) {
    this.assumingActingUserId = assumingActingUserId;
  }


  public Event certificateId(Integer certificateId) {
    
    this.certificateId = certificateId;
    return this;
  }

   /**
   * Get certificateId
   * @return certificateId
  **/
  @javax.annotation.Nullable

  public Integer getCertificateId() {
    return certificateId;
  }


  public void setCertificateId(Integer certificateId) {
    this.certificateId = certificateId;
  }


  public Event clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client ID used to generate the access token that made the API call that generated the event.
   * @return clientId
  **/
  @javax.annotation.Nullable

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Event createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * ISO8601 Time and date at which the event was created. This value is autogenerated by OneLogin.
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Event customMessage(String customMessage) {
    
    this.customMessage = customMessage;
    return this;
  }

   /**
   * More details about the event.
   * @return customMessage
  **/
  @javax.annotation.Nullable

  public String getCustomMessage() {
    return customMessage;
  }


  public void setCustomMessage(String customMessage) {
    this.customMessage = customMessage;
  }


  public Event directorySyncRunId(Integer directorySyncRunId) {
    
    this.directorySyncRunId = directorySyncRunId;
    return this;
  }

   /**
   * Directory sync run ID.
   * @return directorySyncRunId
  **/
  @javax.annotation.Nullable

  public Integer getDirectorySyncRunId() {
    return directorySyncRunId;
  }


  public void setDirectorySyncRunId(Integer directorySyncRunId) {
    this.directorySyncRunId = directorySyncRunId;
  }


  public Event errorDescription(String errorDescription) {
    
    this.errorDescription = errorDescription;
    return this;
  }

   /**
   * Provisioning error details, if applicable.
   * @return errorDescription
  **/
  @javax.annotation.Nullable

  public String getErrorDescription() {
    return errorDescription;
  }


  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public Event eventTypeId(EventTypeIdEnum eventTypeId) {
    
    this.eventTypeId = eventTypeId;
    return this;
  }

   /**
   * Type of event triggered.
   * @return eventTypeId
  **/
  @javax.annotation.Nullable

  public EventTypeIdEnum getEventTypeId() {
    return eventTypeId;
  }


  public void setEventTypeId(EventTypeIdEnum eventTypeId) {
    this.eventTypeId = eventTypeId;
  }


  public Event groupName(String groupName) {
    
    this.groupName = groupName;
    return this;
  }

   /**
   * Name of a group involved in the event.
   * @return groupName
  **/
  @javax.annotation.Nullable

  public String getGroupName() {
    return groupName;
  }


  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public Event groupId(Integer groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * ID of a group involved in the event.
   * @return groupId
  **/
  @javax.annotation.Nullable

  public Integer getGroupId() {
    return groupId;
  }


  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public Event id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Event&#39;s unique ID in OneLogin. Autogenerated by OneLogin.
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Event ipaddr(String ipaddr) {
    
    this.ipaddr = ipaddr;
    return this;
  }

   /**
   * IP address of the machine used to trigger the event.
   * @return ipaddr
  **/
  @javax.annotation.Nullable

  public String getIpaddr() {
    return ipaddr;
  }


  public void setIpaddr(String ipaddr) {
    this.ipaddr = ipaddr;
  }


  public Event mappingId(Integer mappingId) {
    
    this.mappingId = mappingId;
    return this;
  }

   /**
   * Get mappingId
   * @return mappingId
  **/
  @javax.annotation.Nullable

  public Integer getMappingId() {
    return mappingId;
  }


  public void setMappingId(Integer mappingId) {
    this.mappingId = mappingId;
  }


  public Event notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * More details about the event.
   * @return notes
  **/
  @javax.annotation.Nullable

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Event objectId(Integer objectId) {
    
    this.objectId = objectId;
    return this;
  }

   /**
   * Get objectId
   * @return objectId
  **/
  @javax.annotation.Nullable

  public Integer getObjectId() {
    return objectId;
  }


  public void setObjectId(Integer objectId) {
    this.objectId = objectId;
  }


  public Event otpDeviceId(Integer otpDeviceId) {
    
    this.otpDeviceId = otpDeviceId;
    return this;
  }

   /**
   * ID of a device involved in the event.
   * @return otpDeviceId
  **/
  @javax.annotation.Nullable

  public Integer getOtpDeviceId() {
    return otpDeviceId;
  }


  public void setOtpDeviceId(Integer otpDeviceId) {
    this.otpDeviceId = otpDeviceId;
  }


  public Event otpDeviceName(String otpDeviceName) {
    
    this.otpDeviceName = otpDeviceName;
    return this;
  }

   /**
   * Name of a device involved in the event.
   * @return otpDeviceName
  **/
  @javax.annotation.Nullable

  public String getOtpDeviceName() {
    return otpDeviceName;
  }


  public void setOtpDeviceName(String otpDeviceName) {
    this.otpDeviceName = otpDeviceName;
  }


  public Event param(String param) {
    
    this.param = param;
    return this;
  }

   /**
   * Get param
   * @return param
  **/
  @javax.annotation.Nullable

  public String getParam() {
    return param;
  }


  public void setParam(String param) {
    this.param = param;
  }


  public Event policyId(Integer policyId) {
    
    this.policyId = policyId;
    return this;
  }

   /**
   * ID of the policy involved in the event.
   * @return policyId
  **/
  @javax.annotation.Nullable

  public Integer getPolicyId() {
    return policyId;
  }


  public void setPolicyId(Integer policyId) {
    this.policyId = policyId;
  }


  public Event policyName(String policyName) {
    
    this.policyName = policyName;
    return this;
  }

   /**
   * Name of the policy involved in the event.
   * @return policyName
  **/
  @javax.annotation.Nullable

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public Event policyType(String policyType) {
    
    this.policyType = policyType;
    return this;
  }

   /**
   * Get policyType
   * @return policyType
  **/
  @javax.annotation.Nullable

  public String getPolicyType() {
    return policyType;
  }


  public void setPolicyType(String policyType) {
    this.policyType = policyType;
  }


  public Event privilegeId(Integer privilegeId) {
    
    this.privilegeId = privilegeId;
    return this;
  }

   /**
   * Get privilegeId
   * @return privilegeId
  **/
  @javax.annotation.Nullable

  public Integer getPrivilegeId() {
    return privilegeId;
  }


  public void setPrivilegeId(Integer privilegeId) {
    this.privilegeId = privilegeId;
  }


  public Event proxyIp(String proxyIp) {
    
    this.proxyIp = proxyIp;
    return this;
  }

   /**
   * Get proxyIp
   * @return proxyIp
  **/
  @javax.annotation.Nullable

  public String getProxyIp() {
    return proxyIp;
  }


  public void setProxyIp(String proxyIp) {
    this.proxyIp = proxyIp;
  }


  public Event radiusConfigId(Integer radiusConfigId) {
    
    this.radiusConfigId = radiusConfigId;
    return this;
  }

   /**
   * Get radiusConfigId
   * @return radiusConfigId
  **/
  @javax.annotation.Nullable

  public Integer getRadiusConfigId() {
    return radiusConfigId;
  }


  public void setRadiusConfigId(Integer radiusConfigId) {
    this.radiusConfigId = radiusConfigId;
  }


  public Event resolvedAt(String resolvedAt) {
    
    this.resolvedAt = resolvedAt;
    return this;
  }

   /**
   * Get resolvedAt
   * @return resolvedAt
  **/
  @javax.annotation.Nullable

  public String getResolvedAt() {
    return resolvedAt;
  }


  public void setResolvedAt(String resolvedAt) {
    this.resolvedAt = resolvedAt;
  }


  public Event resourceTypeId(Integer resourceTypeId) {
    
    this.resourceTypeId = resourceTypeId;
    return this;
  }

   /**
   * ID of the resource (user, role, group, and so forth) associated with the event.
   * @return resourceTypeId
  **/
  @javax.annotation.Nullable

  public Integer getResourceTypeId() {
    return resourceTypeId;
  }


  public void setResourceTypeId(Integer resourceTypeId) {
    this.resourceTypeId = resourceTypeId;
  }


  public Event riskCookieId(String riskCookieId) {
    
    this.riskCookieId = riskCookieId;
    return this;
  }

   /**
   * Identifier for risk cookie
   * @return riskCookieId
  **/
  @javax.annotation.Nullable

  public String getRiskCookieId() {
    return riskCookieId;
  }


  public void setRiskCookieId(String riskCookieId) {
    this.riskCookieId = riskCookieId;
  }


  public Event riskReasons(String riskReasons) {
    
    this.riskReasons = riskReasons;
    return this;
  }

   /**
   * Get riskReasons
   * @return riskReasons
  **/
  @javax.annotation.Nullable

  public String getRiskReasons() {
    return riskReasons;
  }


  public void setRiskReasons(String riskReasons) {
    this.riskReasons = riskReasons;
  }


  public Event riskScore(Integer riskScore) {
    
    this.riskScore = riskScore;
    return this;
  }

   /**
   * Get riskScore
   * @return riskScore
  **/
  @javax.annotation.Nullable

  public Integer getRiskScore() {
    return riskScore;
  }


  public void setRiskScore(Integer riskScore) {
    this.riskScore = riskScore;
  }


  public Event roleId(Integer roleId) {
    
    this.roleId = roleId;
    return this;
  }

   /**
   * ID of a role involved in the event.
   * @return roleId
  **/
  @javax.annotation.Nullable

  public Integer getRoleId() {
    return roleId;
  }


  public void setRoleId(Integer roleId) {
    this.roleId = roleId;
  }


  public Event roleName(String roleName) {
    
    this.roleName = roleName;
    return this;
  }

   /**
   * Name of a role involved in the event.
   * @return roleName
  **/
  @javax.annotation.Nullable

  public String getRoleName() {
    return roleName;
  }


  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public Event serviceDirectoryId(Integer serviceDirectoryId) {
    
    this.serviceDirectoryId = serviceDirectoryId;
    return this;
  }

   /**
   * Get serviceDirectoryId
   * @return serviceDirectoryId
  **/
  @javax.annotation.Nullable

  public Integer getServiceDirectoryId() {
    return serviceDirectoryId;
  }


  public void setServiceDirectoryId(Integer serviceDirectoryId) {
    this.serviceDirectoryId = serviceDirectoryId;
  }


  public Event solved(Boolean solved) {
    
    this.solved = solved;
    return this;
  }

   /**
   * Get solved
   * @return solved
  **/
  @javax.annotation.Nullable

  public Boolean getSolved() {
    return solved;
  }


  public void setSolved(Boolean solved) {
    this.solved = solved;
  }


  public Event trustedIdpId(Integer trustedIdpId) {
    
    this.trustedIdpId = trustedIdpId;
    return this;
  }

   /**
   * Get trustedIdpId
   * @return trustedIdpId
  **/
  @javax.annotation.Nullable

  public Integer getTrustedIdpId() {
    return trustedIdpId;
  }


  public void setTrustedIdpId(Integer trustedIdpId) {
    this.trustedIdpId = trustedIdpId;
  }


  public Event userFieldId(Integer userFieldId) {
    
    this.userFieldId = userFieldId;
    return this;
  }

   /**
   * Get userFieldId
   * @return userFieldId
  **/
  @javax.annotation.Nullable

  public Integer getUserFieldId() {
    return userFieldId;
  }


  public void setUserFieldId(Integer userFieldId) {
    this.userFieldId = userFieldId;
  }


  public Event userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * ID of the user that was acted upon to trigger the event.
   * @return userId
  **/
  @javax.annotation.Nullable

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public Event userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Name of the user that was acted upon to trigger the event.
   * @return userName
  **/
  @javax.annotation.Nullable

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.accountId, event.accountId) &&
        Objects.equals(this.actorSystem, event.actorSystem) &&
        Objects.equals(this.actorUserId, event.actorUserId) &&
        Objects.equals(this.actorUserName, event.actorUserName) &&
        Objects.equals(this.adcId, event.adcId) &&
        Objects.equals(this.appName, event.appName) &&
        Objects.equals(this.appId, event.appId) &&
        Objects.equals(this.assumedBySuperadminOrReseller, event.assumedBySuperadminOrReseller) &&
        Objects.equals(this.assumingActingUserId, event.assumingActingUserId) &&
        Objects.equals(this.certificateId, event.certificateId) &&
        Objects.equals(this.clientId, event.clientId) &&
        Objects.equals(this.createdAt, event.createdAt) &&
        Objects.equals(this.customMessage, event.customMessage) &&
        Objects.equals(this.directorySyncRunId, event.directorySyncRunId) &&
        Objects.equals(this.errorDescription, event.errorDescription) &&
        Objects.equals(this.eventTypeId, event.eventTypeId) &&
        Objects.equals(this.groupName, event.groupName) &&
        Objects.equals(this.groupId, event.groupId) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.ipaddr, event.ipaddr) &&
        Objects.equals(this.mappingId, event.mappingId) &&
        Objects.equals(this.notes, event.notes) &&
        Objects.equals(this.objectId, event.objectId) &&
        Objects.equals(this.otpDeviceId, event.otpDeviceId) &&
        Objects.equals(this.otpDeviceName, event.otpDeviceName) &&
        Objects.equals(this.param, event.param) &&
        Objects.equals(this.policyId, event.policyId) &&
        Objects.equals(this.policyName, event.policyName) &&
        Objects.equals(this.policyType, event.policyType) &&
        Objects.equals(this.privilegeId, event.privilegeId) &&
        Objects.equals(this.proxyIp, event.proxyIp) &&
        Objects.equals(this.radiusConfigId, event.radiusConfigId) &&
        Objects.equals(this.resolvedAt, event.resolvedAt) &&
        Objects.equals(this.resourceTypeId, event.resourceTypeId) &&
        Objects.equals(this.riskCookieId, event.riskCookieId) &&
        Objects.equals(this.riskReasons, event.riskReasons) &&
        Objects.equals(this.riskScore, event.riskScore) &&
        Objects.equals(this.roleId, event.roleId) &&
        Objects.equals(this.roleName, event.roleName) &&
        Objects.equals(this.serviceDirectoryId, event.serviceDirectoryId) &&
        Objects.equals(this.solved, event.solved) &&
        Objects.equals(this.trustedIdpId, event.trustedIdpId) &&
        Objects.equals(this.userFieldId, event.userFieldId) &&
        Objects.equals(this.userId, event.userId) &&
        Objects.equals(this.userName, event.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, actorSystem, actorUserId, actorUserName, adcId, appName, appId, assumedBySuperadminOrReseller, assumingActingUserId, certificateId, clientId, createdAt, customMessage, directorySyncRunId, errorDescription, eventTypeId, groupName, groupId, id, ipaddr, mappingId, notes, objectId, otpDeviceId, otpDeviceName, param, policyId, policyName, policyType, privilegeId, proxyIp, radiusConfigId, resolvedAt, resourceTypeId, riskCookieId, riskReasons, riskScore, roleId, roleName, serviceDirectoryId, solved, trustedIdpId, userFieldId, userId, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    actorSystem: ").append(toIndentedString(actorSystem)).append("\n");
    sb.append("    actorUserId: ").append(toIndentedString(actorUserId)).append("\n");
    sb.append("    actorUserName: ").append(toIndentedString(actorUserName)).append("\n");
    sb.append("    adcId: ").append(toIndentedString(adcId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    assumedBySuperadminOrReseller: ").append(toIndentedString(assumedBySuperadminOrReseller)).append("\n");
    sb.append("    assumingActingUserId: ").append(toIndentedString(assumingActingUserId)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    directorySyncRunId: ").append(toIndentedString(directorySyncRunId)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    eventTypeId: ").append(toIndentedString(eventTypeId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipaddr: ").append(toIndentedString(ipaddr)).append("\n");
    sb.append("    mappingId: ").append(toIndentedString(mappingId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    otpDeviceId: ").append(toIndentedString(otpDeviceId)).append("\n");
    sb.append("    otpDeviceName: ").append(toIndentedString(otpDeviceName)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    privilegeId: ").append(toIndentedString(privilegeId)).append("\n");
    sb.append("    proxyIp: ").append(toIndentedString(proxyIp)).append("\n");
    sb.append("    radiusConfigId: ").append(toIndentedString(radiusConfigId)).append("\n");
    sb.append("    resolvedAt: ").append(toIndentedString(resolvedAt)).append("\n");
    sb.append("    resourceTypeId: ").append(toIndentedString(resourceTypeId)).append("\n");
    sb.append("    riskCookieId: ").append(toIndentedString(riskCookieId)).append("\n");
    sb.append("    riskReasons: ").append(toIndentedString(riskReasons)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    serviceDirectoryId: ").append(toIndentedString(serviceDirectoryId)).append("\n");
    sb.append("    solved: ").append(toIndentedString(solved)).append("\n");
    sb.append("    trustedIdpId: ").append(toIndentedString(trustedIdpId)).append("\n");
    sb.append("    userFieldId: ").append(toIndentedString(userFieldId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("actor_system");
    openapiFields.add("actor_user_id");
    openapiFields.add("actor_user_name");
    openapiFields.add("adc_id");
    openapiFields.add("app-name");
    openapiFields.add("app_id");
    openapiFields.add("assumed_by_superadmin_or_reseller");
    openapiFields.add("assuming_acting_user_id");
    openapiFields.add("certificate_id");
    openapiFields.add("client_id");
    openapiFields.add("created_at");
    openapiFields.add("custom_message");
    openapiFields.add("directory_sync_run_id");
    openapiFields.add("error_description");
    openapiFields.add("event_type_id");
    openapiFields.add("group-name");
    openapiFields.add("group_id");
    openapiFields.add("id");
    openapiFields.add("ipaddr");
    openapiFields.add("mapping_id");
    openapiFields.add("notes");
    openapiFields.add("object_id");
    openapiFields.add("otp_device_id");
    openapiFields.add("otp_device_name");
    openapiFields.add("param");
    openapiFields.add("policy_id");
    openapiFields.add("policy_name");
    openapiFields.add("policy_type");
    openapiFields.add("privilege_id");
    openapiFields.add("proxy_ip");
    openapiFields.add("radius_config_id");
    openapiFields.add("resolved_at");
    openapiFields.add("resource_type_id");
    openapiFields.add("risk_cookie_id");
    openapiFields.add("risk_reasons");
    openapiFields.add("risk_score");
    openapiFields.add("role_id");
    openapiFields.add("role_name");
    openapiFields.add("service_directory_id");
    openapiFields.add("solved");
    openapiFields.add("trusted_idp_id");
    openapiFields.add("user_field_id");
    openapiFields.add("user_id");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Event
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("actor_system") != null && !jsonObj.get("actor_system").isJsonNull()) && !jsonObj.get("actor_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_system").toString()));
      }
      if ((jsonObj.get("actor_user_name") != null && !jsonObj.get("actor_user_name").isJsonNull()) && !jsonObj.get("actor_user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_user_name").toString()));
      }
      if ((jsonObj.get("app-name") != null && !jsonObj.get("app-name").isJsonNull()) && !jsonObj.get("app-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app-name").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("custom_message") != null && !jsonObj.get("custom_message").isJsonNull()) && !jsonObj.get("custom_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_message").toString()));
      }
      if ((jsonObj.get("error_description") != null && !jsonObj.get("error_description").isJsonNull()) && !jsonObj.get("error_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_description").toString()));
      }
      if ((jsonObj.get("group-name") != null && !jsonObj.get("group-name").isJsonNull()) && !jsonObj.get("group-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group-name").toString()));
      }
      if ((jsonObj.get("ipaddr") != null && !jsonObj.get("ipaddr").isJsonNull()) && !jsonObj.get("ipaddr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipaddr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipaddr").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("otp_device_name") != null && !jsonObj.get("otp_device_name").isJsonNull()) && !jsonObj.get("otp_device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otp_device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otp_device_name").toString()));
      }
      if ((jsonObj.get("param") != null && !jsonObj.get("param").isJsonNull()) && !jsonObj.get("param").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `param` to be a primitive type in the JSON string but got `%s`", jsonObj.get("param").toString()));
      }
      if ((jsonObj.get("policy_name") != null && !jsonObj.get("policy_name").isJsonNull()) && !jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      if ((jsonObj.get("policy_type") != null && !jsonObj.get("policy_type").isJsonNull()) && !jsonObj.get("policy_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_type").toString()));
      }
      if ((jsonObj.get("proxy_ip") != null && !jsonObj.get("proxy_ip").isJsonNull()) && !jsonObj.get("proxy_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy_ip").toString()));
      }
      if ((jsonObj.get("resolved_at") != null && !jsonObj.get("resolved_at").isJsonNull()) && !jsonObj.get("resolved_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolved_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolved_at").toString()));
      }
      if ((jsonObj.get("risk_cookie_id") != null && !jsonObj.get("risk_cookie_id").isJsonNull()) && !jsonObj.get("risk_cookie_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_cookie_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk_cookie_id").toString()));
      }
      if ((jsonObj.get("risk_reasons") != null && !jsonObj.get("risk_reasons").isJsonNull()) && !jsonObj.get("risk_reasons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_reasons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk_reasons").toString()));
      }
      if ((jsonObj.get("role_name") != null && !jsonObj.get("role_name").isJsonNull()) && !jsonObj.get("role_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_name").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Event given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Event
  * @throws IOException if the JSON string is invalid with respect to Event
  */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

 /**
  * Convert an instance of Event to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

