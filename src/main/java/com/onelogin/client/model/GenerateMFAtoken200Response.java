/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * GenerateMFAtoken200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class GenerateMFAtoken200Response {
  public static final String SERIALIZED_NAME_MFA_TOKEN = "mfa_token";
  @SerializedName(SERIALIZED_NAME_MFA_TOKEN)
  private String mfaToken;

  public static final String SERIALIZED_NAME_RESUABLE = "resuable";
  @SerializedName(SERIALIZED_NAME_RESUABLE)
  private Boolean resuable;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public GenerateMFAtoken200Response() {
  }

  public GenerateMFAtoken200Response mfaToken(String mfaToken) {
    
    this.mfaToken = mfaToken;
    return this;
  }

   /**
   * Token can function as a temporary MFA token. It can be used to authenticate for any app when valid.
   * @return mfaToken
  **/
  @javax.annotation.Nullable

  public String getMfaToken() {
    return mfaToken;
  }


  public void setMfaToken(String mfaToken) {
    this.mfaToken = mfaToken;
  }


  public GenerateMFAtoken200Response resuable(Boolean resuable) {
    
    this.resuable = resuable;
    return this;
  }

   /**
   * true indcates the token can be used multiple times, until it expires. false indicates the token is invalid after a single use or once it expires. Defaults to false.
   * @return resuable
  **/
  @javax.annotation.Nullable

  public Boolean getResuable() {
    return resuable;
  }


  public void setResuable(Boolean resuable) {
    this.resuable = resuable;
  }


  public GenerateMFAtoken200Response expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Defines the expiration time and date for the token. Format is UTC time.
   * @return expiresAt
  **/
  @javax.annotation.Nullable

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateMFAtoken200Response generateMFAtoken200Response = (GenerateMFAtoken200Response) o;
    return Objects.equals(this.mfaToken, generateMFAtoken200Response.mfaToken) &&
        Objects.equals(this.resuable, generateMFAtoken200Response.resuable) &&
        Objects.equals(this.expiresAt, generateMFAtoken200Response.expiresAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mfaToken, resuable, expiresAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateMFAtoken200Response {\n");
    sb.append("    mfaToken: ").append(toIndentedString(mfaToken)).append("\n");
    sb.append("    resuable: ").append(toIndentedString(resuable)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mfa_token");
    openapiFields.add("resuable");
    openapiFields.add("expires_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateMFAtoken200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GenerateMFAtoken200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateMFAtoken200Response is not found in the empty JSON string", GenerateMFAtoken200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenerateMFAtoken200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateMFAtoken200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("mfa_token") != null && !jsonObj.get("mfa_token").isJsonNull()) && !jsonObj.get("mfa_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfa_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfa_token").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateMFAtoken200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateMFAtoken200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateMFAtoken200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateMFAtoken200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateMFAtoken200Response>() {
           @Override
           public void write(JsonWriter out, GenerateMFAtoken200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateMFAtoken200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateMFAtoken200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateMFAtoken200Response
  * @throws IOException if the JSON string is invalid with respect to GenerateMFAtoken200Response
  */
  public static GenerateMFAtoken200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateMFAtoken200Response.class);
  }

 /**
  * Convert an instance of GenerateMFAtoken200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

