/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * The parameters section contains parameterized attributes that have defined at the connector level as well as custom attributes that have been defined specifically for this app. Regardless of how they are defined, all parameters have the following attributes. Each parameter is an object with the key for the object being set as the parameters short name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T12:13:23.145217-07:00[America/Los_Angeles]")
public class AppParameters {
  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS = "user_attribute_mappings";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS)
  private String userAttributeMappings;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MACROS = "user_attribute_macros";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MACROS)
  private String userAttributeMacros;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_INCLUDE_IN_SAML_ASSERTION = "include_in_saml_assertion";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_SAML_ASSERTION)
  private Boolean includeInSamlAssertion;

  public AppParameters() {
  }

  public AppParameters userAttributeMappings(String userAttributeMappings) {
    
    this.userAttributeMappings = userAttributeMappings;
    return this;
  }

   /**
   * A user attribute to map values from For custom attributes prefix the name of the attribute with &#x60;custom_attribute_&#x60;. e.g. To get the value for custom attribute &#x60;employee_id&#x60; use &#x60;custom_attribute_employee_id&#x60;.
   * @return userAttributeMappings
  **/
  @javax.annotation.Nullable

  public String getUserAttributeMappings() {
    return userAttributeMappings;
  }


  public void setUserAttributeMappings(String userAttributeMappings) {
    this.userAttributeMappings = userAttributeMappings;
  }


  public AppParameters userAttributeMacros(String userAttributeMacros) {
    
    this.userAttributeMacros = userAttributeMacros;
    return this;
  }

   /**
   * When &#x60;user_attribute_mappings&#x60; is set to &#x60;_macro_&#x60; this macro will be used to assign the parameter value.
   * @return userAttributeMacros
  **/
  @javax.annotation.Nullable

  public String getUserAttributeMacros() {
    return userAttributeMacros;
  }


  public void setUserAttributeMacros(String userAttributeMacros) {
    this.userAttributeMacros = userAttributeMacros;
  }


  public AppParameters label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * The can only be set when creating a new parameter. It can not be updated.
   * @return label
  **/
  @javax.annotation.Nullable

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public AppParameters includeInSamlAssertion(Boolean includeInSamlAssertion) {
    
    this.includeInSamlAssertion = includeInSamlAssertion;
    return this;
  }

   /**
   * When true, this parameter will be included in a SAML assertion payload.
   * @return includeInSamlAssertion
  **/
  @javax.annotation.Nullable

  public Boolean getIncludeInSamlAssertion() {
    return includeInSamlAssertion;
  }


  public void setIncludeInSamlAssertion(Boolean includeInSamlAssertion) {
    this.includeInSamlAssertion = includeInSamlAssertion;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppParameters instance itself
   */
  public AppParameters putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppParameters appParameters = (AppParameters) o;
    return Objects.equals(this.userAttributeMappings, appParameters.userAttributeMappings) &&
        Objects.equals(this.userAttributeMacros, appParameters.userAttributeMacros) &&
        Objects.equals(this.label, appParameters.label) &&
        Objects.equals(this.includeInSamlAssertion, appParameters.includeInSamlAssertion)&&
        Objects.equals(this.additionalProperties, appParameters.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userAttributeMappings, userAttributeMacros, label, includeInSamlAssertion, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppParameters {\n");
    sb.append("    userAttributeMappings: ").append(toIndentedString(userAttributeMappings)).append("\n");
    sb.append("    userAttributeMacros: ").append(toIndentedString(userAttributeMacros)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    includeInSamlAssertion: ").append(toIndentedString(includeInSamlAssertion)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user_attribute_mappings");
    openapiFields.add("user_attribute_macros");
    openapiFields.add("label");
    openapiFields.add("include_in_saml_assertion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppParameters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppParameters is not found in the empty JSON string", AppParameters.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("user_attribute_mappings") != null && !jsonObj.get("user_attribute_mappings").isJsonNull()) && !jsonObj.get("user_attribute_mappings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_mappings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_mappings").toString()));
      }
      if ((jsonObj.get("user_attribute_macros") != null && !jsonObj.get("user_attribute_macros").isJsonNull()) && !jsonObj.get("user_attribute_macros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_macros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_macros").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AppParameters>() {
           @Override
           public void write(JsonWriter out, AppParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppParameters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AppParameters instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppParameters
  * @throws IOException if the JSON string is invalid with respect to AppParameters
  */
  public static AppParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppParameters.class);
  }

 /**
  * Convert an instance of AppParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

