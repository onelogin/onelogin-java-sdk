/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * AuthClaim
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class AuthClaim {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS = "user_attribute_mappings";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS)
  private String userAttributeMappings;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MACROS = "user_attribute_macros";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MACROS)
  private String userAttributeMacros;

  public AuthClaim() {
  }

  public AuthClaim name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The attribute name for the claim when its returned in an Access Token
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AuthClaim userAttributeMappings(String userAttributeMappings) {
    
    this.userAttributeMappings = userAttributeMappings;
    return this;
  }

   /**
   * A user attribute to map values from For custom attributes prefix the name of the attribute with &#x60;custom_attribute_&#x60;. e.g. To get the value for custom attribute &#x60;employee_id&#x60; use &#x60;custom_attribute_employee_id&#x60;.
   * @return userAttributeMappings
  **/
  @javax.annotation.Nullable

  public String getUserAttributeMappings() {
    return userAttributeMappings;
  }


  public void setUserAttributeMappings(String userAttributeMappings) {
    this.userAttributeMappings = userAttributeMappings;
  }


  public AuthClaim userAttributeMacros(String userAttributeMacros) {
    
    this.userAttributeMacros = userAttributeMacros;
    return this;
  }

   /**
   * When &#x60;user_attribute_mappings&#x60; is set to &#x60;_macro_&#x60; this macro will be used to assign the parameter value.
   * @return userAttributeMacros
  **/
  @javax.annotation.Nullable

  public String getUserAttributeMacros() {
    return userAttributeMacros;
  }


  public void setUserAttributeMacros(String userAttributeMacros) {
    this.userAttributeMacros = userAttributeMacros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthClaim authClaim = (AuthClaim) o;
    return Objects.equals(this.name, authClaim.name) &&
        Objects.equals(this.userAttributeMappings, authClaim.userAttributeMappings) &&
        Objects.equals(this.userAttributeMacros, authClaim.userAttributeMacros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, userAttributeMappings, userAttributeMacros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthClaim {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userAttributeMappings: ").append(toIndentedString(userAttributeMappings)).append("\n");
    sb.append("    userAttributeMacros: ").append(toIndentedString(userAttributeMacros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("user_attribute_mappings");
    openapiFields.add("user_attribute_macros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthClaim
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthClaim.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthClaim is not found in the empty JSON string", AuthClaim.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AuthClaim.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthClaim` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthClaim.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("user_attribute_mappings") != null && !jsonObj.get("user_attribute_mappings").isJsonNull()) && !jsonObj.get("user_attribute_mappings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_mappings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_mappings").toString()));
      }
      if ((jsonObj.get("user_attribute_macros") != null && !jsonObj.get("user_attribute_macros").isJsonNull()) && !jsonObj.get("user_attribute_macros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_macros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_macros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthClaim.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthClaim' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthClaim> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthClaim.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthClaim>() {
           @Override
           public void write(JsonWriter out, AuthClaim value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthClaim read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthClaim given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthClaim
  * @throws IOException if the JSON string is invalid with respect to AuthClaim
  */
  public static AuthClaim fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthClaim.class);
  }

 /**
  * Convert an instance of AuthClaim to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

