/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onelogin.client.model.MessageTemplateTemplate;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * MessageTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class MessageTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  /**
   * Template type that describes the source (sms, voice, email) and purpose (registration, invite, etc)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EMAIL_FORGOT_PASSWORD("email_forgot_password"),
    
    EMAIL_CODE_REGISTRATION("email_code_registration"),
    
    EMAIL_CODE_LOGIN_VERIFICATION("email_code_login_verification"),
    
    EMAIL_CODE_APP_VERIFICATION("email_code_app_verification"),
    
    EMAIL_CODE_PW_RESET_VERIFICATION("email_code_pw_reset_verification"),
    
    EMAIL_MAGICLINK_REGISTRATION("email_magiclink_registration"),
    
    EMAIL_MAGICLINK_LOGIN_VERIFICATION("email_magiclink_login_verification"),
    
    EMAIL_MAGICLINK_APP_VERIFICATION("email_magiclink_app_verification"),
    
    EMAIL_MAGICLINK_PW_RESET_VERIFICATION("email_magiclink_pw_reset_verification"),
    
    SMS_REGISTRATION("sms_registration"),
    
    SMS_LOGIN_VERIFICATION("sms_login_verification"),
    
    SMS_APP_VERIFICATION("sms_app_verification"),
    
    SMS_PW_RESET_VERIFICATION("sms_pw_reset_verification");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private MessageTemplateTemplate template;

  public static final String SERIALIZED_NAME_TEMPLATE_CLASS = "template_class";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_CLASS)
  private String templateClass;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_BRAND_ID = "brand_id";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public MessageTemplate() {
  }

  
  public MessageTemplate(
     Integer id, 
     Integer accountId, 
     String templateClass, 
     String updatedAt, 
     Integer brandId
  ) {
    this();
    this.id = id;
    this.accountId = accountId;
    this.templateClass = templateClass;
    this.updatedAt = updatedAt;
    this.brandId = brandId;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public Integer getId() {
    return id;
  }




   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable

  public Integer getAccountId() {
    return accountId;
  }




  public MessageTemplate type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Template type that describes the source (sms, voice, email) and purpose (registration, invite, etc)
   * @return type
  **/
  @javax.annotation.Nonnull

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MessageTemplate locale(String locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * The 2 character language locale for the template. e.g. en &#x3D; English, es &#x3D; Spanish
   * @return locale
  **/
  @javax.annotation.Nonnull

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    this.locale = locale;
  }


  public MessageTemplate template(MessageTemplateTemplate template) {
    
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nonnull

  public MessageTemplateTemplate getTemplate() {
    return template;
  }


  public void setTemplate(MessageTemplateTemplate template) {
    this.template = template;
  }


   /**
   * Get templateClass
   * @return templateClass
  **/
  @javax.annotation.Nullable

  public String getTemplateClass() {
    return templateClass;
  }




   /**
   * Last time template was updated
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public String getUpdatedAt() {
    return updatedAt;
  }




   /**
   * brand id number
   * @return brandId
  **/
  @javax.annotation.Nullable

  public Integer getBrandId() {
    return brandId;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageTemplate messageTemplate = (MessageTemplate) o;
    return Objects.equals(this.id, messageTemplate.id) &&
        Objects.equals(this.accountId, messageTemplate.accountId) &&
        Objects.equals(this.type, messageTemplate.type) &&
        Objects.equals(this.locale, messageTemplate.locale) &&
        Objects.equals(this.template, messageTemplate.template) &&
        Objects.equals(this.templateClass, messageTemplate.templateClass) &&
        Objects.equals(this.updatedAt, messageTemplate.updatedAt) &&
        Objects.equals(this.brandId, messageTemplate.brandId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountId, type, locale, template, templateClass, updatedAt, brandId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templateClass: ").append(toIndentedString(templateClass)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("account_id");
    openapiFields.add("type");
    openapiFields.add("locale");
    openapiFields.add("template");
    openapiFields.add("template_class");
    openapiFields.add("updated_at");
    openapiFields.add("brand_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("template");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageTemplate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MessageTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageTemplate is not found in the empty JSON string", MessageTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MessageTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageTemplate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageTemplate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the required field `template`
      MessageTemplateTemplate.validateJsonObject(jsonObj.getAsJsonObject("template"));
      if ((jsonObj.get("template_class") != null && !jsonObj.get("template_class").isJsonNull()) && !jsonObj.get("template_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_class").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageTemplate>() {
           @Override
           public void write(JsonWriter out, MessageTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageTemplate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageTemplate
  * @throws IOException if the JSON string is invalid with respect to MessageTemplate
  */
  public static MessageTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageTemplate.class);
  }

 /**
  * Convert an instance of MessageTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

