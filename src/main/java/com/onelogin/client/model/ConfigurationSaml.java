/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * ConfigurationSaml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class ConfigurationSaml {
  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signature_algorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "certificate_id";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private Integer certificateId;

  public ConfigurationSaml() {
  }

  public ConfigurationSaml signatureAlgorithm(String signatureAlgorithm) {
    
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

   /**
   * One of the following:   - SHA-1   - SHA-256   - SHA-348   - SHA-512
   * @return signatureAlgorithm
  **/
  @javax.annotation.Nonnull

  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }


  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public ConfigurationSaml certificateId(Integer certificateId) {
    
    this.certificateId = certificateId;
    return this;
  }

   /**
   * When creating apps the default certificate will be used unless the &#x60;certificate_id&#x60; attribute is applied in the &#x60;configuration&#x60; object.
   * @return certificateId
  **/
  @javax.annotation.Nonnull

  public Integer getCertificateId() {
    return certificateId;
  }


  public void setCertificateId(Integer certificateId) {
    this.certificateId = certificateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationSaml configurationSaml = (ConfigurationSaml) o;
    return Objects.equals(this.signatureAlgorithm, configurationSaml.signatureAlgorithm) &&
        Objects.equals(this.certificateId, configurationSaml.certificateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signatureAlgorithm, certificateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationSaml {\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signature_algorithm");
    openapiFields.add("certificate_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signature_algorithm");
    openapiRequiredFields.add("certificate_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigurationSaml
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigurationSaml.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationSaml is not found in the empty JSON string", ConfigurationSaml.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationSaml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationSaml` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurationSaml.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("signature_algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature_algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature_algorithm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationSaml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationSaml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationSaml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationSaml.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationSaml>() {
           @Override
           public void write(JsonWriter out, ConfigurationSaml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationSaml read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigurationSaml given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigurationSaml
  * @throws IOException if the JSON string is invalid with respect to ConfigurationSaml
  */
  public static ConfigurationSaml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationSaml.class);
  }

 /**
  * Convert an instance of ConfigurationSaml to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

