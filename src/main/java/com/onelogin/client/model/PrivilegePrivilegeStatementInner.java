/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * PrivilegePrivilegeStatementInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T12:13:23.145217-07:00[America/Los_Angeles]")
public class PrivilegePrivilegeStatementInner {
  public static final String SERIALIZED_NAME_EFFECT = "Effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private String effect;

  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    APPS_CREATE("Apps:Create"),
    
    APPS_DELETE("Apps:Delete"),
    
    APPS_LIST("Apps:List"),
    
    APPS_GET("Apps:Get"),
    
    APPS_UPDATE("Apps:Update"),
    
    APPS_MANAGECONNECTORS("Apps:ManageConnectors"),
    
    APPS_MANAGEROLES("Apps:ManageRoles"),
    
    APPS_MANAGETABS("Apps:ManageTabs"),
    
    APPS_MANAGEUSERS("Apps:ManageUsers"),
    
    APPS_REAPPLYMAPPINGS("Apps:ReapplyMappings"),
    
    USERS_CREATE("Users:Create"),
    
    USERS_DELETE("Users:Delete"),
    
    USERS_LIST("Users:List"),
    
    USERS_GET("Users:Get"),
    
    USERS_UPDATE("Users:Update"),
    
    USERS_ASSUMEUSER("Users:AssumeUser"),
    
    USERS_MANAGEAPPS("Users:ManageApps"),
    
    USERS_UNLOCK("Users:Unlock"),
    
    USERS_GENERATETEMPMFATOKEN("Users:GenerateTempMfaToken"),
    
    USERS_RESETPASSWORD("Users:ResetPassword"),
    
    USERS_REAPPLYMAPPINGS("Users:ReapplyMappings"),
    
    USERS_MANAGELICENSE("Users:ManageLicense"),
    
    USERS_INVITE("Users:Invite"),
    
    USERS_MANAGEROLES("Users:ManageRoles"),
    
    ROLES_CREATE("Roles:Create"),
    
    ROLES_GET("Roles:Get"),
    
    ROLES_LIST("Roles:List"),
    
    ROLES_UPDATE("Roles:Update"),
    
    ROLES_DELETE("Roles:Delete"),
    
    ROLES_MANAGEUSERS("Roles:ManageUsers"),
    
    ROLES_MANAGEAPPS("Roles:ManageApps"),
    
    REPORTS_CREATE("Reports:Create"),
    
    REPORTS_GET("Reports:Get"),
    
    REPORTS_LIST("Reports:List"),
    
    REPORTS_UPDATE("Reports:Update"),
    
    REPORTS_DELETE("Reports:Delete"),
    
    REPORTS_CLONE("Reports:Clone"),
    
    EVENTS_GET("Events:Get"),
    
    EVENTS_LIST("Events:List"),
    
    GROUPS_CREATE("Groups:Create"),
    
    GROUPS_GET("Groups:Get"),
    
    GROUPS_LIST("Groups:List"),
    
    GROUPS_UPDATE("Groups:Update"),
    
    GROUPS_DELETE("Groups:Delete"),
    
    POLICIES_CREATE("Policies:Create"),
    
    POLICIES_GET("Policies:Get"),
    
    POLICIES_LIST("Policies:List"),
    
    POLICIES_UPDATE("Policies:Update"),
    
    POLICIES_DELETE("Policies:Delete"),
    
    POLICIES_SETDEFAULT("Policies:SetDefault");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private List<ActionEnum> action = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private List<String> scope = new ArrayList<>();

  public PrivilegePrivilegeStatementInner() {
  }

  public PrivilegePrivilegeStatementInner effect(String effect) {
    
    this.effect = effect;
    return this;
  }

   /**
   * Set to “Allow.” By default, all actions are denied, this Statement allows the listed actions to be executed.
   * @return effect
  **/
  @javax.annotation.Nonnull

  public String getEffect() {
    return effect;
  }


  public void setEffect(String effect) {
    this.effect = effect;
  }


  public PrivilegePrivilegeStatementInner action(List<ActionEnum> action) {
    
    this.action = action;
    return this;
  }

  public PrivilegePrivilegeStatementInner addActionItem(ActionEnum actionItem) {
    this.action.add(actionItem);
    return this;
  }

   /**
   * An array of strings that represent actions within OneLogin. Actions are prefixed with the class of object they are related to and followed by a specific action for the given class. e.g. users:List, where the class is users and the specific action is List. Don’t mix classes within an Action array. To create a privilege that includes multiple different classes, create multiple statements. A wildcard * that includes all actions is supported. Use wildcards to create a Super User privilege.
   * @return action
  **/
  @javax.annotation.Nonnull

  public List<ActionEnum> getAction() {
    return action;
  }


  public void setAction(List<ActionEnum> action) {
    this.action = action;
  }


  public PrivilegePrivilegeStatementInner scope(List<String> scope) {
    
    this.scope = scope;
    return this;
  }

  public PrivilegePrivilegeStatementInner addScopeItem(String scopeItem) {
    this.scope.add(scopeItem);
    return this;
  }

   /**
   * Target the privileged action against specific resources with the scope. The scope pattern is the class of object used by the Action, followed by an ID that represents a resource in OneLogin. e.g. apps/1234, where apps is the class and 1234 is the ID of an app. The wildcard * is supported and indicates that all resources of the class type declared, in the Action, are in scope. The Action and Scope classes must match. However, there is an exception, a scope of roles/{role_id} can be combined with Actions on the user or app class. The exception allows you to target groups of users or apps with specific actions.
   * @return scope
  **/
  @javax.annotation.Nonnull

  public List<String> getScope() {
    return scope;
  }


  public void setScope(List<String> scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivilegePrivilegeStatementInner privilegePrivilegeStatementInner = (PrivilegePrivilegeStatementInner) o;
    return Objects.equals(this.effect, privilegePrivilegeStatementInner.effect) &&
        Objects.equals(this.action, privilegePrivilegeStatementInner.action) &&
        Objects.equals(this.scope, privilegePrivilegeStatementInner.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effect, action, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivilegePrivilegeStatementInner {\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Effect");
    openapiFields.add("Action");
    openapiFields.add("Scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Effect");
    openapiRequiredFields.add("Action");
    openapiRequiredFields.add("Scope");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PrivilegePrivilegeStatementInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PrivilegePrivilegeStatementInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivilegePrivilegeStatementInner is not found in the empty JSON string", PrivilegePrivilegeStatementInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PrivilegePrivilegeStatementInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivilegePrivilegeStatementInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrivilegePrivilegeStatementInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("Effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Effect").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Action") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Action").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Action` to be an array in the JSON string but got `%s`", jsonObj.get("Action").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Scope` to be an array in the JSON string but got `%s`", jsonObj.get("Scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivilegePrivilegeStatementInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivilegePrivilegeStatementInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivilegePrivilegeStatementInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivilegePrivilegeStatementInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivilegePrivilegeStatementInner>() {
           @Override
           public void write(JsonWriter out, PrivilegePrivilegeStatementInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivilegePrivilegeStatementInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PrivilegePrivilegeStatementInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PrivilegePrivilegeStatementInner
  * @throws IOException if the JSON string is invalid with respect to PrivilegePrivilegeStatementInner
  */
  public static PrivilegePrivilegeStatementInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivilegePrivilegeStatementInner.class);
  }

 /**
  * Convert an instance of PrivilegePrivilegeStatementInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

