/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * CreateDeviceVerification201Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T13:09:58.336938-07:00[America/Los_Angeles]")
public class CreateDeviceVerification201Response {
  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private Integer deviceId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_REDIRECT_TO = "redirect_to";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TO)
  private String redirectTo;

  public static final String SERIALIZED_NAME_USER_DISPLAY_NAME = "user_display_name";
  @SerializedName(SERIALIZED_NAME_USER_DISPLAY_NAME)
  private String userDisplayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE_DISPLAY_NAME = "type_display_name";
  @SerializedName(SERIALIZED_NAME_TYPE_DISPLAY_NAME)
  private String typeDisplayName;

  public static final String SERIALIZED_NAME_AUTH_FACTOR_NAME = "auth_factor_name";
  @SerializedName(SERIALIZED_NAME_AUTH_FACTOR_NAME)
  private String authFactorName;

  public CreateDeviceVerification201Response() {
  }

  public CreateDeviceVerification201Response deviceId(Integer deviceId) {
    
    this.deviceId = deviceId;
    return this;
  }

   /**
   * Specifies the factor to be verified.
   * @return deviceId
  **/
  @javax.annotation.Nullable

  public Integer getDeviceId() {
    return deviceId;
  }


  public void setDeviceId(Integer deviceId) {
    this.deviceId = deviceId;
  }


  public CreateDeviceVerification201Response displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * A name for the users device
   * @return displayName
  **/
  @javax.annotation.Nullable

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateDeviceVerification201Response expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * A short lived token that is required to Verify the Factor. This token expires based on the expires_in parameter passed in.
   * @return expiresAt
  **/
  @javax.annotation.Nullable

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateDeviceVerification201Response redirectTo(String redirectTo) {
    
    this.redirectTo = redirectTo;
    return this;
  }

   /**
   * Only applies to Email MagicLink factor. Redirects MagicLink success page to specified URL after 2 seconds. Email must already be configured by the user.
   * @return redirectTo
  **/
  @javax.annotation.Nullable

  public String getRedirectTo() {
    return redirectTo;
  }


  public void setRedirectTo(String redirectTo) {
    this.redirectTo = redirectTo;
  }


  public CreateDeviceVerification201Response userDisplayName(String userDisplayName) {
    
    this.userDisplayName = userDisplayName;
    return this;
  }

   /**
   * Authentication factor display name assigned by users when they register the device.
   * @return userDisplayName
  **/
  @javax.annotation.Nullable

  public String getUserDisplayName() {
    return userDisplayName;
  }


  public void setUserDisplayName(String userDisplayName) {
    this.userDisplayName = userDisplayName;
  }


  public CreateDeviceVerification201Response id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Registration identifier.
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CreateDeviceVerification201Response typeDisplayName(String typeDisplayName) {
    
    this.typeDisplayName = typeDisplayName;
    return this;
  }

   /**
   * Authentication factor display name as it appears to users upon initial registration, as defined by admins at Settings &gt; Authentication Factors.
   * @return typeDisplayName
  **/
  @javax.annotation.Nullable

  public String getTypeDisplayName() {
    return typeDisplayName;
  }


  public void setTypeDisplayName(String typeDisplayName) {
    this.typeDisplayName = typeDisplayName;
  }


  public CreateDeviceVerification201Response authFactorName(String authFactorName) {
    
    this.authFactorName = authFactorName;
    return this;
  }

   /**
   * Authentication factor name, as it appears to administrators in OneLogin.
   * @return authFactorName
  **/
  @javax.annotation.Nullable

  public String getAuthFactorName() {
    return authFactorName;
  }


  public void setAuthFactorName(String authFactorName) {
    this.authFactorName = authFactorName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDeviceVerification201Response createDeviceVerification201Response = (CreateDeviceVerification201Response) o;
    return Objects.equals(this.deviceId, createDeviceVerification201Response.deviceId) &&
        Objects.equals(this.displayName, createDeviceVerification201Response.displayName) &&
        Objects.equals(this.expiresAt, createDeviceVerification201Response.expiresAt) &&
        Objects.equals(this.redirectTo, createDeviceVerification201Response.redirectTo) &&
        Objects.equals(this.userDisplayName, createDeviceVerification201Response.userDisplayName) &&
        Objects.equals(this.id, createDeviceVerification201Response.id) &&
        Objects.equals(this.typeDisplayName, createDeviceVerification201Response.typeDisplayName) &&
        Objects.equals(this.authFactorName, createDeviceVerification201Response.authFactorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, displayName, expiresAt, redirectTo, userDisplayName, id, typeDisplayName, authFactorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDeviceVerification201Response {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    redirectTo: ").append(toIndentedString(redirectTo)).append("\n");
    sb.append("    userDisplayName: ").append(toIndentedString(userDisplayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    typeDisplayName: ").append(toIndentedString(typeDisplayName)).append("\n");
    sb.append("    authFactorName: ").append(toIndentedString(authFactorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_id");
    openapiFields.add("display_name");
    openapiFields.add("expires_at");
    openapiFields.add("redirect_to");
    openapiFields.add("user_display_name");
    openapiFields.add("id");
    openapiFields.add("type_display_name");
    openapiFields.add("auth_factor_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateDeviceVerification201Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateDeviceVerification201Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDeviceVerification201Response is not found in the empty JSON string", CreateDeviceVerification201Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateDeviceVerification201Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDeviceVerification201Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("redirect_to") != null && !jsonObj.get("redirect_to").isJsonNull()) && !jsonObj.get("redirect_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_to").toString()));
      }
      if ((jsonObj.get("user_display_name") != null && !jsonObj.get("user_display_name").isJsonNull()) && !jsonObj.get("user_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_display_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type_display_name") != null && !jsonObj.get("type_display_name").isJsonNull()) && !jsonObj.get("type_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_display_name").toString()));
      }
      if ((jsonObj.get("auth_factor_name") != null && !jsonObj.get("auth_factor_name").isJsonNull()) && !jsonObj.get("auth_factor_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_factor_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_factor_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDeviceVerification201Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDeviceVerification201Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDeviceVerification201Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDeviceVerification201Response.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDeviceVerification201Response>() {
           @Override
           public void write(JsonWriter out, CreateDeviceVerification201Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDeviceVerification201Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateDeviceVerification201Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateDeviceVerification201Response
  * @throws IOException if the JSON string is invalid with respect to CreateDeviceVerification201Response
  */
  public static CreateDeviceVerification201Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDeviceVerification201Response.class);
  }

 /**
  * Convert an instance of CreateDeviceVerification201Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

