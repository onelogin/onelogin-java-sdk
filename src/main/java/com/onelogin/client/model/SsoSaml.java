/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onelogin.client.model.SsoSamlCertificate;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.client.JSON;

/**
 * SsoSaml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-16T12:13:23.145217-07:00[America/Los_Angeles]")
public class SsoSaml {
  public static final String SERIALIZED_NAME_METADATA_URL = "metadata_url";
  @SerializedName(SERIALIZED_NAME_METADATA_URL)
  private String metadataUrl;

  public static final String SERIALIZED_NAME_ACS_URL = "acs_url";
  @SerializedName(SERIALIZED_NAME_ACS_URL)
  private String acsUrl;

  public static final String SERIALIZED_NAME_SLS_URL = "sls_url";
  @SerializedName(SERIALIZED_NAME_SLS_URL)
  private String slsUrl;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private SsoSamlCertificate certificate;

  public SsoSaml() {
  }

  public SsoSaml metadataUrl(String metadataUrl) {
    
    this.metadataUrl = metadataUrl;
    return this;
  }

   /**
   * Get metadataUrl
   * @return metadataUrl
  **/
  @javax.annotation.Nullable

  public String getMetadataUrl() {
    return metadataUrl;
  }


  public void setMetadataUrl(String metadataUrl) {
    this.metadataUrl = metadataUrl;
  }


  public SsoSaml acsUrl(String acsUrl) {
    
    this.acsUrl = acsUrl;
    return this;
  }

   /**
   * Get acsUrl
   * @return acsUrl
  **/
  @javax.annotation.Nullable

  public String getAcsUrl() {
    return acsUrl;
  }


  public void setAcsUrl(String acsUrl) {
    this.acsUrl = acsUrl;
  }


  public SsoSaml slsUrl(String slsUrl) {
    
    this.slsUrl = slsUrl;
    return this;
  }

   /**
   * Get slsUrl
   * @return slsUrl
  **/
  @javax.annotation.Nullable

  public String getSlsUrl() {
    return slsUrl;
  }


  public void setSlsUrl(String slsUrl) {
    this.slsUrl = slsUrl;
  }


  public SsoSaml issuer(String issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @javax.annotation.Nullable

  public String getIssuer() {
    return issuer;
  }


  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public SsoSaml certificate(SsoSamlCertificate certificate) {
    
    this.certificate = certificate;
    return this;
  }

   /**
   * Get certificate
   * @return certificate
  **/
  @javax.annotation.Nullable

  public SsoSamlCertificate getCertificate() {
    return certificate;
  }


  public void setCertificate(SsoSamlCertificate certificate) {
    this.certificate = certificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SsoSaml ssoSaml = (SsoSaml) o;
    return Objects.equals(this.metadataUrl, ssoSaml.metadataUrl) &&
        Objects.equals(this.acsUrl, ssoSaml.acsUrl) &&
        Objects.equals(this.slsUrl, ssoSaml.slsUrl) &&
        Objects.equals(this.issuer, ssoSaml.issuer) &&
        Objects.equals(this.certificate, ssoSaml.certificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataUrl, acsUrl, slsUrl, issuer, certificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SsoSaml {\n");
    sb.append("    metadataUrl: ").append(toIndentedString(metadataUrl)).append("\n");
    sb.append("    acsUrl: ").append(toIndentedString(acsUrl)).append("\n");
    sb.append("    slsUrl: ").append(toIndentedString(slsUrl)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata_url");
    openapiFields.add("acs_url");
    openapiFields.add("sls_url");
    openapiFields.add("issuer");
    openapiFields.add("certificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SsoSaml
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SsoSaml.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SsoSaml is not found in the empty JSON string", SsoSaml.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SsoSaml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SsoSaml` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("metadata_url") != null && !jsonObj.get("metadata_url").isJsonNull()) && !jsonObj.get("metadata_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_url").toString()));
      }
      if ((jsonObj.get("acs_url") != null && !jsonObj.get("acs_url").isJsonNull()) && !jsonObj.get("acs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acs_url").toString()));
      }
      if ((jsonObj.get("sls_url") != null && !jsonObj.get("sls_url").isJsonNull()) && !jsonObj.get("sls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sls_url").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        SsoSamlCertificate.validateJsonObject(jsonObj.getAsJsonObject("certificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SsoSaml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SsoSaml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SsoSaml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SsoSaml.class));

       return (TypeAdapter<T>) new TypeAdapter<SsoSaml>() {
           @Override
           public void write(JsonWriter out, SsoSaml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SsoSaml read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SsoSaml given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SsoSaml
  * @throws IOException if the JSON string is invalid with respect to SsoSaml
  */
  public static SsoSaml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SsoSaml.class);
  }

 /**
  * Convert an instance of SsoSaml to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

