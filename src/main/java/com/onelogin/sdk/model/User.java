/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.sdk.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-27T15:18:08.440770200+13:00[Pacific/Auckland]")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_ROLE_IDS = "role_ids";
  @SerializedName(SERIALIZED_NAME_ROLE_IDS)
  private List<Integer> roleIds = null;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    StateEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(Integer value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_7(7),
    
    NUMBER_8(8);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_DIRECTORY_ID = "directory_id";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private Integer directoryId;

  public static final String SERIALIZED_NAME_TRUSTED_IDP_ID = "trusted_idp_id";
  @SerializedName(SERIALIZED_NAME_TRUSTED_IDP_ID)
  private Integer trustedIdpId;

  public static final String SERIALIZED_NAME_MANAGER_AD_ID = "manager_ad_id";
  @SerializedName(SERIALIZED_NAME_MANAGER_AD_ID)
  private String managerAdId;

  public static final String SERIALIZED_NAME_MANAGER_USER_ID = "manager_user_id";
  @SerializedName(SERIALIZED_NAME_MANAGER_USER_ID)
  private String managerUserId;

  public static final String SERIALIZED_NAME_SAMACCOUNTNAME = "samaccountname";
  @SerializedName(SERIALIZED_NAME_SAMACCOUNTNAME)
  private String samaccountname;

  public static final String SERIALIZED_NAME_MEMBER_OF = "member_of";
  @SerializedName(SERIALIZED_NAME_MEMBER_OF)
  private String memberOf;

  public static final String SERIALIZED_NAME_USERPRINCIPALNAME = "userprincipalname";
  @SerializedName(SERIALIZED_NAME_USERPRINCIPALNAME)
  private String userprincipalname;

  public static final String SERIALIZED_NAME_DISTINGUISHED_NAME = "distinguished_name";
  @SerializedName(SERIALIZED_NAME_DISTINGUISHED_NAME)
  private String distinguishedName;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ACTIVATED_AT = "activated_at";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_AT)
  private String activatedAt;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "last_login";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private String lastLogin;

  public static final String SERIALIZED_NAME_INVITATION_SENT_AT = "invitation_sent_at";
  @SerializedName(SERIALIZED_NAME_INVITATION_SENT_AT)
  private String invitationSentAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_PREFERRED_LOCALE_CODE = "preferred_locale_code";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LOCALE_CODE)
  private String preferredLocaleCode;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private Object customAttributes;

  public static final String SERIALIZED_NAME_INVALID_LOGIN_ATTEMPTS = "invalid_login_attempts";
  @SerializedName(SERIALIZED_NAME_INVALID_LOGIN_ATTEMPTS)
  private Integer invalidLoginAttempts;

  public static final String SERIALIZED_NAME_LOCKED_UNTIL = "locked_until";
  @SerializedName(SERIALIZED_NAME_LOCKED_UNTIL)
  private String lockedUntil;

  public static final String SERIALIZED_NAME_PASSWORD_CHANGED_AT = "password_changed_at";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CHANGED_AT)
  private String passwordChangedAt;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_CONFIRMATION = "password_confirmation";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CONFIRMATION)
  private String passwordConfirmation;

  public static final String SERIALIZED_NAME_PASSWORD_ALGORITHM = "password_algorithm";
  @SerializedName(SERIALIZED_NAME_PASSWORD_ALGORITHM)
  private String passwordAlgorithm;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private String salt;

  public User() {
  }

  public User id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public User username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * A username for the user.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A username for the user.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public User email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * A valid email for the user.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A valid email for the user.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public User firstname(String firstname) {
    
    this.firstname = firstname;
    return this;
  }

   /**
   * The user&#39;s first name.
   * @return firstname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's first name.")

  public String getFirstname() {
    return firstname;
  }


  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public User lastname(String lastname) {
    
    this.lastname = lastname;
    return this;
  }

   /**
   * The user&#39;s last name.
   * @return lastname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's last name.")

  public String getLastname() {
    return lastname;
  }


  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public User title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The user&#39;s job title.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's job title.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public User department(String department) {
    
    this.department = department;
    return this;
  }

   /**
   * The user&#39;s department.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's department.")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    this.department = department;
  }


  public User company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * The user&#39;s company.
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's company.")

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public User comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Free text related to the user.
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Free text related to the user.")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public User groupId(Integer groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * The ID of the Group in OneLogin that the user is assigned to.
   * @return groupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Group in OneLogin that the user is assigned to.")

  public Integer getGroupId() {
    return groupId;
  }


  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public User roleIds(List<Integer> roleIds) {
    
    this.roleIds = roleIds;
    return this;
  }

  public User addRoleIdsItem(Integer roleIdsItem) {
    if (this.roleIds == null) {
      this.roleIds = new ArrayList<>();
    }
    this.roleIds.add(roleIdsItem);
    return this;
  }

   /**
   * A list of OneLogin Role IDs of the user
   * @return roleIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of OneLogin Role IDs of the user")

  public List<Integer> getRoleIds() {
    return roleIds;
  }


  public void setRoleIds(List<Integer> roleIds) {
    this.roleIds = roleIds;
  }


  public User phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * The E.164 format phone number for a user.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The E.164 format phone number for a user.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public User state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public User status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public User directoryId(Integer directoryId) {
    
    this.directoryId = directoryId;
    return this;
  }

   /**
   * The ID of the OneLogin Directory of the user.
   * @return directoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the OneLogin Directory of the user.")

  public Integer getDirectoryId() {
    return directoryId;
  }


  public void setDirectoryId(Integer directoryId) {
    this.directoryId = directoryId;
  }


  public User trustedIdpId(Integer trustedIdpId) {
    
    this.trustedIdpId = trustedIdpId;
    return this;
  }

   /**
   * The ID of the OneLogin Trusted IDP of the user.
   * @return trustedIdpId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the OneLogin Trusted IDP of the user.")

  public Integer getTrustedIdpId() {
    return trustedIdpId;
  }


  public void setTrustedIdpId(Integer trustedIdpId) {
    this.trustedIdpId = trustedIdpId;
  }


  public User managerAdId(String managerAdId) {
    
    this.managerAdId = managerAdId;
    return this;
  }

   /**
   * The ID of the user&#39;s manager in Active Directory.
   * @return managerAdId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the user's manager in Active Directory.")

  public String getManagerAdId() {
    return managerAdId;
  }


  public void setManagerAdId(String managerAdId) {
    this.managerAdId = managerAdId;
  }


  public User managerUserId(String managerUserId) {
    
    this.managerUserId = managerUserId;
    return this;
  }

   /**
   * The OneLogin User ID for the user&#39;s manager.
   * @return managerUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The OneLogin User ID for the user's manager.")

  public String getManagerUserId() {
    return managerUserId;
  }


  public void setManagerUserId(String managerUserId) {
    this.managerUserId = managerUserId;
  }


  public User samaccountname(String samaccountname) {
    
    this.samaccountname = samaccountname;
    return this;
  }

   /**
   * The user&#39;s Active Directory username.
   * @return samaccountname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's Active Directory username.")

  public String getSamaccountname() {
    return samaccountname;
  }


  public void setSamaccountname(String samaccountname) {
    this.samaccountname = samaccountname;
  }


  public User memberOf(String memberOf) {
    
    this.memberOf = memberOf;
    return this;
  }

   /**
   * The user&#39;s directory membership.
   * @return memberOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user's directory membership.")

  public String getMemberOf() {
    return memberOf;
  }


  public void setMemberOf(String memberOf) {
    this.memberOf = memberOf;
  }


  public User userprincipalname(String userprincipalname) {
    
    this.userprincipalname = userprincipalname;
    return this;
  }

   /**
   * The principle name of the user.
   * @return userprincipalname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The principle name of the user.")

  public String getUserprincipalname() {
    return userprincipalname;
  }


  public void setUserprincipalname(String userprincipalname) {
    this.userprincipalname = userprincipalname;
  }


  public User distinguishedName(String distinguishedName) {
    
    this.distinguishedName = distinguishedName;
    return this;
  }

   /**
   * The distinguished name of the user.
   * @return distinguishedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The distinguished name of the user.")

  public String getDistinguishedName() {
    return distinguishedName;
  }


  public void setDistinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
  }


  public User externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * The ID of the user in an external directory.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the user in an external directory.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public User activatedAt(String activatedAt) {
    
    this.activatedAt = activatedAt;
    return this;
  }

   /**
   * Get activatedAt
   * @return activatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActivatedAt() {
    return activatedAt;
  }


  public void setActivatedAt(String activatedAt) {
    this.activatedAt = activatedAt;
  }


  public User lastLogin(String lastLogin) {
    
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Get lastLogin
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastLogin() {
    return lastLogin;
  }


  public void setLastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
  }


  public User invitationSentAt(String invitationSentAt) {
    
    this.invitationSentAt = invitationSentAt;
    return this;
  }

   /**
   * Get invitationSentAt
   * @return invitationSentAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvitationSentAt() {
    return invitationSentAt;
  }


  public void setInvitationSentAt(String invitationSentAt) {
    this.invitationSentAt = invitationSentAt;
  }


  public User updatedAt(String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public User preferredLocaleCode(String preferredLocaleCode) {
    
    this.preferredLocaleCode = preferredLocaleCode;
    return this;
  }

   /**
   * Get preferredLocaleCode
   * @return preferredLocaleCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPreferredLocaleCode() {
    return preferredLocaleCode;
  }


  public void setPreferredLocaleCode(String preferredLocaleCode) {
    this.preferredLocaleCode = preferredLocaleCode;
  }


  public User createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public User customAttributes(Object customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(Object customAttributes) {
    this.customAttributes = customAttributes;
  }


  public User invalidLoginAttempts(Integer invalidLoginAttempts) {
    
    this.invalidLoginAttempts = invalidLoginAttempts;
    return this;
  }

   /**
   * Get invalidLoginAttempts
   * @return invalidLoginAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInvalidLoginAttempts() {
    return invalidLoginAttempts;
  }


  public void setInvalidLoginAttempts(Integer invalidLoginAttempts) {
    this.invalidLoginAttempts = invalidLoginAttempts;
  }


  public User lockedUntil(String lockedUntil) {
    
    this.lockedUntil = lockedUntil;
    return this;
  }

   /**
   * Get lockedUntil
   * @return lockedUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLockedUntil() {
    return lockedUntil;
  }


  public void setLockedUntil(String lockedUntil) {
    this.lockedUntil = lockedUntil;
  }


  public User passwordChangedAt(String passwordChangedAt) {
    
    this.passwordChangedAt = passwordChangedAt;
    return this;
  }

   /**
   * Get passwordChangedAt
   * @return passwordChangedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPasswordChangedAt() {
    return passwordChangedAt;
  }


  public void setPasswordChangedAt(String passwordChangedAt) {
    this.passwordChangedAt = passwordChangedAt;
  }


  public User password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * The password to set for a user.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password to set for a user.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public User passwordConfirmation(String passwordConfirmation) {
    
    this.passwordConfirmation = passwordConfirmation;
    return this;
  }

   /**
   * Required if the password is being set.
   * @return passwordConfirmation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if the password is being set.")

  public String getPasswordConfirmation() {
    return passwordConfirmation;
  }


  public void setPasswordConfirmation(String passwordConfirmation) {
    this.passwordConfirmation = passwordConfirmation;
  }


  public User passwordAlgorithm(String passwordAlgorithm) {
    
    this.passwordAlgorithm = passwordAlgorithm;
    return this;
  }

   /**
   * Use this when importing a password that&#39;s already hashed. Prepend the salt value to the cleartext password value before SHA-256-encoding it
   * @return passwordAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use this when importing a password that's already hashed. Prepend the salt value to the cleartext password value before SHA-256-encoding it")

  public String getPasswordAlgorithm() {
    return passwordAlgorithm;
  }


  public void setPasswordAlgorithm(String passwordAlgorithm) {
    this.passwordAlgorithm = passwordAlgorithm;
  }


  public User salt(String salt) {
    
    this.salt = salt;
    return this;
  }

   /**
   * The salt value used with the password_algorithm.
   * @return salt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The salt value used with the password_algorithm.")

  public String getSalt() {
    return salt;
  }


  public void setSalt(String salt) {
    this.salt = salt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.firstname, user.firstname) &&
        Objects.equals(this.lastname, user.lastname) &&
        Objects.equals(this.title, user.title) &&
        Objects.equals(this.department, user.department) &&
        Objects.equals(this.company, user.company) &&
        Objects.equals(this.comment, user.comment) &&
        Objects.equals(this.groupId, user.groupId) &&
        Objects.equals(this.roleIds, user.roleIds) &&
        Objects.equals(this.phone, user.phone) &&
        Objects.equals(this.state, user.state) &&
        Objects.equals(this.status, user.status) &&
        Objects.equals(this.directoryId, user.directoryId) &&
        Objects.equals(this.trustedIdpId, user.trustedIdpId) &&
        Objects.equals(this.managerAdId, user.managerAdId) &&
        Objects.equals(this.managerUserId, user.managerUserId) &&
        Objects.equals(this.samaccountname, user.samaccountname) &&
        Objects.equals(this.memberOf, user.memberOf) &&
        Objects.equals(this.userprincipalname, user.userprincipalname) &&
        Objects.equals(this.distinguishedName, user.distinguishedName) &&
        Objects.equals(this.externalId, user.externalId) &&
        Objects.equals(this.activatedAt, user.activatedAt) &&
        Objects.equals(this.lastLogin, user.lastLogin) &&
        Objects.equals(this.invitationSentAt, user.invitationSentAt) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.preferredLocaleCode, user.preferredLocaleCode) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.customAttributes, user.customAttributes) &&
        Objects.equals(this.invalidLoginAttempts, user.invalidLoginAttempts) &&
        Objects.equals(this.lockedUntil, user.lockedUntil) &&
        Objects.equals(this.passwordChangedAt, user.passwordChangedAt) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.passwordConfirmation, user.passwordConfirmation) &&
        Objects.equals(this.passwordAlgorithm, user.passwordAlgorithm) &&
        Objects.equals(this.salt, user.salt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, email, firstname, lastname, title, department, company, comment, groupId, roleIds, phone, state, status, directoryId, trustedIdpId, managerAdId, managerUserId, samaccountname, memberOf, userprincipalname, distinguishedName, externalId, activatedAt, lastLogin, invitationSentAt, updatedAt, preferredLocaleCode, createdAt, customAttributes, invalidLoginAttempts, lockedUntil, passwordChangedAt, password, passwordConfirmation, passwordAlgorithm, salt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    roleIds: ").append(toIndentedString(roleIds)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    trustedIdpId: ").append(toIndentedString(trustedIdpId)).append("\n");
    sb.append("    managerAdId: ").append(toIndentedString(managerAdId)).append("\n");
    sb.append("    managerUserId: ").append(toIndentedString(managerUserId)).append("\n");
    sb.append("    samaccountname: ").append(toIndentedString(samaccountname)).append("\n");
    sb.append("    memberOf: ").append(toIndentedString(memberOf)).append("\n");
    sb.append("    userprincipalname: ").append(toIndentedString(userprincipalname)).append("\n");
    sb.append("    distinguishedName: ").append(toIndentedString(distinguishedName)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    activatedAt: ").append(toIndentedString(activatedAt)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    invitationSentAt: ").append(toIndentedString(invitationSentAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    preferredLocaleCode: ").append(toIndentedString(preferredLocaleCode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    invalidLoginAttempts: ").append(toIndentedString(invalidLoginAttempts)).append("\n");
    sb.append("    lockedUntil: ").append(toIndentedString(lockedUntil)).append("\n");
    sb.append("    passwordChangedAt: ").append(toIndentedString(passwordChangedAt)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordConfirmation: ").append(toIndentedString(passwordConfirmation)).append("\n");
    sb.append("    passwordAlgorithm: ").append(toIndentedString(passwordAlgorithm)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("email");
    openapiFields.add("firstname");
    openapiFields.add("lastname");
    openapiFields.add("title");
    openapiFields.add("department");
    openapiFields.add("company");
    openapiFields.add("comment");
    openapiFields.add("group_id");
    openapiFields.add("role_ids");
    openapiFields.add("phone");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("directory_id");
    openapiFields.add("trusted_idp_id");
    openapiFields.add("manager_ad_id");
    openapiFields.add("manager_user_id");
    openapiFields.add("samaccountname");
    openapiFields.add("member_of");
    openapiFields.add("userprincipalname");
    openapiFields.add("distinguished_name");
    openapiFields.add("external_id");
    openapiFields.add("activated_at");
    openapiFields.add("last_login");
    openapiFields.add("invitation_sent_at");
    openapiFields.add("updated_at");
    openapiFields.add("preferred_locale_code");
    openapiFields.add("created_at");
    openapiFields.add("custom_attributes");
    openapiFields.add("invalid_login_attempts");
    openapiFields.add("locked_until");
    openapiFields.add("password_changed_at");
    openapiFields.add("password");
    openapiFields.add("password_confirmation");
    openapiFields.add("password_algorithm");
    openapiFields.add("salt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (User.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("role_ids") != null && !jsonObj.get("role_ids").isJsonNull()) && !jsonObj.get("role_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_ids` to be an array in the JSON string but got `%s`", jsonObj.get("role_ids").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("manager_ad_id") != null && !jsonObj.get("manager_ad_id").isJsonNull()) && !jsonObj.get("manager_ad_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager_ad_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager_ad_id").toString()));
      }
      if ((jsonObj.get("manager_user_id") != null && !jsonObj.get("manager_user_id").isJsonNull()) && !jsonObj.get("manager_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager_user_id").toString()));
      }
      if ((jsonObj.get("samaccountname") != null && !jsonObj.get("samaccountname").isJsonNull()) && !jsonObj.get("samaccountname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samaccountname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samaccountname").toString()));
      }
      if ((jsonObj.get("member_of") != null && !jsonObj.get("member_of").isJsonNull()) && !jsonObj.get("member_of").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_of` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member_of").toString()));
      }
      if ((jsonObj.get("userprincipalname") != null && !jsonObj.get("userprincipalname").isJsonNull()) && !jsonObj.get("userprincipalname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userprincipalname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userprincipalname").toString()));
      }
      if ((jsonObj.get("distinguished_name") != null && !jsonObj.get("distinguished_name").isJsonNull()) && !jsonObj.get("distinguished_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distinguished_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distinguished_name").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("activated_at") != null && !jsonObj.get("activated_at").isJsonNull()) && !jsonObj.get("activated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activated_at").toString()));
      }
      if ((jsonObj.get("last_login") != null && !jsonObj.get("last_login").isJsonNull()) && !jsonObj.get("last_login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_login").toString()));
      }
      if ((jsonObj.get("invitation_sent_at") != null && !jsonObj.get("invitation_sent_at").isJsonNull()) && !jsonObj.get("invitation_sent_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitation_sent_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitation_sent_at").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("preferred_locale_code") != null && !jsonObj.get("preferred_locale_code").isJsonNull()) && !jsonObj.get("preferred_locale_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_locale_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_locale_code").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("locked_until") != null && !jsonObj.get("locked_until").isJsonNull()) && !jsonObj.get("locked_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked_until").toString()));
      }
      if ((jsonObj.get("password_changed_at") != null && !jsonObj.get("password_changed_at").isJsonNull()) && !jsonObj.get("password_changed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password_changed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password_changed_at").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("password_confirmation") != null && !jsonObj.get("password_confirmation").isJsonNull()) && !jsonObj.get("password_confirmation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password_confirmation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password_confirmation").toString()));
      }
      if ((jsonObj.get("password_algorithm") != null && !jsonObj.get("password_algorithm").isJsonNull()) && !jsonObj.get("password_algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password_algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password_algorithm").toString()));
      }
      if ((jsonObj.get("salt") != null && !jsonObj.get("salt").isJsonNull()) && !jsonObj.get("salt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

