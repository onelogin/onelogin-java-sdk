/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.onelogin.client.ApiCallback;
import com.onelogin.client.ApiClient;
import com.onelogin.client.ApiException;
import com.onelogin.client.ApiResponse;
import com.onelogin.client.Configuration;
import com.onelogin.client.Pair;
import com.onelogin.client.ProgressRequestBody;
import com.onelogin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.CreateDeviceVerification201Response;
import com.onelogin.client.model.CreateDeviceVerificationRequest;
import com.onelogin.client.model.CreateFactorRegistration201Response;
import com.onelogin.client.model.CreateFactorRegistrationRequest;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.GenerateOTP201Response;
import com.onelogin.client.model.GenerateOTPRequest;
import com.onelogin.client.model.GetAuthFactors200Response;
import com.onelogin.client.model.GetAuthenticationDevices200ResponseInner;
import com.onelogin.client.model.GetUserVerification200Response;
import com.onelogin.client.model.VerifyUserRegistration200Response;
import com.onelogin.client.model.VerifyUserRegistrationRequest;
import com.onelogin.client.model.VerifyUserVerificationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MultiFactorAuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MultiFactorAuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MultiFactorAuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDeviceVerification
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createDeviceVerificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceVerificationCall(Integer userId, String contentType, CreateDeviceVerificationRequest createDeviceVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDeviceVerificationRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDeviceVerificationValidateBeforeCall(Integer userId, String contentType, CreateDeviceVerificationRequest createDeviceVerificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createDeviceVerification(Async)");
        }

        return createDeviceVerificationCall(userId, contentType, createDeviceVerificationRequest, _callback);

    }

    /**
     * Create Device Verification
     * Create a new verification process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createDeviceVerificationRequest  (optional)
     * @return CreateDeviceVerification201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateDeviceVerification201Response createDeviceVerification(Integer userId, String contentType, CreateDeviceVerificationRequest createDeviceVerificationRequest) throws ApiException {
        ApiResponse<CreateDeviceVerification201Response> localVarResp = createDeviceVerificationWithHttpInfo(userId, contentType, createDeviceVerificationRequest);
        return localVarResp.getData();
    }

    /**
     * Create Device Verification
     * Create a new verification process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createDeviceVerificationRequest  (optional)
     * @return ApiResponse&lt;CreateDeviceVerification201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDeviceVerification201Response> createDeviceVerificationWithHttpInfo(Integer userId, String contentType, CreateDeviceVerificationRequest createDeviceVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = createDeviceVerificationValidateBeforeCall(userId, contentType, createDeviceVerificationRequest, null);
        Type localVarReturnType = new TypeToken<CreateDeviceVerification201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Device Verification (asynchronously)
     * Create a new verification process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createDeviceVerificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDeviceVerificationAsync(Integer userId, String contentType, CreateDeviceVerificationRequest createDeviceVerificationRequest, final ApiCallback<CreateDeviceVerification201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDeviceVerificationValidateBeforeCall(userId, contentType, createDeviceVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateDeviceVerification201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFactorRegistration
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createFactorRegistrationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFactorRegistrationCall(Integer userId, String contentType, CreateFactorRegistrationRequest createFactorRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFactorRegistrationRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFactorRegistrationValidateBeforeCall(Integer userId, String contentType, CreateFactorRegistrationRequest createFactorRegistrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createFactorRegistration(Async)");
        }

        return createFactorRegistrationCall(userId, contentType, createFactorRegistrationRequest, _callback);

    }

    /**
     * Create Factor Registration
     * Create a new registration process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createFactorRegistrationRequest  (optional)
     * @return CreateFactorRegistration201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public CreateFactorRegistration201Response createFactorRegistration(Integer userId, String contentType, CreateFactorRegistrationRequest createFactorRegistrationRequest) throws ApiException {
        ApiResponse<CreateFactorRegistration201Response> localVarResp = createFactorRegistrationWithHttpInfo(userId, contentType, createFactorRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Create Factor Registration
     * Create a new registration process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createFactorRegistrationRequest  (optional)
     * @return ApiResponse&lt;CreateFactorRegistration201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFactorRegistration201Response> createFactorRegistrationWithHttpInfo(Integer userId, String contentType, CreateFactorRegistrationRequest createFactorRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = createFactorRegistrationValidateBeforeCall(userId, contentType, createFactorRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<CreateFactorRegistration201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Factor Registration (asynchronously)
     * Create a new registration process
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param createFactorRegistrationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFactorRegistrationAsync(Integer userId, String contentType, CreateFactorRegistrationRequest createFactorRegistrationRequest, final ApiCallback<CreateFactorRegistration201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFactorRegistrationValidateBeforeCall(userId, contentType, createFactorRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFactorRegistration201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnrolledFactor
     * @param userId Set to the id of the user that you want to return. (required)
     * @param deviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnrolledFactorCall(Integer userId, String deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices/{device_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "device_id" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnrolledFactorValidateBeforeCall(Integer userId, String deviceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteEnrolledFactor(Async)");
        }

        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteEnrolledFactor(Async)");
        }

        return deleteEnrolledFactorCall(userId, deviceId, _callback);

    }

    /**
     * Delete Enrolled Factor
     * Delete a user\\&#39;s authentication device
     * @param userId Set to the id of the user that you want to return. (required)
     * @param deviceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEnrolledFactor(Integer userId, String deviceId) throws ApiException {
        deleteEnrolledFactorWithHttpInfo(userId, deviceId);
    }

    /**
     * Delete Enrolled Factor
     * Delete a user\\&#39;s authentication device
     * @param userId Set to the id of the user that you want to return. (required)
     * @param deviceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEnrolledFactorWithHttpInfo(Integer userId, String deviceId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnrolledFactorValidateBeforeCall(userId, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Enrolled Factor (asynchronously)
     * Delete a user\\&#39;s authentication device
     * @param userId Set to the id of the user that you want to return. (required)
     * @param deviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnrolledFactorAsync(Integer userId, String deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnrolledFactorValidateBeforeCall(userId, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateOTP
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param generateOTPRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateOTPCall(Integer userId, String contentType, GenerateOTPRequest generateOTPRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateOTPRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/mfa_token"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateOTPValidateBeforeCall(Integer userId, String contentType, GenerateOTPRequest generateOTPRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling generateOTP(Async)");
        }

        return generateOTPCall(userId, contentType, generateOTPRequest, _callback);

    }

    /**
     * Generate MFA token
     * Create new MFA token on the user&#39;s account
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param generateOTPRequest  (optional)
     * @return GenerateOTP201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public GenerateOTP201Response generateOTP(Integer userId, String contentType, GenerateOTPRequest generateOTPRequest) throws ApiException {
        ApiResponse<GenerateOTP201Response> localVarResp = generateOTPWithHttpInfo(userId, contentType, generateOTPRequest);
        return localVarResp.getData();
    }

    /**
     * Generate MFA token
     * Create new MFA token on the user&#39;s account
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param generateOTPRequest  (optional)
     * @return ApiResponse&lt;GenerateOTP201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateOTP201Response> generateOTPWithHttpInfo(Integer userId, String contentType, GenerateOTPRequest generateOTPRequest) throws ApiException {
        okhttp3.Call localVarCall = generateOTPValidateBeforeCall(userId, contentType, generateOTPRequest, null);
        Type localVarReturnType = new TypeToken<GenerateOTP201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate MFA token (asynchronously)
     * Create new MFA token on the user&#39;s account
     * @param userId Set to the id of the user that you want to return. (required)
     * @param contentType  (optional, default to application/json)
     * @param generateOTPRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateOTPAsync(Integer userId, String contentType, GenerateOTPRequest generateOTPRequest, final ApiCallback<GenerateOTP201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateOTPValidateBeforeCall(userId, contentType, generateOTPRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateOTP201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthFactors
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthFactorsCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/factors"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthFactorsValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAuthFactors(Async)");
        }

        return getAuthFactorsCall(userId, _callback);

    }

    /**
     * Get User Factors
     * Get a user\\&#39;s available authentication factors
     * @param userId Set to the id of the user that you want to return. (required)
     * @return GetAuthFactors200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthFactors200Response getAuthFactors(Integer userId) throws ApiException {
        ApiResponse<GetAuthFactors200Response> localVarResp = getAuthFactorsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User Factors
     * Get a user\\&#39;s available authentication factors
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;GetAuthFactors200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthFactors200Response> getAuthFactorsWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getAuthFactorsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<GetAuthFactors200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Factors (asynchronously)
     * Get a user\\&#39;s available authentication factors
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthFactorsAsync(Integer userId, final ApiCallback<GetAuthFactors200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthFactorsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<GetAuthFactors200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthenticationDevices
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticationDevicesCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticationDevicesValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAuthenticationDevices(Async)");
        }

        return getAuthenticationDevicesCall(userId, _callback);

    }

    /**
     * Get User Devices
     * Get a user authentication devices
     * @param userId Set to the id of the user that you want to return. (required)
     * @return List&lt;GetAuthenticationDevices200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<GetAuthenticationDevices200ResponseInner> getAuthenticationDevices(Integer userId) throws ApiException {
        ApiResponse<List<GetAuthenticationDevices200ResponseInner>> localVarResp = getAuthenticationDevicesWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User Devices
     * Get a user authentication devices
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;List&lt;GetAuthenticationDevices200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetAuthenticationDevices200ResponseInner>> getAuthenticationDevicesWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getAuthenticationDevicesValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<GetAuthenticationDevices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Devices (asynchronously)
     * Get a user authentication devices
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticationDevicesAsync(Integer userId, final ApiCallback<List<GetAuthenticationDevices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticationDevicesValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<GetAuthenticationDevices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRegistration
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRegistrationCall(Integer userId, String registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRegistrationValidateBeforeCall(Integer userId, String registrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserRegistration(Async)");
        }

        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling getUserRegistration(Async)");
        }

        return getUserRegistrationCall(userId, registrationId, _callback);

    }

    /**
     * Get User Registration
     * Get registration state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Object getUserRegistration(Integer userId, String registrationId) throws ApiException {
        ApiResponse<Object> localVarResp = getUserRegistrationWithHttpInfo(userId, registrationId);
        return localVarResp.getData();
    }

    /**
     * Get User Registration
     * Get registration state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getUserRegistrationWithHttpInfo(Integer userId, String registrationId) throws ApiException {
        okhttp3.Call localVarCall = getUserRegistrationValidateBeforeCall(userId, registrationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Registration (asynchronously)
     * Get registration state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRegistrationAsync(Integer userId, String registrationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRegistrationValidateBeforeCall(userId, registrationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserVerification
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVerificationCall(Integer userId, String verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "verification_id" + "}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserVerificationValidateBeforeCall(Integer userId, String verificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserVerification(Async)");
        }

        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling getUserVerification(Async)");
        }

        return getUserVerificationCall(userId, verificationId, _callback);

    }

    /**
     * Get User Verification
     * Get verification state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @return GetUserVerification200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetUserVerification200Response getUserVerification(Integer userId, String verificationId) throws ApiException {
        ApiResponse<GetUserVerification200Response> localVarResp = getUserVerificationWithHttpInfo(userId, verificationId);
        return localVarResp.getData();
    }

    /**
     * Get User Verification
     * Get verification state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @return ApiResponse&lt;GetUserVerification200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserVerification200Response> getUserVerificationWithHttpInfo(Integer userId, String verificationId) throws ApiException {
        okhttp3.Call localVarCall = getUserVerificationValidateBeforeCall(userId, verificationId, null);
        Type localVarReturnType = new TypeToken<GetUserVerification200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Verification (asynchronously)
     * Get verification state by id
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVerificationAsync(Integer userId, String verificationId, final ApiCallback<GetUserVerification200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserVerificationValidateBeforeCall(userId, verificationId, _callback);
        Type localVarReturnType = new TypeToken<GetUserVerification200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyUserRegistration
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserRegistrationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserRegistrationCall(Integer userId, String registrationId, String contentType, VerifyUserRegistrationRequest verifyUserRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyUserRegistrationRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "registration_id" + "}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserRegistrationValidateBeforeCall(Integer userId, String registrationId, String contentType, VerifyUserRegistrationRequest verifyUserRegistrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyUserRegistration(Async)");
        }

        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling verifyUserRegistration(Async)");
        }

        return verifyUserRegistrationCall(userId, registrationId, contentType, verifyUserRegistrationRequest, _callback);

    }

    /**
     * Verify User Registration
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserRegistrationRequest  (optional)
     * @return VerifyUserRegistration200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public VerifyUserRegistration200Response verifyUserRegistration(Integer userId, String registrationId, String contentType, VerifyUserRegistrationRequest verifyUserRegistrationRequest) throws ApiException {
        ApiResponse<VerifyUserRegistration200Response> localVarResp = verifyUserRegistrationWithHttpInfo(userId, registrationId, contentType, verifyUserRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Verify User Registration
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserRegistrationRequest  (optional)
     * @return ApiResponse&lt;VerifyUserRegistration200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyUserRegistration200Response> verifyUserRegistrationWithHttpInfo(Integer userId, String registrationId, String contentType, VerifyUserRegistrationRequest verifyUserRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyUserRegistrationValidateBeforeCall(userId, registrationId, contentType, verifyUserRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<VerifyUserRegistration200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify User Registration (asynchronously)
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param registrationId The id of a registration (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserRegistrationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Accept-Language -  <br>  * Cache-Control -  <br>  * Content-Length -  <br>  * Content-Type -  <br>  * X-Content-Type-Options -  <br>  * X-Request-Id -  <br>  * Date -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserRegistrationAsync(Integer userId, String registrationId, String contentType, VerifyUserRegistrationRequest verifyUserRegistrationRequest, final ApiCallback<VerifyUserRegistration200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserRegistrationValidateBeforeCall(userId, registrationId, contentType, verifyUserRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyUserRegistration200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyUserVerification
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserVerificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserVerificationCall(Integer userId, String verificationId, String contentType, VerifyUserVerificationRequest verifyUserVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyUserVerificationRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "verification_id" + "}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserVerificationValidateBeforeCall(Integer userId, String verificationId, String contentType, VerifyUserVerificationRequest verifyUserVerificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyUserVerification(Async)");
        }

        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyUserVerification(Async)");
        }

        return verifyUserVerificationCall(userId, verificationId, contentType, verifyUserVerificationRequest, _callback);

    }

    /**
     * Verify User Verification
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserVerificationRequest  (optional)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Error verifyUserVerification(Integer userId, String verificationId, String contentType, VerifyUserVerificationRequest verifyUserVerificationRequest) throws ApiException {
        ApiResponse<Error> localVarResp = verifyUserVerificationWithHttpInfo(userId, verificationId, contentType, verifyUserVerificationRequest);
        return localVarResp.getData();
    }

    /**
     * Verify User Verification
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserVerificationRequest  (optional)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Error> verifyUserVerificationWithHttpInfo(Integer userId, String verificationId, String contentType, VerifyUserVerificationRequest verifyUserVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyUserVerificationValidateBeforeCall(userId, verificationId, contentType, verifyUserVerificationRequest, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify User Verification (asynchronously)
     * Submit an otp for verification.
     * @param userId Set to the id of the user that you want to return. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param contentType  (optional, default to application/json)
     * @param verifyUserVerificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Content-Type -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserVerificationAsync(Integer userId, String verificationId, String contentType, VerifyUserVerificationRequest verifyUserVerificationRequest, final ApiCallback<Error> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserVerificationValidateBeforeCall(userId, verificationId, contentType, verifyUserVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
