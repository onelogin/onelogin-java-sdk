/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.GetUserApps200ResponseInner;
import com.onelogin.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersV2Api
 */
@Disabled
public class UsersV2ApiTest {

    private final UsersV2Api api = new UsersV2Api();

    /**
     * Create User
     *
     * Create User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUser2Test() throws ApiException {
        String mappings = null;
        Boolean validatePolicy = null;
        User user = null;
        User response = api.createUser2(mappings, validatePolicy, user);
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * Delete User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUser2Test() throws ApiException {
        Integer userId = null;
        api.deleteUser2(userId);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Get User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUser2Test() throws ApiException {
        Integer userId = null;
        User response = api.getUser2(userId);
        // TODO: test validations
    }

    /**
     * Get User Apps
     *
     * Get User Apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserApps2Test() throws ApiException {
        Integer userId = null;
        Boolean ignoreVisibility = null;
        List<GetUserApps200ResponseInner> response = api.getUserApps2(userId, ignoreVisibility);
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Get a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsers2Test() throws ApiException {
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String createdSince = null;
        String createdUntil = null;
        String updatedSince = null;
        String updatedUntil = null;
        String lastLoginSince = null;
        String lastLoginUntil = null;
        String firstname = null;
        String lastname = null;
        String email = null;
        String username = null;
        String samaccountname = null;
        Integer directoryId = null;
        String externalId = null;
        String userIds = null;
        String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket = null;
        String fields = null;
        List<User> response = api.listUsers2(limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields);
        // TODO: test validations
    }

    /**
     * Update User
     *
     * Update User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUser2Test() throws ApiException {
        Integer userId = null;
        String mappings = null;
        Boolean validatePolicy = null;
        User user = null;
        User response = api.updateUser2(userId, mappings, validatePolicy, user);
        // TODO: test validations
    }

}
