/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.ListMappingActionValues200ResponseInner;
import com.onelogin.client.model.ListMappingConditions200Response;
import com.onelogin.client.model.ListMappingConditionsOperators200ResponseInner;
import com.onelogin.client.model.ListMappingContionValues200ResponseInner;
import com.onelogin.client.model.ListMappingsActions200ResponseInner;
import com.onelogin.client.model.Mapping;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserMappingsApi
 */
@Disabled
public class UserMappingsApiTest {

    private final UserMappingsApi api = new UserMappingsApi();

    /**
     * Create Mapping
     *
     * Create Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMappingTest() throws ApiException {
        String contentType = null;
        Mapping mapping = null;
        List<Mapping> response = api.createMapping(contentType, mapping);
        // TODO: test validations
    }

    /**
     * Delete Mapping
     *
     * Delete Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMappingTest() throws ApiException {
        Integer mappingId = null;
        api.deleteMapping(mappingId);
        // TODO: test validations
    }

    /**
     * Get Mapping
     *
     * Get Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappingTest() throws ApiException {
        Integer mappingId = null;
        Mapping response = api.getMapping(mappingId);
        // TODO: test validations
    }

    /**
     * List Actions Values
     *
     * List Mappings&#39; Actions&#39; Values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingActionValuesTest() throws ApiException {
        String mappingActionValue = null;
        List<ListMappingActionValues200ResponseInner> response = api.listMappingActionValues(mappingActionValue);
        // TODO: test validations
    }

    /**
     * List Conditions
     *
     * List Mappings&#39; Conditions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingConditionsTest() throws ApiException {
        ListMappingConditions200Response response = api.listMappingConditions();
        // TODO: test validations
    }

    /**
     * List Conditions Operators
     *
     * List Mappings&#39; Conditions&#39; Operators
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingConditionsOperatorsTest() throws ApiException {
        String mappingConditionValue = null;
        List<ListMappingConditionsOperators200ResponseInner> response = api.listMappingConditionsOperators(mappingConditionValue);
        // TODO: test validations
    }

    /**
     * List Conditions Values
     *
     * List Mappings&#39;  Conditions&#39; Values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingContionValuesTest() throws ApiException {
        String mappingConditionValue = null;
        List<ListMappingContionValues200ResponseInner> response = api.listMappingContionValues(mappingConditionValue);
        // TODO: test validations
    }

    /**
     * List Mappings
     *
     * List Mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingsTest() throws ApiException {
        Boolean enabled = null;
        String hasCondition = null;
        String hasConditionType = null;
        String hasAction = null;
        String hasActionType = null;
        List<Mapping> response = api.listMappings(enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        // TODO: test validations
    }

    /**
     * List Actions
     *
     * List Mappings&#39; Actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingsActionsTest() throws ApiException {
        List<ListMappingsActions200ResponseInner> response = api.listMappingsActions();
        // TODO: test validations
    }

    /**
     * Bulk Sort
     *
     * Bulk Sort Mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sortMappingsTest() throws ApiException {
        List<Integer> requestBody = null;
        List<Integer> response = api.sortMappings(requestBody);
        // TODO: test validations
    }

    /**
     * Update Mapping
     *
     * Update Mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMappingTest() throws ApiException {
        Integer mappingId = null;
        String contentType = null;
        Object body = null;
        Integer response = api.updateMapping(mappingId, contentType, body);
        // TODO: test validations
    }

}
