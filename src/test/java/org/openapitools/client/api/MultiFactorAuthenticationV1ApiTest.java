/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.ActivateMfaFactorsRequest;
import com.onelogin.client.model.EnrollMfaFactor200Response;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.GenerateMFAtoken200Response;
import com.onelogin.client.model.GenerateMFAtokenRequest;
import com.onelogin.client.model.GetEnrolledFactors200Response;
import com.onelogin.client.model.GetMFAFactors200Response;
import com.onelogin.client.model.OtpDevice;
import com.onelogin.client.model.VerifyMfaFactorRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MultiFactorAuthenticationV1Api
 */
@Disabled
public class MultiFactorAuthenticationV1ApiTest {

    private final MultiFactorAuthenticationV1Api api = new MultiFactorAuthenticationV1Api();

    /**
     * Activate a Factor
     *
     * Activate a Factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateMfaFactorsTest() throws ApiException {
        Integer userId = null;
        String deviceId = null;
        ActivateMfaFactorsRequest activateMfaFactorsRequest = null;
        GetEnrolledFactors200Response response = api.activateMfaFactors(userId, deviceId, activateMfaFactorsRequest);
        // TODO: test validations
    }

    /**
     * Enroll a Factor
     *
     *  Enroll an Authentication Factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollMfaFactorTest() throws ApiException {
        Integer userId = null;
        OtpDevice otpDevice = null;
        EnrollMfaFactor200Response response = api.enrollMfaFactor(userId, otpDevice);
        // TODO: test validations
    }

    /**
     * Generate Temp MFA Token
     *
     * Generate MFA Token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateMFAtokenTest() throws ApiException {
        Integer userId = null;
        GenerateMFAtokenRequest generateMFAtokenRequest = null;
        GenerateMFAtoken200Response response = api.generateMFAtoken(userId, generateMFAtokenRequest);
        // TODO: test validations
    }

    /**
     * Get Enrolled Factors
     *
     * Get Enrolled Factors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnrolledFactorsTest() throws ApiException {
        Integer userId = null;
        GetEnrolledFactors200Response response = api.getEnrolledFactors(userId);
        // TODO: test validations
    }

    /**
     * Get Available Factors
     *
     * Get MFA Factors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMFAFactorsTest() throws ApiException {
        Integer userId = null;
        GetMFAFactors200Response response = api.getMFAFactors(userId);
        // TODO: test validations
    }

    /**
     * Remove an Enrolled Factor
     *
     * Remove an enrolled MFA device for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMfaFactorsTest() throws ApiException {
        Integer userId = null;
        String deviceId = null;
        api.removeMfaFactors(userId, deviceId);
        // TODO: test validations
    }

    /**
     * Verify a Factor
     *
     * Verify a Factor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyMfaFactorTest() throws ApiException {
        Integer userId = null;
        String deviceId = null;
        VerifyMfaFactorRequest verifyMfaFactorRequest = null;
        Error response = api.verifyMfaFactor(userId, deviceId, verifyMfaFactorRequest);
        // TODO: test validations
    }

}
