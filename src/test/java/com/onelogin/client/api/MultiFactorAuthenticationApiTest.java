/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.CreateDeviceVerification201Response;
import com.onelogin.client.model.CreateDeviceVerificationRequest;
import com.onelogin.client.model.CreateFactorRegistration201Response;
import com.onelogin.client.model.CreateFactorRegistrationRequest;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.GenerateOTP201Response;
import com.onelogin.client.model.GenerateOTPRequest;
import com.onelogin.client.model.GetAuthFactors200Response;
import com.onelogin.client.model.GetAuthenticationDevices200ResponseInner;
import com.onelogin.client.model.GetUserVerification200Response;
import com.onelogin.client.model.VerifyUserRegistration200Response;
import com.onelogin.client.model.VerifyUserRegistrationRequest;
import com.onelogin.client.model.VerifyUserVerificationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MultiFactorAuthenticationApi
 */
@Disabled
public class MultiFactorAuthenticationApiTest {

    private final MultiFactorAuthenticationApi api = new MultiFactorAuthenticationApi();

    /**
     * Create Device Verification
     *
     * Create a new verification process
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceVerificationTest() throws ApiException {
        Integer userId = null;
        String contentType = null;
        CreateDeviceVerificationRequest createDeviceVerificationRequest = null;
        CreateDeviceVerification201Response response = api.createDeviceVerification(userId, contentType, createDeviceVerificationRequest);
        // TODO: test validations
    }

    /**
     * Create Factor Registration
     *
     * Create a new registration process
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFactorRegistrationTest() throws ApiException {
        Integer userId = null;
        String contentType = null;
        CreateFactorRegistrationRequest createFactorRegistrationRequest = null;
        CreateFactorRegistration201Response response = api.createFactorRegistration(userId, contentType, createFactorRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Delete Enrolled Factor
     *
     * Delete a user\\&#39;s authentication device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnrolledFactorTest() throws ApiException {
        Integer userId = null;
        String deviceId = null;
        api.deleteEnrolledFactor(userId, deviceId);
        // TODO: test validations
    }

    /**
     * Generate MFA token
     *
     * Create new MFA token on the user&#39;s account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateOTPTest() throws ApiException {
        Integer userId = null;
        String contentType = null;
        GenerateOTPRequest generateOTPRequest = null;
        GenerateOTP201Response response = api.generateOTP(userId, contentType, generateOTPRequest);
        // TODO: test validations
    }

    /**
     * Get User Factors
     *
     * Get a user\\&#39;s available authentication factors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthFactorsTest() throws ApiException {
        Integer userId = null;
        GetAuthFactors200Response response = api.getAuthFactors(userId);
        // TODO: test validations
    }

    /**
     * Get User Devices
     *
     * Get a user authentication devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthenticationDevicesTest() throws ApiException {
        Integer userId = null;
        List<GetAuthenticationDevices200ResponseInner> response = api.getAuthenticationDevices(userId);
        // TODO: test validations
    }

    /**
     * Get User Registration
     *
     * Get registration state by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRegistrationTest() throws ApiException {
        Integer userId = null;
        String registrationId = null;
        Object response = api.getUserRegistration(userId, registrationId);
        // TODO: test validations
    }

    /**
     * Get User Verification
     *
     * Get verification state by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserVerificationTest() throws ApiException {
        Integer userId = null;
        String verificationId = null;
        GetUserVerification200Response response = api.getUserVerification(userId, verificationId);
        // TODO: test validations
    }

    /**
     * Verify User Registration
     *
     * Submit an otp for verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserRegistrationTest() throws ApiException {
        Integer userId = null;
        String registrationId = null;
        String contentType = null;
        VerifyUserRegistrationRequest verifyUserRegistrationRequest = null;
        VerifyUserRegistration200Response response = api.verifyUserRegistration(userId, registrationId, contentType, verifyUserRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Verify User Verification
     *
     * Submit an otp for verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserVerificationTest() throws ApiException {
        Integer userId = null;
        String verificationId = null;
        String contentType = null;
        VerifyUserVerificationRequest verifyUserVerificationRequest = null;
        Error response = api.verifyUserVerification(userId, verificationId, contentType, verifyUserVerificationRequest);
        // TODO: test validations
    }

}
