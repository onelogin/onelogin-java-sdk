/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.Brand;
import com.onelogin.client.model.BrandApp;
import com.onelogin.client.model.BrandReq;
import com.onelogin.client.model.RequestBrand;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrandingServiceApi
 */
@Disabled
public class BrandingServiceApiTest {

    private final BrandingServiceApi api = new BrandingServiceApi();

    /**
     * Create Brand
     *
     * Create a new Account Brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBrandTest() throws ApiException {
        Brand brand = null;
        Brand response = api.createBrand(brand);
        // TODO: test validations
    }

    /**
     * Delete Brand
     *
     * Delete Brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrandTest() throws ApiException {
        Integer brandId = null;
        api.deleteBrand(brandId);
        // TODO: test validations
    }

    /**
     * Get Brand
     *
     * Retrieve a single brand via ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandTest() throws ApiException {
        Integer brandId = null;
        Brand response = api.getBrand(brandId);
        // TODO: test validations
    }

    /**
     * Get Brand Apps
     *
     * Get Apps Associated with Account Brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrandAppsTest() throws ApiException {
        Integer brandId = null;
        List<BrandApp> response = api.getBrandApps(brandId);
        // TODO: test validations
    }

    /**
     * List Account Brands
     *
     * List Account Brands
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBrandsTest() throws ApiException {
        List<BrandReq> response = api.listBrands();
        // TODO: test validations
    }

    /**
     * Update Brand
     *
     * Update Account Brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrandTest() throws ApiException {
        Integer brandId = null;
        RequestBrand requestBrand = null;
        Brand response = api.updateBrand(brandId, requestBrand);
        // TODO: test validations
    }

}
