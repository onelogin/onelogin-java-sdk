/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.AddPrivilegeToRole201Response;
import com.onelogin.client.model.AddPrivilegeToRoleRequest;
import com.onelogin.client.model.AltErr;
import com.onelogin.client.model.AssignUsersToPrivilegeRequest;
import com.onelogin.client.model.CreatePrivilege200Response;
import com.onelogin.client.model.GetAssignedUser200Response;
import com.onelogin.client.model.ListPrivelegeRoles200Response;
import com.onelogin.client.model.Privilege;
import com.onelogin.client.model.UpdatePrivilege200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrivilegesApi
 */
@Disabled
public class PrivilegesApiTest {

    private final PrivilegesApi api = new PrivilegesApi();

    /**
     * Assign a Privilege to Roles
     *
     * Add roles to privilege 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPrivilegeToRoleTest() throws ApiException {
        String privilegeId = null;
        AddPrivilegeToRoleRequest addPrivilegeToRoleRequest = null;
        AddPrivilegeToRole201Response response = api.addPrivilegeToRole(privilegeId, addPrivilegeToRoleRequest);
        // TODO: test validations
    }

    /**
     * Assign Users to a Privilege
     *
     * Assign Users to Privilege
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignUsersToPrivilegeTest() throws ApiException {
        String privilegeId = null;
        AssignUsersToPrivilegeRequest assignUsersToPrivilegeRequest = null;
        AddPrivilegeToRole201Response response = api.assignUsersToPrivilege(privilegeId, assignUsersToPrivilegeRequest);
        // TODO: test validations
    }

    /**
     * Create a Privilege
     *
     * Create privilege
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrivilegeTest() throws ApiException {
        Privilege privilege = null;
        CreatePrivilege200Response response = api.createPrivilege(privilege);
        // TODO: test validations
    }

    /**
     * Delete a Privilege
     *
     * Delete
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePrivilegeTest() throws ApiException {
        String privilegeId = null;
        api.deletePrivilege(privilegeId);
        // TODO: test validations
    }

    /**
     * Remove a Privilege from a Role
     *
     * Add roles to privilege
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoleFromPrivilegeTest() throws ApiException {
        String privilegeId = null;
        String roleId = null;
        api.deleteRoleFromPrivilege(privilegeId, roleId);
        // TODO: test validations
    }

    /**
     * Get Users assigned to a Privilege
     *
     * Get Assigned Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssignedUserTest() throws ApiException {
        String privilegeId = null;
        GetAssignedUser200Response response = api.getAssignedUser(privilegeId);
        // TODO: test validations
    }

    /**
     * Get a Privilege
     *
     * Get a Privilige
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrivilegeTest() throws ApiException {
        String privilegeId = null;
        Privilege response = api.getPrivilege(privilegeId);
        // TODO: test validations
    }

    /**
     * Get Roles assigned to Privilege
     *
     * List roles for privilege
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPrivelegeRolesTest() throws ApiException {
        String privilegeId = null;
        ListPrivelegeRoles200Response response = api.listPrivelegeRoles(privilegeId);
        // TODO: test validations
    }

    /**
     * List Privileges
     *
     * List Privileges
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPrivelegesTest() throws ApiException {
        List<Privilege> response = api.listPriveleges();
        // TODO: test validations
    }

    /**
     * Remove a Privilege from Users
     *
     * Remove a Privilege from Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromPrivilegeTest() throws ApiException {
        String privilegeId = null;
        Integer userId = null;
        api.removeUserFromPrivilege(privilegeId, userId);
        // TODO: test validations
    }

    /**
     * Update a Privilege
     *
     * Update privilege
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrivilegeTest() throws ApiException {
        String privilegeId = null;
        Privilege privilege = null;
        UpdatePrivilege200Response response = api.updatePrivilege(privilegeId, privilege);
        // TODO: test validations
    }

}
