/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.client.api;

import com.onelogin.client.ApiException;
import com.onelogin.client.model.Error;
import com.onelogin.client.model.GetRiskScore200Response;
import com.onelogin.client.model.GetRiskScoreRequest;
import com.onelogin.client.model.GetRiskScores200Response;
import com.onelogin.client.model.RiskRule;
import com.onelogin.client.model.TrackRiskEventRequest;
import com.onelogin.client.model.UpdateRiskRuleRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VigilanceAiApi
 */
@Disabled
public class VigilanceAiApiTest {

    private final VigilanceAiApi api = new VigilanceAiApi();

    /**
     * Create Rule
     *
     * Create Vigilance AI (Risk Service) Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRiskRuleTest() throws ApiException {
        RiskRule riskRule = null;
        RiskRule response = api.createRiskRule(riskRule);
        // TODO: test validations
    }

    /**
     * Delete Rule
     *
     * Delete Vigilance AI (Risk Service)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRiskRuleTest() throws ApiException {
        String ruleId = null;
        api.deleteRiskRule(ruleId);
        // TODO: test validations
    }

    /**
     * get Risk Rule
     *
     * Use this API to return a single rule that has been created in the Risk Sevice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskRuleTest() throws ApiException {
        String ruleId = null;
        RiskRule response = api.getRiskRule(ruleId);
        // TODO: test validations
    }

    /**
     * Get a Risk Score
     *
     * Get Vigilance AI (Risk Service) Score
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskScoreTest() throws ApiException {
        GetRiskScoreRequest getRiskScoreRequest = null;
        String before = null;
        String after = null;
        GetRiskScore200Response response = api.getRiskScore(getRiskScoreRequest, before, after);
        // TODO: test validations
    }

    /**
     * Get Score Summary
     *
     * Get Vigilance AI (Risk Service) Score Summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskScoresTest() throws ApiException {
        GetRiskScores200Response response = api.getRiskScores();
        // TODO: test validations
    }

    /**
     * List Rules
     *
     * List Vigilance AI (Risk Service) Rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRiskRulesTest() throws ApiException {
        List<RiskRule> response = api.listRiskRules();
        // TODO: test validations
    }

    /**
     * Track an Event
     *
     * Track Vigilance AI (Risk Service) Event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackRiskEventTest() throws ApiException {
        TrackRiskEventRequest trackRiskEventRequest = null;
        api.trackRiskEvent(trackRiskEventRequest);
        // TODO: test validations
    }

    /**
     * Update Rule
     *
     * Update Vigilance AI (Risk Service) Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRiskRuleTest() throws ApiException {
        String ruleId = null;
        UpdateRiskRuleRequest updateRiskRuleRequest = null;
        RiskRule response = api.updateRiskRule(ruleId, updateRiskRuleRequest);
        // TODO: test validations
    }

}
