/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAccessTokenClaims200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-08T11:55:15.106928-07:00[America/Los_Angeles]")
public class ListAccessTokenClaims200ResponseInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS = "user_attribute_mappings";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MAPPINGS)
  private String userAttributeMappings;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE_MACROS = "user_attribute_macros";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE_MACROS)
  private String userAttributeMacros;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TRANSFORMATIONS = "attributes_transformations";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TRANSFORMATIONS)
  private String attributesTransformations;

  public static final String SERIALIZED_NAME_SKIP_IF_BLANK = "skip_if_blank";
  @SerializedName(SERIALIZED_NAME_SKIP_IF_BLANK)
  private Boolean skipIfBlank;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = null;

  public static final String SERIALIZED_NAME_DEFAULT_VALUES = "default_values";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUES)
  private String defaultValues;

  public static final String SERIALIZED_NAME_PROVISIONED_ENTITLEMENTS = "provisioned_entitlements";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_ENTITLEMENTS)
  private Boolean provisionedEntitlements;

  public ListAccessTokenClaims200ResponseInner() { 
  }

  public ListAccessTokenClaims200ResponseInner id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ListAccessTokenClaims200ResponseInner label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public ListAccessTokenClaims200ResponseInner userAttributeMappings(String userAttributeMappings) {
    
    this.userAttributeMappings = userAttributeMappings;
    return this;
  }

   /**
   * Get userAttributeMappings
   * @return userAttributeMappings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserAttributeMappings() {
    return userAttributeMappings;
  }


  public void setUserAttributeMappings(String userAttributeMappings) {
    this.userAttributeMappings = userAttributeMappings;
  }


  public ListAccessTokenClaims200ResponseInner userAttributeMacros(String userAttributeMacros) {
    
    this.userAttributeMacros = userAttributeMacros;
    return this;
  }

   /**
   * Get userAttributeMacros
   * @return userAttributeMacros
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserAttributeMacros() {
    return userAttributeMacros;
  }


  public void setUserAttributeMacros(String userAttributeMacros) {
    this.userAttributeMacros = userAttributeMacros;
  }


  public ListAccessTokenClaims200ResponseInner attributesTransformations(String attributesTransformations) {
    
    this.attributesTransformations = attributesTransformations;
    return this;
  }

   /**
   * Get attributesTransformations
   * @return attributesTransformations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAttributesTransformations() {
    return attributesTransformations;
  }


  public void setAttributesTransformations(String attributesTransformations) {
    this.attributesTransformations = attributesTransformations;
  }


  public ListAccessTokenClaims200ResponseInner skipIfBlank(Boolean skipIfBlank) {
    
    this.skipIfBlank = skipIfBlank;
    return this;
  }

   /**
   * Get skipIfBlank
   * @return skipIfBlank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSkipIfBlank() {
    return skipIfBlank;
  }


  public void setSkipIfBlank(Boolean skipIfBlank) {
    this.skipIfBlank = skipIfBlank;
  }


  public ListAccessTokenClaims200ResponseInner values(List<String> values) {
    
    this.values = values;
    return this;
  }

  public ListAccessTokenClaims200ResponseInner addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getValues() {
    return values;
  }


  public void setValues(List<String> values) {
    this.values = values;
  }


  public ListAccessTokenClaims200ResponseInner defaultValues(String defaultValues) {
    
    this.defaultValues = defaultValues;
    return this;
  }

   /**
   * Get defaultValues
   * @return defaultValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultValues() {
    return defaultValues;
  }


  public void setDefaultValues(String defaultValues) {
    this.defaultValues = defaultValues;
  }


  public ListAccessTokenClaims200ResponseInner provisionedEntitlements(Boolean provisionedEntitlements) {
    
    this.provisionedEntitlements = provisionedEntitlements;
    return this;
  }

   /**
   * Get provisionedEntitlements
   * @return provisionedEntitlements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getProvisionedEntitlements() {
    return provisionedEntitlements;
  }


  public void setProvisionedEntitlements(Boolean provisionedEntitlements) {
    this.provisionedEntitlements = provisionedEntitlements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAccessTokenClaims200ResponseInner listAccessTokenClaims200ResponseInner = (ListAccessTokenClaims200ResponseInner) o;
    return Objects.equals(this.id, listAccessTokenClaims200ResponseInner.id) &&
        Objects.equals(this.label, listAccessTokenClaims200ResponseInner.label) &&
        Objects.equals(this.userAttributeMappings, listAccessTokenClaims200ResponseInner.userAttributeMappings) &&
        Objects.equals(this.userAttributeMacros, listAccessTokenClaims200ResponseInner.userAttributeMacros) &&
        Objects.equals(this.attributesTransformations, listAccessTokenClaims200ResponseInner.attributesTransformations) &&
        Objects.equals(this.skipIfBlank, listAccessTokenClaims200ResponseInner.skipIfBlank) &&
        Objects.equals(this.values, listAccessTokenClaims200ResponseInner.values) &&
        Objects.equals(this.defaultValues, listAccessTokenClaims200ResponseInner.defaultValues) &&
        Objects.equals(this.provisionedEntitlements, listAccessTokenClaims200ResponseInner.provisionedEntitlements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, userAttributeMappings, userAttributeMacros, attributesTransformations, skipIfBlank, values, defaultValues, provisionedEntitlements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAccessTokenClaims200ResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    userAttributeMappings: ").append(toIndentedString(userAttributeMappings)).append("\n");
    sb.append("    userAttributeMacros: ").append(toIndentedString(userAttributeMacros)).append("\n");
    sb.append("    attributesTransformations: ").append(toIndentedString(attributesTransformations)).append("\n");
    sb.append("    skipIfBlank: ").append(toIndentedString(skipIfBlank)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    defaultValues: ").append(toIndentedString(defaultValues)).append("\n");
    sb.append("    provisionedEntitlements: ").append(toIndentedString(provisionedEntitlements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("user_attribute_mappings");
    openapiFields.add("user_attribute_macros");
    openapiFields.add("attributes_transformations");
    openapiFields.add("skip_if_blank");
    openapiFields.add("values");
    openapiFields.add("default_values");
    openapiFields.add("provisioned_entitlements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListAccessTokenClaims200ResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ListAccessTokenClaims200ResponseInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAccessTokenClaims200ResponseInner is not found in the empty JSON string", ListAccessTokenClaims200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListAccessTokenClaims200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAccessTokenClaims200ResponseInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("user_attribute_mappings") != null && !jsonObj.get("user_attribute_mappings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_mappings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_mappings").toString()));
      }
      if (jsonObj.get("user_attribute_macros") != null && !jsonObj.get("user_attribute_macros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_attribute_macros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_attribute_macros").toString()));
      }
      if (jsonObj.get("attributes_transformations") != null && !jsonObj.get("attributes_transformations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes_transformations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributes_transformations").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
      if (jsonObj.get("default_values") != null && !jsonObj.get("default_values").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_values` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAccessTokenClaims200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAccessTokenClaims200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAccessTokenClaims200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAccessTokenClaims200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAccessTokenClaims200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ListAccessTokenClaims200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAccessTokenClaims200ResponseInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListAccessTokenClaims200ResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListAccessTokenClaims200ResponseInner
  * @throws IOException if the JSON string is invalid with respect to ListAccessTokenClaims200ResponseInner
  */
  public static ListAccessTokenClaims200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAccessTokenClaims200ResponseInner.class);
  }

 /**
  * Convert an instance of ListAccessTokenClaims200ResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

