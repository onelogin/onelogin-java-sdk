/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateSamlAssertionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-08T11:55:15.106928-07:00[America/Los_Angeles]")
public class GenerateSamlAssertionRequest {
  public static final String SERIALIZED_NAME_USERNAME_OR_EMAIL = "username_or_email";
  @SerializedName(SERIALIZED_NAME_USERNAME_OR_EMAIL)
  private String usernameOrEmail;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_SUBDOMAIN = "subdomain";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN)
  private String subdomain;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public GenerateSamlAssertionRequest() { 
  }

  public GenerateSamlAssertionRequest usernameOrEmail(String usernameOrEmail) {
    
    this.usernameOrEmail = usernameOrEmail;
    return this;
  }

   /**
   * Set this to the username or email of the OneLogin user accessing the app for which you want to generate a SAML token.
   * @return usernameOrEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Set this to the username or email of the OneLogin user accessing the app for which you want to generate a SAML token.")

  public String getUsernameOrEmail() {
    return usernameOrEmail;
  }


  public void setUsernameOrEmail(String usernameOrEmail) {
    this.usernameOrEmail = usernameOrEmail;
  }


  public GenerateSamlAssertionRequest password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Password of the OneLogin user accessing the app for which you want to generate a SAML token.
   * @return password
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Password of the OneLogin user accessing the app for which you want to generate a SAML token.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public GenerateSamlAssertionRequest appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * App ID of the app for which you want to generate a SAML token. This is the app ID in OneLogin.
   * @return appId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "App ID of the app for which you want to generate a SAML token. This is the app ID in OneLogin.")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }


  public GenerateSamlAssertionRequest subdomain(String subdomain) {
    
    this.subdomain = subdomain;
    return this;
  }

   /**
   * Set to the subdomain of the OneLogin user accessing the app for which you want to generate a SAML token.
   * @return subdomain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Set to the subdomain of the OneLogin user accessing the app for which you want to generate a SAML token.")

  public String getSubdomain() {
    return subdomain;
  }


  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }


  public GenerateSamlAssertionRequest ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Whitelisted IP address, if MFA is required and you need to honor IP address whitelisting defined in MFA policies.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whitelisted IP address, if MFA is required and you need to honor IP address whitelisting defined in MFA policies.")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateSamlAssertionRequest generateSamlAssertionRequest = (GenerateSamlAssertionRequest) o;
    return Objects.equals(this.usernameOrEmail, generateSamlAssertionRequest.usernameOrEmail) &&
        Objects.equals(this.password, generateSamlAssertionRequest.password) &&
        Objects.equals(this.appId, generateSamlAssertionRequest.appId) &&
        Objects.equals(this.subdomain, generateSamlAssertionRequest.subdomain) &&
        Objects.equals(this.ipAddress, generateSamlAssertionRequest.ipAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usernameOrEmail, password, appId, subdomain, ipAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateSamlAssertionRequest {\n");
    sb.append("    usernameOrEmail: ").append(toIndentedString(usernameOrEmail)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("username_or_email");
    openapiFields.add("password");
    openapiFields.add("app_id");
    openapiFields.add("subdomain");
    openapiFields.add("ip_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("username_or_email");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("subdomain");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateSamlAssertionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GenerateSamlAssertionRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateSamlAssertionRequest is not found in the empty JSON string", GenerateSamlAssertionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenerateSamlAssertionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateSamlAssertionRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateSamlAssertionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("username_or_email") != null && !jsonObj.get("username_or_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username_or_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username_or_email").toString()));
      }
      if (jsonObj.get("password") != null && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("app_id") != null && !jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (jsonObj.get("subdomain") != null && !jsonObj.get("subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdomain").toString()));
      }
      if (jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateSamlAssertionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateSamlAssertionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateSamlAssertionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateSamlAssertionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateSamlAssertionRequest>() {
           @Override
           public void write(JsonWriter out, GenerateSamlAssertionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateSamlAssertionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateSamlAssertionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateSamlAssertionRequest
  * @throws IOException if the JSON string is invalid with respect to GenerateSamlAssertionRequest
  */
  public static GenerateSamlAssertionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateSamlAssertionRequest.class);
  }

 /**
  * Convert an instance of GenerateSamlAssertionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

