/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivateFactorRequest;
import org.openapitools.client.model.AddAccessTokenClaimRequest;
import org.openapitools.client.model.AddClientAppRequest;
import org.openapitools.client.model.AddRoleUsers200ResponseInner;
import org.openapitools.client.model.AddScopeRequest;
import org.openapitools.client.model.AuthMethod;
import org.openapitools.client.model.ClientApp;
import org.openapitools.client.model.Connector;
import org.openapitools.client.model.CreateAuthorizationServerRequest;
import org.openapitools.client.model.CreateEnvironmentVariableRequest;
import org.openapitools.client.model.CreateRoles201ResponseInner;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.EnrollFactorRequest;
import org.openapitools.client.model.Envvar;
import org.openapitools.client.model.ErrorStatus;
import org.openapitools.client.model.FactorInner;
import org.openapitools.client.model.GenerateMfaToken200Response;
import org.openapitools.client.model.GenerateMfaToken422Response;
import org.openapitools.client.model.GenerateMfaTokenRequest;
import org.openapitools.client.model.GenerateSamlAssertionRequest;
import org.openapitools.client.model.GenerateToken200Response;
import org.openapitools.client.model.GenerateToken400Response;
import org.openapitools.client.model.GenerateTokenRequest;
import org.openapitools.client.model.GetAuthorizationServer200Response;
import org.openapitools.client.model.GetAvailableFactors200ResponseInner;
import org.openapitools.client.model.GetClientApps200ResponseInner;
import org.openapitools.client.model.GetRateLimit200Response;
import org.openapitools.client.model.GetRiskScore200Response;
import org.openapitools.client.model.GetRiskScore400Response;
import org.openapitools.client.model.GetRiskScoreRequest;
import org.openapitools.client.model.GetScoreInsights200Response;
import org.openapitools.client.model.GetUserApps200ResponseInner;
import org.openapitools.client.model.Hook;
import org.openapitools.client.model.HookStatus;
import org.openapitools.client.model.Id;
import org.openapitools.client.model.ListAccessTokenClaims200ResponseInner;
import org.openapitools.client.model.ListActions200ResponseInner;
import org.openapitools.client.model.ListAppUsers200ResponseInner;
import org.openapitools.client.model.ListAuthorizationServers200ResponseInner;
import org.openapitools.client.model.ListConditionOperators200ResponseInner;
import org.openapitools.client.model.ListConditionValues200ResponseInner;
import org.openapitools.client.model.ListConditions200ResponseInner;
import org.openapitools.client.model.ListMappingConditionOperators200ResponseInner;
import org.openapitools.client.model.ListMappingConditions200ResponseInner;
import org.openapitools.client.model.ListScopes200ResponseInner;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.Mapping;
import org.openapitools.client.model.Registration;
import org.openapitools.client.model.RemoveRoleUsersRequest;
import org.openapitools.client.model.RevokeTokenRequest;
import org.openapitools.client.model.RiskRule;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleId;
import org.openapitools.client.model.Schema;
import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.SetRoleApps200ResponseInner;
import org.openapitools.client.model.Status1;
import org.openapitools.client.model.Status2;
import org.openapitools.client.model.TrackEventRequest;
import org.openapitools.client.model.UpdateAuthorizationServer400Response;
import org.openapitools.client.model.UpdateClientAppRequest;
import org.openapitools.client.model.UpdateEnvironmentVariableRequest;
import org.openapitools.client.model.UpdateRole200Response;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VerifyEnrollmentRequest;
import org.openapitools.client.model.VerifyFactorRequest;
import org.openapitools.client.model.VerifyFactorSaml200Response;
import org.openapitools.client.model.VerifyFactorSamlRequest;
import org.openapitools.client.model.VerifyFactorVoice200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateFactor
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateFactorCall(String authorization, Integer userId, ActivateFactorRequest activateFactorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateFactorValidateBeforeCall(String authorization, Integer userId, ActivateFactorRequest activateFactorRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling activateFactor(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling activateFactor(Async)");
        }
        
        // verify the required parameter 'activateFactorRequest' is set
        if (activateFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'activateFactorRequest' when calling activateFactor(Async)");
        }
        

        okhttp3.Call localVarCall = activateFactorCall(authorization, userId, activateFactorRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void activateFactor(String authorization, Integer userId, ActivateFactorRequest activateFactorRequest) throws ApiException {
        activateFactorWithHttpInfo(authorization, userId, activateFactorRequest);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateFactorWithHttpInfo(String authorization, Integer userId, ActivateFactorRequest activateFactorRequest) throws ApiException {
        okhttp3.Call localVarCall = activateFactorValidateBeforeCall(authorization, userId, activateFactorRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateFactorAsync(String authorization, Integer userId, ActivateFactorRequest activateFactorRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateFactorValidateBeforeCall(authorization, userId, activateFactorRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccessTokenClaim
     * @param authorization  (required)
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessTokenClaimCall(String authorization, Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccessTokenClaimRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccessTokenClaimValidateBeforeCall(String authorization, Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'addAccessTokenClaimRequest' is set
        if (addAccessTokenClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'addAccessTokenClaimRequest' when calling addAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = addAccessTokenClaimCall(authorization, id, addAccessTokenClaimRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id addAccessTokenClaim(String authorization, Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest) throws ApiException {
        ApiResponse<Id> localVarResp = addAccessTokenClaimWithHttpInfo(authorization, id, addAccessTokenClaimRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> addAccessTokenClaimWithHttpInfo(String authorization, Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccessTokenClaimValidateBeforeCall(authorization, id, addAccessTokenClaimRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessTokenClaimAsync(String authorization, Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccessTokenClaimValidateBeforeCall(authorization, id, addAccessTokenClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addClientApp
     * @param authorization  (required)
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClientAppCall(String authorization, Integer id, AddClientAppRequest addClientAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addClientAppRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClientAppValidateBeforeCall(String authorization, Integer id, AddClientAppRequest addClientAppRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addClientApp(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addClientApp(Async)");
        }
        
        // verify the required parameter 'addClientAppRequest' is set
        if (addClientAppRequest == null) {
            throw new ApiException("Missing the required parameter 'addClientAppRequest' when calling addClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = addClientAppCall(authorization, id, addClientAppRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @return ClientApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ClientApp addClientApp(String authorization, Integer id, AddClientAppRequest addClientAppRequest) throws ApiException {
        ApiResponse<ClientApp> localVarResp = addClientAppWithHttpInfo(authorization, id, addClientAppRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @return ApiResponse&lt;ClientApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientApp> addClientAppWithHttpInfo(String authorization, Integer id, AddClientAppRequest addClientAppRequest) throws ApiException {
        okhttp3.Call localVarCall = addClientAppValidateBeforeCall(authorization, id, addClientAppRequest, null);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClientAppAsync(String authorization, Integer id, AddClientAppRequest addClientAppRequest, final ApiCallback<ClientApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClientAppValidateBeforeCall(authorization, id, addClientAppRequest, _callback);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRoleAdmins
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleAdminsCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRoleAdminsValidateBeforeCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addRoleAdmins(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addRoleAdmins(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = addRoleAdminsCall(authorization, roleId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return List&lt;AddRoleUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddRoleUsers200ResponseInner> addRoleAdmins(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<AddRoleUsers200ResponseInner>> localVarResp = addRoleAdminsWithHttpInfo(authorization, roleId, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;AddRoleUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddRoleUsers200ResponseInner>> addRoleAdminsWithHttpInfo(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addRoleAdminsValidateBeforeCall(authorization, roleId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleAdminsAsync(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback<List<AddRoleUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRoleAdminsValidateBeforeCall(authorization, roleId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRoleUsers
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleUsersCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRoleUsersValidateBeforeCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addRoleUsers(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addRoleUsers(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = addRoleUsersCall(authorization, roleId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return List&lt;AddRoleUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddRoleUsers200ResponseInner> addRoleUsers(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<AddRoleUsers200ResponseInner>> localVarResp = addRoleUsersWithHttpInfo(authorization, roleId, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;AddRoleUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddRoleUsers200ResponseInner>> addRoleUsersWithHttpInfo(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addRoleUsersValidateBeforeCall(authorization, roleId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleUsersAsync(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback<List<AddRoleUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRoleUsersValidateBeforeCall(authorization, roleId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addScope
     * @param authorization  (required)
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScopeCall(String authorization, Integer id, AddScopeRequest addScopeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScopeRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addScopeValidateBeforeCall(String authorization, Integer id, AddScopeRequest addScopeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addScope(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addScope(Async)");
        }
        
        // verify the required parameter 'addScopeRequest' is set
        if (addScopeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScopeRequest' when calling addScope(Async)");
        }
        

        okhttp3.Call localVarCall = addScopeCall(authorization, id, addScopeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id addScope(String authorization, Integer id, AddScopeRequest addScopeRequest) throws ApiException {
        ApiResponse<Id> localVarResp = addScopeWithHttpInfo(authorization, id, addScopeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> addScopeWithHttpInfo(String authorization, Integer id, AddScopeRequest addScopeRequest) throws ApiException {
        okhttp3.Call localVarCall = addScopeValidateBeforeCall(authorization, id, addScopeRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScopeAsync(String authorization, Integer id, AddScopeRequest addScopeRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = addScopeValidateBeforeCall(authorization, id, addScopeRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkMappingSort
     * @param authorization  (required)
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMappingSortCall(String authorization, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/sort";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkMappingSortValidateBeforeCall(String authorization, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bulkMappingSort(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling bulkMappingSort(Async)");
        }
        

        okhttp3.Call localVarCall = bulkMappingSortCall(authorization, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> bulkMappingSort(String authorization, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = bulkMappingSortWithHttpInfo(authorization, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> bulkMappingSortWithHttpInfo(String authorization, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkMappingSortValidateBeforeCall(authorization, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMappingSortAsync(String authorization, List<Integer> requestBody, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkMappingSortValidateBeforeCall(authorization, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkSort
     * @param authorization  (required)
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSortCall(String authorization, Integer appId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/sort"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSortValidateBeforeCall(String authorization, Integer appId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bulkSort(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bulkSort(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling bulkSort(Async)");
        }
        

        okhttp3.Call localVarCall = bulkSortCall(authorization, appId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> bulkSort(String authorization, Integer appId, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = bulkSortWithHttpInfo(authorization, appId, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> bulkSortWithHttpInfo(String authorization, Integer appId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkSortValidateBeforeCall(authorization, appId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSortAsync(String authorization, Integer appId, List<Integer> requestBody, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSortValidateBeforeCall(authorization, appId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApp
     * @param authorization  (required)
     * @param schema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppCall(String authorization, Schema schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema;

        // create path and map variables
        String localVarPath = "/api/2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppValidateBeforeCall(String authorization, Schema schema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createApp(Async)");
        }
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling createApp(Async)");
        }
        

        okhttp3.Call localVarCall = createAppCall(authorization, schema, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param schema  (required)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Schema createApp(String authorization, Schema schema) throws ApiException {
        ApiResponse<Schema> localVarResp = createAppWithHttpInfo(authorization, schema);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param schema  (required)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> createAppWithHttpInfo(String authorization, Schema schema) throws ApiException {
        okhttp3.Call localVarCall = createAppValidateBeforeCall(authorization, schema, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param schema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppAsync(String authorization, Schema schema, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppValidateBeforeCall(authorization, schema, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorizationServer
     * @param authorization  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorizationServerCall(String authorization, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthorizationServerRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorizationServerValidateBeforeCall(String authorization, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'createAuthorizationServerRequest' is set
        if (createAuthorizationServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createAuthorizationServerRequest' when calling createAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthorizationServerCall(authorization, createAuthorizationServerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param createAuthorizationServerRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public Id createAuthorizationServer(String authorization, CreateAuthorizationServerRequest createAuthorizationServerRequest) throws ApiException {
        ApiResponse<Id> localVarResp = createAuthorizationServerWithHttpInfo(authorization, createAuthorizationServerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param createAuthorizationServerRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> createAuthorizationServerWithHttpInfo(String authorization, CreateAuthorizationServerRequest createAuthorizationServerRequest) throws ApiException {
        okhttp3.Call localVarCall = createAuthorizationServerValidateBeforeCall(authorization, createAuthorizationServerRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorizationServerAsync(String authorization, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorizationServerValidateBeforeCall(authorization, createAuthorizationServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEnvironmentVariable
     * @param authorization  (required)
     * @param createEnvironmentVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentVariableCall(String authorization, CreateEnvironmentVariableRequest createEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEnvironmentVariableRequest;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvironmentVariableValidateBeforeCall(String authorization, CreateEnvironmentVariableRequest createEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'createEnvironmentVariableRequest' is set
        if (createEnvironmentVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'createEnvironmentVariableRequest' when calling createEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = createEnvironmentVariableCall(authorization, createEnvironmentVariableRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param createEnvironmentVariableRequest  (required)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Envvar createEnvironmentVariable(String authorization, CreateEnvironmentVariableRequest createEnvironmentVariableRequest) throws ApiException {
        ApiResponse<Envvar> localVarResp = createEnvironmentVariableWithHttpInfo(authorization, createEnvironmentVariableRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param createEnvironmentVariableRequest  (required)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> createEnvironmentVariableWithHttpInfo(String authorization, CreateEnvironmentVariableRequest createEnvironmentVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = createEnvironmentVariableValidateBeforeCall(authorization, createEnvironmentVariableRequest, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param createEnvironmentVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentVariableAsync(String authorization, CreateEnvironmentVariableRequest createEnvironmentVariableRequest, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnvironmentVariableValidateBeforeCall(authorization, createEnvironmentVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHook
     * @param authorization  (required)
     * @param hook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createHookCall(String authorization, Hook hook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hook;

        // create path and map variables
        String localVarPath = "/api/2/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHookValidateBeforeCall(String authorization, Hook hook, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createHook(Async)");
        }
        
        // verify the required parameter 'hook' is set
        if (hook == null) {
            throw new ApiException("Missing the required parameter 'hook' when calling createHook(Async)");
        }
        

        okhttp3.Call localVarCall = createHookCall(authorization, hook, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hook  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createHook(String authorization, Hook hook) throws ApiException {
        createHookWithHttpInfo(authorization, hook);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hook  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createHookWithHttpInfo(String authorization, Hook hook) throws ApiException {
        okhttp3.Call localVarCall = createHookValidateBeforeCall(authorization, hook, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param hook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createHookAsync(String authorization, Hook hook, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHookValidateBeforeCall(authorization, hook, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMapping
     * @param authorization  (required)
     * @param mapping  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingCall(String authorization, Mapping mapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/api/2/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMappingValidateBeforeCall(String authorization, Mapping mapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createMapping(Async)");
        }
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling createMapping(Async)");
        }
        

        okhttp3.Call localVarCall = createMappingCall(authorization, mapping, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mapping  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public Integer createMapping(String authorization, Mapping mapping) throws ApiException {
        ApiResponse<Integer> localVarResp = createMappingWithHttpInfo(authorization, mapping);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mapping  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> createMappingWithHttpInfo(String authorization, Mapping mapping) throws ApiException {
        okhttp3.Call localVarCall = createMappingValidateBeforeCall(authorization, mapping, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param mapping  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingAsync(String authorization, Mapping mapping, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMappingValidateBeforeCall(authorization, mapping, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRiskRule
     * @param authorization  (required)
     * @param riskRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createRiskRuleCall(String authorization, RiskRule riskRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskRule;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRiskRuleValidateBeforeCall(String authorization, RiskRule riskRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRule' is set
        if (riskRule == null) {
            throw new ApiException("Missing the required parameter 'riskRule' when calling createRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = createRiskRuleCall(authorization, riskRule, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRule  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createRiskRule(String authorization, RiskRule riskRule) throws ApiException {
        createRiskRuleWithHttpInfo(authorization, riskRule);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRule  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createRiskRuleWithHttpInfo(String authorization, RiskRule riskRule) throws ApiException {
        okhttp3.Call localVarCall = createRiskRuleValidateBeforeCall(authorization, riskRule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param riskRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createRiskRuleAsync(String authorization, RiskRule riskRule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRiskRuleValidateBeforeCall(authorization, riskRule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoles
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRolesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRolesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createRoles(Async)");
        }
        

        okhttp3.Call localVarCall = createRolesCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return List&lt;CreateRoles201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateRoles201ResponseInner> createRoles(String authorization) throws ApiException {
        ApiResponse<List<CreateRoles201ResponseInner>> localVarResp = createRolesWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;CreateRoles201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateRoles201ResponseInner>> createRolesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRolesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<CreateRoles201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRolesAsync(String authorization, final ApiCallback<List<CreateRoles201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRolesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<CreateRoles201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRule
     * @param authorization  (required)
     * @param appId  (required)
     * @param rule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleCall(String authorization, Integer appId, Rule rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleValidateBeforeCall(String authorization, Integer appId, Rule rule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createRule(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createRule(Async)");
        }
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling createRule(Async)");
        }
        

        okhttp3.Call localVarCall = createRuleCall(authorization, appId, rule, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param rule  (required)
     * @return RuleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public RuleId createRule(String authorization, Integer appId, Rule rule) throws ApiException {
        ApiResponse<RuleId> localVarResp = createRuleWithHttpInfo(authorization, appId, rule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param rule  (required)
     * @return ApiResponse&lt;RuleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleId> createRuleWithHttpInfo(String authorization, Integer appId, Rule rule) throws ApiException {
        okhttp3.Call localVarCall = createRuleValidateBeforeCall(authorization, appId, rule, null);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param rule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleAsync(String authorization, Integer appId, Rule rule, final ApiCallback<RuleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleValidateBeforeCall(authorization, appId, rule, _callback);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param authorization  (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(String authorization, User user, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String authorization, User user, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createUser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(authorization, user, mappings, validatePolicy, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(String authorization, User user, String mappings, Boolean validatePolicy) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(authorization, user, mappings, validatePolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(String authorization, User user, String mappings, Boolean validatePolicy) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(authorization, user, mappings, validatePolicy, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(String authorization, User user, String mappings, Boolean validatePolicy, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(authorization, user, mappings, validatePolicy, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessTokenClaim
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenClaimCall(String authorization, Integer id, Integer claimId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims/{claim_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "claim_id" + "\\}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessTokenClaimValidateBeforeCall(String authorization, Integer id, Integer claimId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling deleteAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccessTokenClaimCall(authorization, id, claimId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccessTokenClaim(String authorization, Integer id, Integer claimId) throws ApiException {
        deleteAccessTokenClaimWithHttpInfo(authorization, id, claimId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccessTokenClaimWithHttpInfo(String authorization, Integer id, Integer claimId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenClaimValidateBeforeCall(authorization, id, claimId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenClaimAsync(String authorization, Integer id, Integer claimId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessTokenClaimValidateBeforeCall(authorization, id, claimId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApp
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppValidateBeforeCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteApp(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteApp(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAppCall(authorization, appId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApp(String authorization, Integer appId) throws ApiException {
        deleteAppWithHttpInfo(authorization, appId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAppWithHttpInfo(String authorization, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(authorization, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppAsync(String authorization, Integer appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(authorization, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppParameter
     * @param authorization  (required)
     * @param appId  (required)
     * @param parameterId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppParameterCall(String authorization, Integer appId, Integer parameterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/parameters/{parameter_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "parameter_id" + "\\}", localVarApiClient.escapeString(parameterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppParameterValidateBeforeCall(String authorization, Integer appId, Integer parameterId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAppParameter(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAppParameter(Async)");
        }
        
        // verify the required parameter 'parameterId' is set
        if (parameterId == null) {
            throw new ApiException("Missing the required parameter 'parameterId' when calling deleteAppParameter(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAppParameterCall(authorization, appId, parameterId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param parameterId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAppParameter(String authorization, Integer appId, Integer parameterId) throws ApiException {
        deleteAppParameterWithHttpInfo(authorization, appId, parameterId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param parameterId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAppParameterWithHttpInfo(String authorization, Integer appId, Integer parameterId) throws ApiException {
        okhttp3.Call localVarCall = deleteAppParameterValidateBeforeCall(authorization, appId, parameterId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param parameterId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppParameterAsync(String authorization, Integer appId, Integer parameterId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppParameterValidateBeforeCall(authorization, appId, parameterId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthorizationServer
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationServerCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthorizationServerValidateBeforeCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAuthorizationServerCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAuthorizationServer(String authorization, Integer id) throws ApiException {
        deleteAuthorizationServerWithHttpInfo(authorization, id);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAuthorizationServerWithHttpInfo(String authorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthorizationServerValidateBeforeCall(authorization, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationServerAsync(String authorization, Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthorizationServerValidateBeforeCall(authorization, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnvironmentVariable
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentVariableCall(String authorization, String envvarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentVariableValidateBeforeCall(String authorization, String envvarId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling deleteEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEnvironmentVariableCall(authorization, envvarId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEnvironmentVariable(String authorization, String envvarId) throws ApiException {
        deleteEnvironmentVariableWithHttpInfo(authorization, envvarId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEnvironmentVariableWithHttpInfo(String authorization, String envvarId) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(authorization, envvarId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentVariableAsync(String authorization, String envvarId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(authorization, envvarId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFactor
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFactorCall(String authorization, Integer userId, Integer deviceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices/{device_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "device_id" + "\\}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFactorValidateBeforeCall(String authorization, Integer userId, Integer deviceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteFactor(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteFactor(Async)");
        }
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteFactor(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFactorCall(authorization, userId, deviceId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFactor(String authorization, Integer userId, Integer deviceId) throws ApiException {
        deleteFactorWithHttpInfo(authorization, userId, deviceId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFactorWithHttpInfo(String authorization, Integer userId, Integer deviceId) throws ApiException {
        okhttp3.Call localVarCall = deleteFactorValidateBeforeCall(authorization, userId, deviceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFactorAsync(String authorization, Integer userId, Integer deviceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFactorValidateBeforeCall(authorization, userId, deviceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHook
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHookCall(String authorization, String hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHookValidateBeforeCall(String authorization, String hookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteHook(Async)");
        }
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling deleteHook(Async)");
        }
        

        okhttp3.Call localVarCall = deleteHookCall(authorization, hookId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHook(String authorization, String hookId) throws ApiException {
        deleteHookWithHttpInfo(authorization, hookId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHookWithHttpInfo(String authorization, String hookId) throws ApiException {
        okhttp3.Call localVarCall = deleteHookValidateBeforeCall(authorization, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHookAsync(String authorization, String hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHookValidateBeforeCall(authorization, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMapping
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingCall(String authorization, Integer mappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMappingValidateBeforeCall(String authorization, Integer mappingId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling deleteMapping(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMappingCall(authorization, mappingId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMapping(String authorization, Integer mappingId) throws ApiException {
        deleteMappingWithHttpInfo(authorization, mappingId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMappingWithHttpInfo(String authorization, Integer mappingId) throws ApiException {
        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(authorization, mappingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingAsync(String authorization, Integer mappingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(authorization, mappingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRiskRule
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRiskRuleCall(String authorization, String riskRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRiskRuleValidateBeforeCall(String authorization, String riskRuleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling deleteRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRiskRuleCall(authorization, riskRuleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule deleteRiskRule(String authorization, String riskRuleId) throws ApiException {
        ApiResponse<RiskRule> localVarResp = deleteRiskRuleWithHttpInfo(authorization, riskRuleId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> deleteRiskRuleWithHttpInfo(String authorization, String riskRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRiskRuleValidateBeforeCall(authorization, riskRuleId, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRiskRuleAsync(String authorization, String riskRuleId, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRiskRuleValidateBeforeCall(authorization, riskRuleId, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String authorization, Integer roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String authorization, Integer roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleCall(authorization, roleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String authorization, Integer roleId) throws ApiException {
        deleteRoleWithHttpInfo(authorization, roleId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String authorization, Integer roleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(authorization, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String authorization, Integer roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(authorization, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRule
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleCall(String authorization, Integer appId, Integer ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRuleValidateBeforeCall(String authorization, Integer appId, Integer ruleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteRule(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRuleCall(authorization, appId, ruleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRule(String authorization, Integer appId, Integer ruleId) throws ApiException {
        deleteRuleWithHttpInfo(authorization, appId, ruleId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(String authorization, Integer appId, Integer ruleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(authorization, appId, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleAsync(String authorization, Integer appId, Integer ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(authorization, appId, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScope
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScopeCall(String authorization, Integer id, Integer scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes/{scope_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "scope_id" + "\\}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScopeValidateBeforeCall(String authorization, Integer id, Integer scopeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteScope(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScope(Async)");
        }
        
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling deleteScope(Async)");
        }
        

        okhttp3.Call localVarCall = deleteScopeCall(authorization, id, scopeId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScope(String authorization, Integer id, Integer scopeId) throws ApiException {
        deleteScopeWithHttpInfo(authorization, id, scopeId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScopeWithHttpInfo(String authorization, Integer id, Integer scopeId) throws ApiException {
        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(authorization, id, scopeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScopeAsync(String authorization, Integer id, Integer scopeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(authorization, id, scopeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteUser(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(authorization, userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String authorization, Integer userId) throws ApiException {
        deleteUserWithHttpInfo(authorization, userId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String authorization, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String authorization, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(authorization, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dryRunMapping
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dryRunMappingCall(String authorization, Integer mappingId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}/dryrun"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dryRunMappingValidateBeforeCall(String authorization, Integer mappingId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling dryRunMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling dryRunMapping(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling dryRunMapping(Async)");
        }
        

        okhttp3.Call localVarCall = dryRunMappingCall(authorization, mappingId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> dryRunMapping(String authorization, Integer mappingId, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<Object>> localVarResp = dryRunMappingWithHttpInfo(authorization, mappingId, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> dryRunMappingWithHttpInfo(String authorization, Integer mappingId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = dryRunMappingValidateBeforeCall(authorization, mappingId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dryRunMappingAsync(String authorization, Integer mappingId, List<Integer> requestBody, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dryRunMappingValidateBeforeCall(authorization, mappingId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollFactor
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollFactorCall(String authorization, Integer userId, EnrollFactorRequest enrollFactorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrollFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollFactorValidateBeforeCall(String authorization, Integer userId, EnrollFactorRequest enrollFactorRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling enrollFactor(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enrollFactor(Async)");
        }
        
        // verify the required parameter 'enrollFactorRequest' is set
        if (enrollFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'enrollFactorRequest' when calling enrollFactor(Async)");
        }
        

        okhttp3.Call localVarCall = enrollFactorCall(authorization, userId, enrollFactorRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @return List&lt;List&lt;FactorInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<List<FactorInner>> enrollFactor(String authorization, Integer userId, EnrollFactorRequest enrollFactorRequest) throws ApiException {
        ApiResponse<List<List<FactorInner>>> localVarResp = enrollFactorWithHttpInfo(authorization, userId, enrollFactorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @return ApiResponse&lt;List&lt;List&lt;FactorInner&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<FactorInner>>> enrollFactorWithHttpInfo(String authorization, Integer userId, EnrollFactorRequest enrollFactorRequest) throws ApiException {
        okhttp3.Call localVarCall = enrollFactorValidateBeforeCall(authorization, userId, enrollFactorRequest, null);
        Type localVarReturnType = new TypeToken<List<List<FactorInner>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollFactorAsync(String authorization, Integer userId, EnrollFactorRequest enrollFactorRequest, final ApiCallback<List<List<FactorInner>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollFactorValidateBeforeCall(authorization, userId, enrollFactorRequest, _callback);
        Type localVarReturnType = new TypeToken<List<List<FactorInner>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMfaToken
     * @param authorization  (required)
     * @param generateMfaTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMfaTokenCall(String authorization, GenerateMfaTokenRequest generateMfaTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateMfaTokenRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfs/users/{user_id}/mfa_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMfaTokenValidateBeforeCall(String authorization, GenerateMfaTokenRequest generateMfaTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling generateMfaToken(Async)");
        }
        
        // verify the required parameter 'generateMfaTokenRequest' is set
        if (generateMfaTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'generateMfaTokenRequest' when calling generateMfaToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateMfaTokenCall(authorization, generateMfaTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateMfaTokenRequest  (required)
     * @return GenerateMfaToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateMfaToken200Response generateMfaToken(String authorization, GenerateMfaTokenRequest generateMfaTokenRequest) throws ApiException {
        ApiResponse<GenerateMfaToken200Response> localVarResp = generateMfaTokenWithHttpInfo(authorization, generateMfaTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateMfaTokenRequest  (required)
     * @return ApiResponse&lt;GenerateMfaToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateMfaToken200Response> generateMfaTokenWithHttpInfo(String authorization, GenerateMfaTokenRequest generateMfaTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = generateMfaTokenValidateBeforeCall(authorization, generateMfaTokenRequest, null);
        Type localVarReturnType = new TypeToken<GenerateMfaToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param generateMfaTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMfaTokenAsync(String authorization, GenerateMfaTokenRequest generateMfaTokenRequest, final ApiCallback<GenerateMfaToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMfaTokenValidateBeforeCall(authorization, generateMfaTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateMfaToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateSamlAssertion
     * @param authorization  (required)
     * @param generateSamlAssertionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSamlAssertionCall(String authorization, GenerateSamlAssertionRequest generateSamlAssertionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateSamlAssertionRequest;

        // create path and map variables
        String localVarPath = "/api/2/saml_assertion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSamlAssertionValidateBeforeCall(String authorization, GenerateSamlAssertionRequest generateSamlAssertionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling generateSamlAssertion(Async)");
        }
        
        // verify the required parameter 'generateSamlAssertionRequest' is set
        if (generateSamlAssertionRequest == null) {
            throw new ApiException("Missing the required parameter 'generateSamlAssertionRequest' when calling generateSamlAssertion(Async)");
        }
        

        okhttp3.Call localVarCall = generateSamlAssertionCall(authorization, generateSamlAssertionRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateSamlAssertionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void generateSamlAssertion(String authorization, GenerateSamlAssertionRequest generateSamlAssertionRequest) throws ApiException {
        generateSamlAssertionWithHttpInfo(authorization, generateSamlAssertionRequest);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateSamlAssertionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateSamlAssertionWithHttpInfo(String authorization, GenerateSamlAssertionRequest generateSamlAssertionRequest) throws ApiException {
        okhttp3.Call localVarCall = generateSamlAssertionValidateBeforeCall(authorization, generateSamlAssertionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param generateSamlAssertionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSamlAssertionAsync(String authorization, GenerateSamlAssertionRequest generateSamlAssertionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSamlAssertionValidateBeforeCall(authorization, generateSamlAssertionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateToken
     * @param authorization  (required)
     * @param generateTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenCall(String authorization, GenerateTokenRequest generateTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateTokenRequest;

        // create path and map variables
        String localVarPath = "/auth/oauth2/v2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenValidateBeforeCall(String authorization, GenerateTokenRequest generateTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling generateToken(Async)");
        }
        
        // verify the required parameter 'generateTokenRequest' is set
        if (generateTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'generateTokenRequest' when calling generateToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateTokenCall(authorization, generateTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateTokenRequest  (required)
     * @return GenerateToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateToken200Response generateToken(String authorization, GenerateTokenRequest generateTokenRequest) throws ApiException {
        ApiResponse<GenerateToken200Response> localVarResp = generateTokenWithHttpInfo(authorization, generateTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param generateTokenRequest  (required)
     * @return ApiResponse&lt;GenerateToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateToken200Response> generateTokenWithHttpInfo(String authorization, GenerateTokenRequest generateTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(authorization, generateTokenRequest, null);
        Type localVarReturnType = new TypeToken<GenerateToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param generateTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenAsync(String authorization, GenerateTokenRequest generateTokenRequest, final ApiCallback<GenerateToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(authorization, generateTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApp
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppValidateBeforeCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getApp(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApp(Async)");
        }
        

        okhttp3.Call localVarCall = getAppCall(authorization, appId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Schema getApp(String authorization, Integer appId) throws ApiException {
        ApiResponse<Schema> localVarResp = getAppWithHttpInfo(authorization, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> getAppWithHttpInfo(String authorization, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = getAppValidateBeforeCall(authorization, appId, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppAsync(String authorization, Integer appId, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppValidateBeforeCall(authorization, appId, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizationServer
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationServerCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationServerValidateBeforeCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthorizationServerCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return GetAuthorizationServer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthorizationServer200Response getAuthorizationServer(String authorization, Integer id) throws ApiException {
        ApiResponse<GetAuthorizationServer200Response> localVarResp = getAuthorizationServerWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GetAuthorizationServer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthorizationServer200Response> getAuthorizationServerWithHttpInfo(String authorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationServerValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<GetAuthorizationServer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationServerAsync(String authorization, Integer id, final ApiCallback<GetAuthorizationServer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationServerValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorizationServer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableFactors
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableFactorsCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/factors"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableFactorsValidateBeforeCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAvailableFactors(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAvailableFactors(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableFactorsCall(authorization, userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @return List&lt;GetAvailableFactors200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetAvailableFactors200ResponseInner> getAvailableFactors(String authorization, Integer userId) throws ApiException {
        ApiResponse<List<GetAvailableFactors200ResponseInner>> localVarResp = getAvailableFactorsWithHttpInfo(authorization, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @return ApiResponse&lt;List&lt;GetAvailableFactors200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetAvailableFactors200ResponseInner>> getAvailableFactorsWithHttpInfo(String authorization, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableFactorsValidateBeforeCall(authorization, userId, null);
        Type localVarReturnType = new TypeToken<List<GetAvailableFactors200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableFactorsAsync(String authorization, Integer userId, final ApiCallback<List<GetAvailableFactors200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableFactorsValidateBeforeCall(authorization, userId, _callback);
        Type localVarReturnType = new TypeToken<List<GetAvailableFactors200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClientApps
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientAppsCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientAppsValidateBeforeCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getClientApps(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClientApps(Async)");
        }
        

        okhttp3.Call localVarCall = getClientAppsCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return List&lt;GetClientApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<GetClientApps200ResponseInner> getClientApps(String authorization, Integer id) throws ApiException {
        ApiResponse<List<GetClientApps200ResponseInner>> localVarResp = getClientAppsWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;GetClientApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetClientApps200ResponseInner>> getClientAppsWithHttpInfo(String authorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = getClientAppsValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<List<GetClientApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientAppsAsync(String authorization, Integer id, final ApiCallback<List<GetClientApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientAppsValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<List<GetClientApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnrolledFactors
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrolledFactorsCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnrolledFactorsValidateBeforeCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEnrolledFactors(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEnrolledFactors(Async)");
        }
        

        okhttp3.Call localVarCall = getEnrolledFactorsCall(authorization, userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @return List&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Device> getEnrolledFactors(String authorization, Integer userId) throws ApiException {
        ApiResponse<List<Device>> localVarResp = getEnrolledFactorsWithHttpInfo(authorization, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @return ApiResponse&lt;List&lt;Device&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Device>> getEnrolledFactorsWithHttpInfo(String authorization, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getEnrolledFactorsValidateBeforeCall(authorization, userId, null);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrolledFactorsAsync(String authorization, Integer userId, final ApiCallback<List<Device>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnrolledFactorsValidateBeforeCall(authorization, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironmentVariable
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentVariableCall(String authorization, String envvarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentVariableValidateBeforeCall(String authorization, String envvarId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling getEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = getEnvironmentVariableCall(authorization, envvarId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public Envvar getEnvironmentVariable(String authorization, String envvarId) throws ApiException {
        ApiResponse<Envvar> localVarResp = getEnvironmentVariableWithHttpInfo(authorization, envvarId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> getEnvironmentVariableWithHttpInfo(String authorization, String envvarId) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentVariableValidateBeforeCall(authorization, envvarId, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentVariableAsync(String authorization, String envvarId, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentVariableValidateBeforeCall(authorization, envvarId, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHook
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHookCall(String authorization, String hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHookValidateBeforeCall(String authorization, String hookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getHook(Async)");
        }
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling getHook(Async)");
        }
        

        okhttp3.Call localVarCall = getHookCall(authorization, hookId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Hook getHook(String authorization, String hookId) throws ApiException {
        ApiResponse<Hook> localVarResp = getHookWithHttpInfo(authorization, hookId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> getHookWithHttpInfo(String authorization, String hookId) throws ApiException {
        okhttp3.Call localVarCall = getHookValidateBeforeCall(authorization, hookId, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHookAsync(String authorization, String hookId, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHookValidateBeforeCall(authorization, hookId, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogs
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsCall(String authorization, String hookId, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}/logs"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_id", requestId));
        }

        if (correlationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correlation_id", correlationId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogsValidateBeforeCall(String authorization, String hookId, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getLogs(Async)");
        }
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling getLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getLogsCall(authorization, hookId, limit, page, cursor, requestId, correlationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @return List&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Log> getLogs(String authorization, String hookId, Integer limit, Integer page, String cursor, String requestId, String correlationId) throws ApiException {
        ApiResponse<List<Log>> localVarResp = getLogsWithHttpInfo(authorization, hookId, limit, page, cursor, requestId, correlationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @return ApiResponse&lt;List&lt;Log&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Log>> getLogsWithHttpInfo(String authorization, String hookId, Integer limit, Integer page, String cursor, String requestId, String correlationId) throws ApiException {
        okhttp3.Call localVarCall = getLogsValidateBeforeCall(authorization, hookId, limit, page, cursor, requestId, correlationId, null);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsAsync(String authorization, String hookId, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback<List<Log>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogsValidateBeforeCall(authorization, hookId, limit, page, cursor, requestId, correlationId, _callback);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapping
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingCall(String authorization, Integer mappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingValidateBeforeCall(String authorization, Integer mappingId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling getMapping(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingCall(authorization, mappingId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @return Mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Mapping getMapping(String authorization, Integer mappingId) throws ApiException {
        ApiResponse<Mapping> localVarResp = getMappingWithHttpInfo(authorization, mappingId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @return ApiResponse&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapping> getMappingWithHttpInfo(String authorization, Integer mappingId) throws ApiException {
        okhttp3.Call localVarCall = getMappingValidateBeforeCall(authorization, mappingId, null);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingAsync(String authorization, Integer mappingId, final ApiCallback<Mapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingValidateBeforeCall(authorization, mappingId, _callback);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRateLimit
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateLimitCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/rate_limit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRateLimitValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRateLimit(Async)");
        }
        

        okhttp3.Call localVarCall = getRateLimitCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return GetRateLimit200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetRateLimit200Response getRateLimit(String authorization) throws ApiException {
        ApiResponse<GetRateLimit200Response> localVarResp = getRateLimitWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;GetRateLimit200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRateLimit200Response> getRateLimitWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRateLimitValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<GetRateLimit200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateLimitAsync(String authorization, final ApiCallback<GetRateLimit200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRateLimitValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<GetRateLimit200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRiskRule
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRiskRuleCall(String authorization, String riskRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskRuleValidateBeforeCall(String authorization, String riskRuleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling getRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = getRiskRuleCall(authorization, riskRuleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getRiskRule(String authorization, String riskRuleId) throws ApiException {
        getRiskRuleWithHttpInfo(authorization, riskRuleId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getRiskRuleWithHttpInfo(String authorization, String riskRuleId) throws ApiException {
        okhttp3.Call localVarCall = getRiskRuleValidateBeforeCall(authorization, riskRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRiskRuleAsync(String authorization, String riskRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskRuleValidateBeforeCall(authorization, riskRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRiskScore
     * @param authorization  (required)
     * @param getRiskScoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskScoreCall(String authorization, GetRiskScoreRequest getRiskScoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRiskScoreRequest;

        // create path and map variables
        String localVarPath = "/api/2/risk/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskScoreValidateBeforeCall(String authorization, GetRiskScoreRequest getRiskScoreRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRiskScore(Async)");
        }
        
        // verify the required parameter 'getRiskScoreRequest' is set
        if (getRiskScoreRequest == null) {
            throw new ApiException("Missing the required parameter 'getRiskScoreRequest' when calling getRiskScore(Async)");
        }
        

        okhttp3.Call localVarCall = getRiskScoreCall(authorization, getRiskScoreRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param getRiskScoreRequest  (required)
     * @return GetRiskScore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public GetRiskScore200Response getRiskScore(String authorization, GetRiskScoreRequest getRiskScoreRequest) throws ApiException {
        ApiResponse<GetRiskScore200Response> localVarResp = getRiskScoreWithHttpInfo(authorization, getRiskScoreRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param getRiskScoreRequest  (required)
     * @return ApiResponse&lt;GetRiskScore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRiskScore200Response> getRiskScoreWithHttpInfo(String authorization, GetRiskScoreRequest getRiskScoreRequest) throws ApiException {
        okhttp3.Call localVarCall = getRiskScoreValidateBeforeCall(authorization, getRiskScoreRequest, null);
        Type localVarReturnType = new TypeToken<GetRiskScore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param getRiskScoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskScoreAsync(String authorization, GetRiskScoreRequest getRiskScoreRequest, final ApiCallback<GetRiskScore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskScoreValidateBeforeCall(authorization, getRiskScoreRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRiskScore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(String authorization, Integer roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(String authorization, Integer roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRole(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleCall(authorization, roleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Role getRole(String authorization, Integer roleId) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleWithHttpInfo(authorization, roleId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleWithHttpInfo(String authorization, Integer roleId) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(authorization, roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(String authorization, Integer roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(authorization, roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleAdmins
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAdminsCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (includeUnassigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unassigned", includeUnassigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleAdminsValidateBeforeCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRoleAdmins(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleAdminsCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getRoleAdmins(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getRoleAdminsWithHttpInfo(authorization, roleId, limit, page, cursor, name, includeUnassigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getRoleAdminsWithHttpInfo(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleAdminsValidateBeforeCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAdminsAsync(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleAdminsValidateBeforeCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleApps
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAppsCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/apps"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (assigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned", assigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleAppsValidateBeforeCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRoleApps(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleApps(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleAppsCall(authorization, roleId, limit, page, cursor, assigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @return List&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema> getRoleApps(String authorization, Integer roleId, Integer limit, Integer page, String cursor, Boolean assigned) throws ApiException {
        ApiResponse<List<Schema>> localVarResp = getRoleAppsWithHttpInfo(authorization, roleId, limit, page, cursor, assigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema>> getRoleAppsWithHttpInfo(String authorization, Integer roleId, Integer limit, Integer page, String cursor, Boolean assigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleAppsValidateBeforeCall(authorization, roleId, limit, page, cursor, assigned, null);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAppsAsync(String authorization, Integer roleId, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback<List<Schema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleAppsValidateBeforeCall(authorization, roleId, limit, page, cursor, assigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleUsers
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleUsersCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (includeUnassigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unassigned", includeUnassigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleUsersValidateBeforeCall(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRoleUsers(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleUsersCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getRoleUsers(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getRoleUsersWithHttpInfo(authorization, roleId, limit, page, cursor, name, includeUnassigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getRoleUsersWithHttpInfo(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleUsersValidateBeforeCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleUsersAsync(String authorization, Integer roleId, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleUsersValidateBeforeCall(authorization, roleId, limit, page, cursor, name, includeUnassigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRule
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCall(String authorization, Integer appId, Integer ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleValidateBeforeCall(String authorization, Integer appId, Integer ruleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRule(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }
        

        okhttp3.Call localVarCall = getRuleCall(authorization, appId, ruleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Rule getRule(String authorization, Integer appId, Integer ruleId) throws ApiException {
        ApiResponse<Rule> localVarResp = getRuleWithHttpInfo(authorization, appId, ruleId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> getRuleWithHttpInfo(String authorization, Integer appId, Integer ruleId) throws ApiException {
        okhttp3.Call localVarCall = getRuleValidateBeforeCall(authorization, appId, ruleId, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleAsync(String authorization, Integer appId, Integer ruleId, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleValidateBeforeCall(authorization, appId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreInsights
     * @param authorization  (required)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreInsightsCall(String authorization, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreInsightsValidateBeforeCall(String authorization, String before, String after, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getScoreInsights(Async)");
        }
        

        okhttp3.Call localVarCall = getScoreInsightsCall(authorization, before, after, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @return GetScoreInsights200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public GetScoreInsights200Response getScoreInsights(String authorization, String before, String after) throws ApiException {
        ApiResponse<GetScoreInsights200Response> localVarResp = getScoreInsightsWithHttpInfo(authorization, before, after);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @return ApiResponse&lt;GetScoreInsights200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetScoreInsights200Response> getScoreInsightsWithHttpInfo(String authorization, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = getScoreInsightsValidateBeforeCall(authorization, before, after, null);
        Type localVarReturnType = new TypeToken<GetScoreInsights200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreInsightsAsync(String authorization, String before, String after, final ApiCallback<GetScoreInsights200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreInsightsValidateBeforeCall(authorization, before, after, _callback);
        Type localVarReturnType = new TypeToken<GetScoreInsights200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String authorization, Integer userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUser(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(authorization, userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String authorization, Integer userId) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(authorization, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String authorization, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String authorization, Integer userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(authorization, userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserApps
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAppsCall(String authorization, Integer userId, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}/apps"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_visibility", ignoreVisibility));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAppsValidateBeforeCall(String authorization, Integer userId, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getUserApps(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserApps(Async)");
        }
        

        okhttp3.Call localVarCall = getUserAppsCall(authorization, userId, ignoreVisibility, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @return List&lt;GetUserApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<GetUserApps200ResponseInner> getUserApps(String authorization, Integer userId, Boolean ignoreVisibility) throws ApiException {
        ApiResponse<List<GetUserApps200ResponseInner>> localVarResp = getUserAppsWithHttpInfo(authorization, userId, ignoreVisibility);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @return ApiResponse&lt;List&lt;GetUserApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetUserApps200ResponseInner>> getUserAppsWithHttpInfo(String authorization, Integer userId, Boolean ignoreVisibility) throws ApiException {
        okhttp3.Call localVarCall = getUserAppsValidateBeforeCall(authorization, userId, ignoreVisibility, null);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAppsAsync(String authorization, Integer userId, Boolean ignoreVisibility, final ApiCallback<List<GetUserApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAppsValidateBeforeCall(authorization, userId, ignoreVisibility, _callback);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccessTokenClaims
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccessTokenClaimsCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessTokenClaimsValidateBeforeCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAccessTokenClaims(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listAccessTokenClaims(Async)");
        }
        

        okhttp3.Call localVarCall = listAccessTokenClaimsCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return List&lt;ListAccessTokenClaims200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAccessTokenClaims200ResponseInner> listAccessTokenClaims(String authorization, Integer id) throws ApiException {
        ApiResponse<List<ListAccessTokenClaims200ResponseInner>> localVarResp = listAccessTokenClaimsWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;ListAccessTokenClaims200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAccessTokenClaims200ResponseInner>> listAccessTokenClaimsWithHttpInfo(String authorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = listAccessTokenClaimsValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<List<ListAccessTokenClaims200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccessTokenClaimsAsync(String authorization, Integer id, final ApiCallback<List<ListAccessTokenClaims200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessTokenClaimsValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<List<ListAccessTokenClaims200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActionValues
     * @param authorization  (required)
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionValuesCall(String authorization, Integer appId, String actionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/actions/{actuion_value}/values"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "action_value" + "\\}", localVarApiClient.escapeString(actionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionValuesValidateBeforeCall(String authorization, Integer appId, String actionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listActionValues(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listActionValues(Async)");
        }
        
        // verify the required parameter 'actionValue' is set
        if (actionValue == null) {
            throw new ApiException("Missing the required parameter 'actionValue' when calling listActionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listActionValuesCall(authorization, appId, actionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listActionValues(String authorization, Integer appId, String actionValue) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listActionValuesWithHttpInfo(authorization, appId, actionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listActionValuesWithHttpInfo(String authorization, Integer appId, String actionValue) throws ApiException {
        okhttp3.Call localVarCall = listActionValuesValidateBeforeCall(authorization, appId, actionValue, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionValuesAsync(String authorization, Integer appId, String actionValue, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionValuesValidateBeforeCall(authorization, appId, actionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActions
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/actions"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionsValidateBeforeCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listActions(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listActions(Async)");
        }
        

        okhttp3.Call localVarCall = listActionsCall(authorization, appId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return List&lt;ListActions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListActions200ResponseInner> listActions(String authorization, Integer appId) throws ApiException {
        ApiResponse<List<ListActions200ResponseInner>> localVarResp = listActionsWithHttpInfo(authorization, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListActions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListActions200ResponseInner>> listActionsWithHttpInfo(String authorization, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = listActionsValidateBeforeCall(authorization, appId, null);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsAsync(String authorization, Integer appId, final ApiCallback<List<ListActions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionsValidateBeforeCall(authorization, appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppUsers
     * @param authorization  (required)
     * @param appId  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppUsersCall(String authorization, Integer appId, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/users"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppUsersValidateBeforeCall(String authorization, Integer appId, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAppUsers(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAppUsers(Async)");
        }
        

        okhttp3.Call localVarCall = listAppUsersCall(authorization, appId, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;ListAppUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAppUsers200ResponseInner> listAppUsers(String authorization, Integer appId, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<ListAppUsers200ResponseInner>> localVarResp = listAppUsersWithHttpInfo(authorization, appId, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;ListAppUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAppUsers200ResponseInner>> listAppUsersWithHttpInfo(String authorization, Integer appId, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAppUsersValidateBeforeCall(authorization, appId, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAppUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppUsersAsync(String authorization, Integer appId, Integer limit, Integer page, String cursor, final ApiCallback<List<ListAppUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppUsersValidateBeforeCall(authorization, appId, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAppUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApps
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppsCall(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connector_id", connectorId));
        }

        if (authMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_method", authMethod));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppsValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listApps(Async)");
        }
        

        okhttp3.Call localVarCall = listAppsCall(authorization, limit, page, cursor, name, connectorId, authMethod, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return List&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema> listApps(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod) throws ApiException {
        ApiResponse<List<Schema>> localVarResp = listAppsWithHttpInfo(authorization, limit, page, cursor, name, connectorId, authMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return ApiResponse&lt;List&lt;Schema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema>> listAppsWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod) throws ApiException {
        okhttp3.Call localVarCall = listAppsValidateBeforeCall(authorization, limit, page, cursor, name, connectorId, authMethod, null);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppsAsync(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback<List<Schema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppsValidateBeforeCall(authorization, limit, page, cursor, name, connectorId, authMethod, _callback);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthorizationServers
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorizationServersCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthorizationServersValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listAuthorizationServers(Async)");
        }
        

        okhttp3.Call localVarCall = listAuthorizationServersCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return List&lt;ListAuthorizationServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAuthorizationServers200ResponseInner> listAuthorizationServers(String authorization) throws ApiException {
        ApiResponse<List<ListAuthorizationServers200ResponseInner>> localVarResp = listAuthorizationServersWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;ListAuthorizationServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAuthorizationServers200ResponseInner>> listAuthorizationServersWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listAuthorizationServersValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListAuthorizationServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorizationServersAsync(String authorization, final ApiCallback<List<ListAuthorizationServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthorizationServersValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListAuthorizationServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditionOperators
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionOperatorsCall(String authorization, Integer appId, String conditionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions/{condition_value}/operators"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionOperatorsValidateBeforeCall(String authorization, Integer appId, String conditionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listConditionOperators(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditionOperators(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listConditionOperators(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionOperatorsCall(authorization, appId, conditionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return List&lt;ListConditionOperators200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionOperators200ResponseInner> listConditionOperators(String authorization, Integer appId, String conditionValue) throws ApiException {
        ApiResponse<List<ListConditionOperators200ResponseInner>> localVarResp = listConditionOperatorsWithHttpInfo(authorization, appId, conditionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return ApiResponse&lt;List&lt;ListConditionOperators200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionOperators200ResponseInner>> listConditionOperatorsWithHttpInfo(String authorization, Integer appId, String conditionValue) throws ApiException {
        okhttp3.Call localVarCall = listConditionOperatorsValidateBeforeCall(authorization, appId, conditionValue, null);
        Type localVarReturnType = new TypeToken<List<ListConditionOperators200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionOperatorsAsync(String authorization, Integer appId, String conditionValue, final ApiCallback<List<ListConditionOperators200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionOperatorsValidateBeforeCall(authorization, appId, conditionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionOperators200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditionValues
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionValuesCall(String authorization, Integer appId, String conditionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions/{condition_value}/values"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionValuesValidateBeforeCall(String authorization, Integer appId, String conditionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listConditionValues(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditionValues(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listConditionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionValuesCall(authorization, appId, conditionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listConditionValues(String authorization, Integer appId, String conditionValue) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listConditionValuesWithHttpInfo(authorization, appId, conditionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listConditionValuesWithHttpInfo(String authorization, Integer appId, String conditionValue) throws ApiException {
        okhttp3.Call localVarCall = listConditionValuesValidateBeforeCall(authorization, appId, conditionValue, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionValuesAsync(String authorization, Integer appId, String conditionValue, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionValuesValidateBeforeCall(authorization, appId, conditionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditions
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionsCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionsValidateBeforeCall(String authorization, Integer appId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listConditions(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditions(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionsCall(authorization, appId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return List&lt;ListConditions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditions200ResponseInner> listConditions(String authorization, Integer appId) throws ApiException {
        ApiResponse<List<ListConditions200ResponseInner>> localVarResp = listConditionsWithHttpInfo(authorization, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListConditions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditions200ResponseInner>> listConditionsWithHttpInfo(String authorization, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = listConditionsValidateBeforeCall(authorization, appId, null);
        Type localVarReturnType = new TypeToken<List<ListConditions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionsAsync(String authorization, Integer appId, final ApiCallback<List<ListConditions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionsValidateBeforeCall(authorization, appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnectors
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all connectors of a given type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectorsCall(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (authMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_method", authMethod));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectorsValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listConnectors(Async)");
        }
        

        okhttp3.Call localVarCall = listConnectorsCall(authorization, limit, page, cursor, name, authMethod, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all connectors of a given type. (optional)
     * @return List&lt;Connector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Connector> listConnectors(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod) throws ApiException {
        ApiResponse<List<Connector>> localVarResp = listConnectorsWithHttpInfo(authorization, limit, page, cursor, name, authMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all connectors of a given type. (optional)
     * @return ApiResponse&lt;List&lt;Connector&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Connector>> listConnectorsWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod) throws ApiException {
        okhttp3.Call localVarCall = listConnectorsValidateBeforeCall(authorization, limit, page, cursor, name, authMethod, null);
        Type localVarReturnType = new TypeToken<List<Connector>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all connectors of a given type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectorsAsync(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback<List<Connector>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectorsValidateBeforeCall(authorization, limit, page, cursor, name, authMethod, _callback);
        Type localVarReturnType = new TypeToken<List<Connector>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEnvironmentVariables
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentVariablesCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnvironmentVariablesValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listEnvironmentVariables(Async)");
        }
        

        okhttp3.Call localVarCall = listEnvironmentVariablesCall(authorization, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Envvar> listEnvironmentVariables(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<Envvar>> localVarResp = listEnvironmentVariablesWithHttpInfo(authorization, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;Envvar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Envvar>> listEnvironmentVariablesWithHttpInfo(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(authorization, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentVariablesAsync(String authorization, Integer limit, Integer page, String cursor, final ApiCallback<List<Envvar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(authorization, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHooks
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHooksCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHooksValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listHooks(Async)");
        }
        

        okhttp3.Call localVarCall = listHooksCall(authorization, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Hook> listHooks(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = listHooksWithHttpInfo(authorization, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hook>> listHooksWithHttpInfo(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listHooksValidateBeforeCall(authorization, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHooksAsync(String authorization, Integer limit, Integer page, String cursor, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHooksValidateBeforeCall(authorization, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingActionValues
     * @param authorization  (required)
     * @param actionValue The value for the selected action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionValuesCall(String authorization, String actionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/actions/{actuion_value}/values"
            .replaceAll("\\{" + "action_value" + "\\}", localVarApiClient.escapeString(actionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingActionValuesValidateBeforeCall(String authorization, String actionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappingActionValues(Async)");
        }
        
        // verify the required parameter 'actionValue' is set
        if (actionValue == null) {
            throw new ApiException("Missing the required parameter 'actionValue' when calling listMappingActionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingActionValuesCall(authorization, actionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param actionValue The value for the selected action. (required)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listMappingActionValues(String authorization, String actionValue) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listMappingActionValuesWithHttpInfo(authorization, actionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param actionValue The value for the selected action. (required)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listMappingActionValuesWithHttpInfo(String authorization, String actionValue) throws ApiException {
        okhttp3.Call localVarCall = listMappingActionValuesValidateBeforeCall(authorization, actionValue, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param actionValue The value for the selected action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionValuesAsync(String authorization, String actionValue, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingActionValuesValidateBeforeCall(authorization, actionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingActions
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingActionsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappingActions(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingActionsCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return List&lt;ListActions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListActions200ResponseInner> listMappingActions(String authorization) throws ApiException {
        ApiResponse<List<ListActions200ResponseInner>> localVarResp = listMappingActionsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;ListActions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListActions200ResponseInner>> listMappingActionsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingActionsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionsAsync(String authorization, final ApiCallback<List<ListActions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingActionsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditionOperators
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionOperatorsCall(String authorization, String conditionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions/{condition_value}/operators"
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionOperatorsValidateBeforeCall(String authorization, String conditionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappingConditionOperators(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listMappingConditionOperators(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingConditionOperatorsCall(authorization, conditionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return List&lt;ListMappingConditionOperators200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListMappingConditionOperators200ResponseInner> listMappingConditionOperators(String authorization, String conditionValue) throws ApiException {
        ApiResponse<List<ListMappingConditionOperators200ResponseInner>> localVarResp = listMappingConditionOperatorsWithHttpInfo(authorization, conditionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return ApiResponse&lt;List&lt;ListMappingConditionOperators200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListMappingConditionOperators200ResponseInner>> listMappingConditionOperatorsWithHttpInfo(String authorization, String conditionValue) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionOperatorsValidateBeforeCall(authorization, conditionValue, null);
        Type localVarReturnType = new TypeToken<List<ListMappingConditionOperators200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionOperatorsAsync(String authorization, String conditionValue, final ApiCallback<List<ListMappingConditionOperators200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionOperatorsValidateBeforeCall(authorization, conditionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListMappingConditionOperators200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditionValues
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionValuesCall(String authorization, String conditionValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions/{condition_value}/values"
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionValuesValidateBeforeCall(String authorization, String conditionValue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappingConditionValues(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listMappingConditionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingConditionValuesCall(authorization, conditionValue, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listMappingConditionValues(String authorization, String conditionValue) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listMappingConditionValuesWithHttpInfo(authorization, conditionValue);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listMappingConditionValuesWithHttpInfo(String authorization, String conditionValue) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionValuesValidateBeforeCall(authorization, conditionValue, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionValuesAsync(String authorization, String conditionValue, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionValuesValidateBeforeCall(authorization, conditionValue, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditions
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappingConditions(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingConditionsCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return List&lt;ListMappingConditions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListMappingConditions200ResponseInner> listMappingConditions(String authorization) throws ApiException {
        ApiResponse<List<ListMappingConditions200ResponseInner>> localVarResp = listMappingConditionsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;List&lt;ListMappingConditions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListMappingConditions200ResponseInner>> listMappingConditionsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListMappingConditions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionsAsync(String authorization, final ApiCallback<List<ListMappingConditions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListMappingConditions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappings
     * @param authorization  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (optional, default to true)
     * @param hasCondition Filters Mappings based on their Conditions. (optional)
     * @param hasConditionType Filters Mappings based on their condition types. (optional)
     * @param hasAction Filters Mappings based on their Actions. (optional)
     * @param hasActionType Filters Mappings based on their action types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsCall(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (hasCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition", hasCondition));
        }

        if (hasConditionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition_type", hasConditionType));
        }

        if (hasAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action", hasAction));
        }

        if (hasActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action_type", hasActionType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingsValidateBeforeCall(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listMappings(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingsCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (optional, default to true)
     * @param hasCondition Filters Mappings based on their Conditions. (optional)
     * @param hasConditionType Filters Mappings based on their condition types. (optional)
     * @param hasAction Filters Mappings based on their Actions. (optional)
     * @param hasActionType Filters Mappings based on their action types. (optional)
     * @return List&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Mapping> listMappings(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        ApiResponse<List<Mapping>> localVarResp = listMappingsWithHttpInfo(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (optional, default to true)
     * @param hasCondition Filters Mappings based on their Conditions. (optional)
     * @param hasConditionType Filters Mappings based on their condition types. (optional)
     * @param hasAction Filters Mappings based on their Actions. (optional)
     * @param hasActionType Filters Mappings based on their action types. (optional)
     * @return ApiResponse&lt;List&lt;Mapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Mapping>> listMappingsWithHttpInfo(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, null);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (optional, default to true)
     * @param hasCondition Filters Mappings based on their Conditions. (optional)
     * @param hasConditionType Filters Mappings based on their condition types. (optional)
     * @param hasAction Filters Mappings based on their Actions. (optional)
     * @param hasActionType Filters Mappings based on their action types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsAsync(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback<List<Mapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRiskRules
     * @param authorization  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listRiskRulesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRiskRulesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listRiskRules(Async)");
        }
        

        okhttp3.Call localVarCall = listRiskRulesCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listRiskRules(String authorization) throws ApiException {
        listRiskRulesWithHttpInfo(authorization);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listRiskRulesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listRiskRulesValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listRiskRulesAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRiskRulesValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoles
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesCall(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listRoles(Async)");
        }
        

        okhttp3.Call localVarCall = listRolesCall(authorization, limit, page, cursor, name, appId, fields, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Role> listRoles(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields) throws ApiException {
        ApiResponse<List<Role>> localVarResp = listRolesWithHttpInfo(authorization, limit, page, cursor, name, appId, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Role>> listRolesWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(authorization, limit, page, cursor, name, appId, fields, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesAsync(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRolesValidateBeforeCall(authorization, limit, page, cursor, name, appId, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRules
     * @param authorization  (required)
     * @param appId  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesCall(String authorization, Integer appId, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (hasCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition", hasCondition));
        }

        if (hasConditionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition_type", hasConditionType));
        }

        if (hasAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action", hasAction));
        }

        if (hasActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action_type", hasActionType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRulesValidateBeforeCall(String authorization, Integer appId, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listRules(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listRules(Async)");
        }
        

        okhttp3.Call localVarCall = listRulesCall(authorization, appId, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return List&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Rule> listRules(String authorization, Integer appId, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        ApiResponse<List<Rule>> localVarResp = listRulesWithHttpInfo(authorization, appId, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return ApiResponse&lt;List&lt;Rule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Rule>> listRulesWithHttpInfo(String authorization, Integer appId, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        okhttp3.Call localVarCall = listRulesValidateBeforeCall(authorization, appId, enabled, hasCondition, hasConditionType, hasAction, hasActionType, null);
        Type localVarReturnType = new TypeToken<List<Rule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesAsync(String authorization, Integer appId, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback<List<Rule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRulesValidateBeforeCall(authorization, appId, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        Type localVarReturnType = new TypeToken<List<Rule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listScopes
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScopesCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScopesValidateBeforeCall(String authorization, Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listScopes(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listScopes(Async)");
        }
        

        okhttp3.Call localVarCall = listScopesCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return List&lt;ListScopes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<ListScopes200ResponseInner> listScopes(String authorization, Integer id) throws ApiException {
        ApiResponse<List<ListScopes200ResponseInner>> localVarResp = listScopesWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;ListScopes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListScopes200ResponseInner>> listScopesWithHttpInfo(String authorization, Integer id) throws ApiException {
        okhttp3.Call localVarCall = listScopesValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<List<ListScopes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScopesAsync(String authorization, Integer id, final ApiCallback<List<ListScopes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScopesValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<List<ListScopes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil  (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param appId The ID of a OneLogin Application (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields A comma separated list user attributes to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String appId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_since", createdSince));
        }

        if (createdUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_until", createdUntil));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (updatedUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_until", updatedUntil));
        }

        if (lastLoginSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_since", lastLoginSince));
        }

        if (lastLoginUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_until", lastLoginUntil));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (samaccountname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("samaccountname", samaccountname));
        }

        if (directoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("directory_id", directoryId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_ids", userIds));
        }

        if (customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_attributes.{attribute_name}", customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String appId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling listUsers(Async)");
        }
        

        okhttp3.Call localVarCall = listUsersCall(authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, appId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil  (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param appId The ID of a OneLogin Application (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields A comma separated list user attributes to return. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> listUsers(String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String appId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        ApiResponse<List<User>> localVarResp = listUsersWithHttpInfo(authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, appId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil  (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param appId The ID of a OneLogin Application (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields A comma separated list user attributes to return. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> listUsersWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String appId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, appId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil  (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param appId The ID of a OneLogin Application (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields A comma separated list user attributes to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String appId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, appId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeClientApp
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClientAppCall(String authorization, Integer id, Integer clientAppId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients/{client_app_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "client_app_id" + "\\}", localVarApiClient.escapeString(clientAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeClientAppValidateBeforeCall(String authorization, Integer id, Integer clientAppId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeClientApp(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeClientApp(Async)");
        }
        
        // verify the required parameter 'clientAppId' is set
        if (clientAppId == null) {
            throw new ApiException("Missing the required parameter 'clientAppId' when calling removeClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = removeClientAppCall(authorization, id, clientAppId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public void removeClientApp(String authorization, Integer id, Integer clientAppId) throws ApiException {
        removeClientAppWithHttpInfo(authorization, id, clientAppId);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeClientAppWithHttpInfo(String authorization, Integer id, Integer clientAppId) throws ApiException {
        okhttp3.Call localVarCall = removeClientAppValidateBeforeCall(authorization, id, clientAppId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClientAppAsync(String authorization, Integer id, Integer clientAppId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeClientAppValidateBeforeCall(authorization, id, clientAppId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRoleAdmins
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleAdminsCall(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRoleUsersRequest;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRoleAdminsValidateBeforeCall(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeRoleAdmins(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRoleAdmins(Async)");
        }
        
        // verify the required parameter 'removeRoleUsersRequest' is set
        if (removeRoleUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = removeRoleAdminsCall(authorization, roleId, removeRoleUsersRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void removeRoleAdmins(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest) throws ApiException {
        removeRoleAdminsWithHttpInfo(authorization, roleId, removeRoleUsersRequest);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeRoleAdminsWithHttpInfo(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = removeRoleAdminsValidateBeforeCall(authorization, roleId, removeRoleUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleAdminsAsync(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRoleAdminsValidateBeforeCall(authorization, roleId, removeRoleUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRoleUsers
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleUsersCall(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRoleUsersRequest;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRoleUsersValidateBeforeCall(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeRoleUsers(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRoleUsers(Async)");
        }
        
        // verify the required parameter 'removeRoleUsersRequest' is set
        if (removeRoleUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = removeRoleUsersCall(authorization, roleId, removeRoleUsersRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void removeRoleUsers(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest) throws ApiException {
        removeRoleUsersWithHttpInfo(authorization, roleId, removeRoleUsersRequest);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeRoleUsersWithHttpInfo(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = removeRoleUsersValidateBeforeCall(authorization, roleId, removeRoleUsersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleUsersAsync(String authorization, Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRoleUsersValidateBeforeCall(authorization, roleId, removeRoleUsersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeToken
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenCall(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeTokenRequest;

        // create path and map variables
        String localVarPath = "/auth/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling revokeToken(Async)");
        }
        

        okhttp3.Call localVarCall = revokeTokenCall(authorization, revokeTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @return GenerateToken400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateToken400Response revokeToken(String authorization, RevokeTokenRequest revokeTokenRequest) throws ApiException {
        ApiResponse<GenerateToken400Response> localVarResp = revokeTokenWithHttpInfo(authorization, revokeTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @return ApiResponse&lt;GenerateToken400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateToken400Response> revokeTokenWithHttpInfo(String authorization, RevokeTokenRequest revokeTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(authorization, revokeTokenRequest, null);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenAsync(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback<GenerateToken400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(authorization, revokeTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRoleApps
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleAppsCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/apps"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRoleAppsValidateBeforeCall(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling setRoleApps(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling setRoleApps(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setRoleApps(Async)");
        }
        

        okhttp3.Call localVarCall = setRoleAppsCall(authorization, roleId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return List&lt;SetRoleApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<SetRoleApps200ResponseInner> setRoleApps(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        ApiResponse<List<SetRoleApps200ResponseInner>> localVarResp = setRoleAppsWithHttpInfo(authorization, roleId, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;SetRoleApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SetRoleApps200ResponseInner>> setRoleAppsWithHttpInfo(String authorization, Integer roleId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = setRoleAppsValidateBeforeCall(authorization, roleId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<SetRoleApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleAppsAsync(String authorization, Integer roleId, List<Integer> requestBody, final ApiCallback<List<SetRoleApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRoleAppsValidateBeforeCall(authorization, roleId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<SetRoleApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackEvent
     * @param authorization  (required)
     * @param trackEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackEventCall(String authorization, TrackEventRequest trackEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackEventRequest;

        // create path and map variables
        String localVarPath = "/api/2/risk/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackEventValidateBeforeCall(String authorization, TrackEventRequest trackEventRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling trackEvent(Async)");
        }
        
        // verify the required parameter 'trackEventRequest' is set
        if (trackEventRequest == null) {
            throw new ApiException("Missing the required parameter 'trackEventRequest' when calling trackEvent(Async)");
        }
        

        okhttp3.Call localVarCall = trackEventCall(authorization, trackEventRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param trackEventRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public void trackEvent(String authorization, TrackEventRequest trackEventRequest) throws ApiException {
        trackEventWithHttpInfo(authorization, trackEventRequest);
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param trackEventRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> trackEventWithHttpInfo(String authorization, TrackEventRequest trackEventRequest) throws ApiException {
        okhttp3.Call localVarCall = trackEventValidateBeforeCall(authorization, trackEventRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param trackEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackEventAsync(String authorization, TrackEventRequest trackEventRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackEventValidateBeforeCall(authorization, trackEventRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessTokenClaim
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessTokenClaimCall(String authorization, Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccessTokenClaimRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims/{claim_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "claim_id" + "\\}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessTokenClaimValidateBeforeCall(String authorization, Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling updateAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'addAccessTokenClaimRequest' is set
        if (addAccessTokenClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'addAccessTokenClaimRequest' when calling updateAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccessTokenClaimCall(authorization, id, claimId, addAccessTokenClaimRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id updateAccessTokenClaim(String authorization, Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest) throws ApiException {
        ApiResponse<Id> localVarResp = updateAccessTokenClaimWithHttpInfo(authorization, id, claimId, addAccessTokenClaimRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateAccessTokenClaimWithHttpInfo(String authorization, Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAccessTokenClaimValidateBeforeCall(authorization, id, claimId, addAccessTokenClaimRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessTokenClaimAsync(String authorization, Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessTokenClaimValidateBeforeCall(authorization, id, claimId, addAccessTokenClaimRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApp
     * @param authorization  (required)
     * @param appId  (required)
     * @param schema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppCall(String authorization, Integer appId, Schema schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppValidateBeforeCall(String authorization, Integer appId, Schema schema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateApp(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApp(Async)");
        }
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling updateApp(Async)");
        }
        

        okhttp3.Call localVarCall = updateAppCall(authorization, appId, schema, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param schema  (required)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Schema updateApp(String authorization, Integer appId, Schema schema) throws ApiException {
        ApiResponse<Schema> localVarResp = updateAppWithHttpInfo(authorization, appId, schema);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param schema  (required)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> updateAppWithHttpInfo(String authorization, Integer appId, Schema schema) throws ApiException {
        okhttp3.Call localVarCall = updateAppValidateBeforeCall(authorization, appId, schema, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param schema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppAsync(String authorization, Integer appId, Schema schema, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppValidateBeforeCall(authorization, appId, schema, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthorizationServer
     * @param authorization  (required)
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthorizationServerCall(String authorization, Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthorizationServerRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthorizationServerValidateBeforeCall(String authorization, Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'createAuthorizationServerRequest' is set
        if (createAuthorizationServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createAuthorizationServerRequest' when calling updateAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = updateAuthorizationServerCall(authorization, id, createAuthorizationServerRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Id updateAuthorizationServer(String authorization, Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest) throws ApiException {
        ApiResponse<Id> localVarResp = updateAuthorizationServerWithHttpInfo(authorization, id, createAuthorizationServerRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateAuthorizationServerWithHttpInfo(String authorization, Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAuthorizationServerValidateBeforeCall(authorization, id, createAuthorizationServerRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthorizationServerAsync(String authorization, Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthorizationServerValidateBeforeCall(authorization, id, createAuthorizationServerRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientApp
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientAppCall(String authorization, Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClientAppRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients/{client_app_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "client_app_id" + "\\}", localVarApiClient.escapeString(clientAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientAppValidateBeforeCall(String authorization, Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateClientApp(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateClientApp(Async)");
        }
        
        // verify the required parameter 'clientAppId' is set
        if (clientAppId == null) {
            throw new ApiException("Missing the required parameter 'clientAppId' when calling updateClientApp(Async)");
        }
        
        // verify the required parameter 'updateClientAppRequest' is set
        if (updateClientAppRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClientAppRequest' when calling updateClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = updateClientAppCall(authorization, id, clientAppId, updateClientAppRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @return ClientApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ClientApp updateClientApp(String authorization, Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest) throws ApiException {
        ApiResponse<ClientApp> localVarResp = updateClientAppWithHttpInfo(authorization, id, clientAppId, updateClientAppRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @return ApiResponse&lt;ClientApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientApp> updateClientAppWithHttpInfo(String authorization, Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest) throws ApiException {
        okhttp3.Call localVarCall = updateClientAppValidateBeforeCall(authorization, id, clientAppId, updateClientAppRequest, null);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientAppAsync(String authorization, Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, final ApiCallback<ClientApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientAppValidateBeforeCall(authorization, id, clientAppId, updateClientAppRequest, _callback);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvironmentVariable
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentVariableCall(String authorization, String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEnvironmentVariableRequest;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentVariableValidateBeforeCall(String authorization, String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling updateEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'updateEnvironmentVariableRequest' is set
        if (updateEnvironmentVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEnvironmentVariableRequest' when calling updateEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = updateEnvironmentVariableCall(authorization, envvarId, updateEnvironmentVariableRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public Envvar updateEnvironmentVariable(String authorization, String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest) throws ApiException {
        ApiResponse<Envvar> localVarResp = updateEnvironmentVariableWithHttpInfo(authorization, envvarId, updateEnvironmentVariableRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> updateEnvironmentVariableWithHttpInfo(String authorization, String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(authorization, envvarId, updateEnvironmentVariableRequest, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentVariableAsync(String authorization, String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(authorization, envvarId, updateEnvironmentVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHook
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHookCall(String authorization, String hookId, Hook hook, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hook;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHookValidateBeforeCall(String authorization, String hookId, Hook hook, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateHook(Async)");
        }
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling updateHook(Async)");
        }
        
        // verify the required parameter 'hook' is set
        if (hook == null) {
            throw new ApiException("Missing the required parameter 'hook' when calling updateHook(Async)");
        }
        

        okhttp3.Call localVarCall = updateHookCall(authorization, hookId, hook, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public Hook updateHook(String authorization, String hookId, Hook hook) throws ApiException {
        ApiResponse<Hook> localVarResp = updateHookWithHttpInfo(authorization, hookId, hook);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> updateHookWithHttpInfo(String authorization, String hookId, Hook hook) throws ApiException {
        okhttp3.Call localVarCall = updateHookValidateBeforeCall(authorization, hookId, hook, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHookAsync(String authorization, String hookId, Hook hook, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHookValidateBeforeCall(authorization, hookId, hook, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMapping
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMappingCall(String authorization, Integer mappingId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMappingValidateBeforeCall(String authorization, Integer mappingId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling updateMapping(Async)");
        }
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling updateMapping(Async)");
        }
        

        okhttp3.Call localVarCall = updateMappingCall(authorization, mappingId, mapping, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public Integer updateMapping(String authorization, Integer mappingId, Mapping mapping) throws ApiException {
        ApiResponse<Integer> localVarResp = updateMappingWithHttpInfo(authorization, mappingId, mapping);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> updateMappingWithHttpInfo(String authorization, Integer mappingId, Mapping mapping) throws ApiException {
        okhttp3.Call localVarCall = updateMappingValidateBeforeCall(authorization, mappingId, mapping, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMappingAsync(String authorization, Integer mappingId, Mapping mapping, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMappingValidateBeforeCall(authorization, mappingId, mapping, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRiskRule
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRiskRuleCall(String authorization, String riskRuleId, RiskRule riskRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskRule;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRiskRuleValidateBeforeCall(String authorization, String riskRuleId, RiskRule riskRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling updateRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRule' is set
        if (riskRule == null) {
            throw new ApiException("Missing the required parameter 'riskRule' when calling updateRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateRiskRuleCall(authorization, riskRuleId, riskRule, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule updateRiskRule(String authorization, String riskRuleId, RiskRule riskRule) throws ApiException {
        ApiResponse<RiskRule> localVarResp = updateRiskRuleWithHttpInfo(authorization, riskRuleId, riskRule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> updateRiskRuleWithHttpInfo(String authorization, String riskRuleId, RiskRule riskRule) throws ApiException {
        okhttp3.Call localVarCall = updateRiskRuleValidateBeforeCall(authorization, riskRuleId, riskRule, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRiskRuleAsync(String authorization, String riskRuleId, RiskRule riskRule, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRiskRuleValidateBeforeCall(authorization, riskRuleId, riskRule, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String authorization, Integer roleId, Role role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String authorization, Integer roleId, Role role, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRole(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling updateRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateRoleCall(authorization, roleId, role, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @return UpdateRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRole200Response updateRole(String authorization, Integer roleId, Role role) throws ApiException {
        ApiResponse<UpdateRole200Response> localVarResp = updateRoleWithHttpInfo(authorization, roleId, role);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @return ApiResponse&lt;UpdateRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRole200Response> updateRoleWithHttpInfo(String authorization, Integer roleId, Role role) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(authorization, roleId, role, null);
        Type localVarReturnType = new TypeToken<UpdateRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String authorization, Integer roleId, Role role, final ApiCallback<UpdateRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(authorization, roleId, role, _callback);
        Type localVarReturnType = new TypeToken<UpdateRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRule
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleCall(String authorization, Integer appId, Integer ruleId, Rule rule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(String authorization, Integer appId, Integer ruleId, Rule rule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling updateRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateRuleCall(authorization, appId, ruleId, rule, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @return RuleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public RuleId updateRule(String authorization, Integer appId, Integer ruleId, Rule rule) throws ApiException {
        ApiResponse<RuleId> localVarResp = updateRuleWithHttpInfo(authorization, appId, ruleId, rule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @return ApiResponse&lt;RuleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleId> updateRuleWithHttpInfo(String authorization, Integer appId, Integer ruleId, Rule rule) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(authorization, appId, ruleId, rule, null);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleAsync(String authorization, Integer appId, Integer ruleId, Rule rule, final ApiCallback<RuleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(authorization, appId, ruleId, rule, _callback);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScope
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScopeCall(String authorization, Integer id, Integer scopeId, AddScopeRequest addScopeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScopeRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes/{scope_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "scope_id" + "\\}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScopeValidateBeforeCall(String authorization, Integer id, Integer scopeId, AddScopeRequest addScopeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateScope(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateScope(Async)");
        }
        
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling updateScope(Async)");
        }
        
        // verify the required parameter 'addScopeRequest' is set
        if (addScopeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScopeRequest' when calling updateScope(Async)");
        }
        

        okhttp3.Call localVarCall = updateScopeCall(authorization, id, scopeId, addScopeRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id updateScope(String authorization, Integer id, Integer scopeId, AddScopeRequest addScopeRequest) throws ApiException {
        ApiResponse<Id> localVarResp = updateScopeWithHttpInfo(authorization, id, scopeId, addScopeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateScopeWithHttpInfo(String authorization, Integer id, Integer scopeId, AddScopeRequest addScopeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateScopeValidateBeforeCall(authorization, id, scopeId, addScopeRequest, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScopeAsync(String authorization, Integer id, Integer scopeId, AddScopeRequest addScopeRequest, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScopeValidateBeforeCall(authorization, id, scopeId, addScopeRequest, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String authorization, Integer userId, User user, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String authorization, Integer userId, User user, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(authorization, userId, user, mappings, validatePolicy, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(String authorization, Integer userId, User user, String mappings, Boolean validatePolicy) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(authorization, userId, user, mappings, validatePolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(String authorization, Integer userId, User user, String mappings, Boolean validatePolicy) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(authorization, userId, user, mappings, validatePolicy, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user that you want to return. (required)
     * @param user  (required)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String authorization, Integer userId, User user, String mappings, Boolean validatePolicy, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(authorization, userId, user, mappings, validatePolicy, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEnrollment
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentCall(String authorization, Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyEnrollmentRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "registration_id" + "\\}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEnrollmentValidateBeforeCall(String authorization, Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling verifyEnrollment(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyEnrollment(Async)");
        }
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling verifyEnrollment(Async)");
        }
        
        // verify the required parameter 'verifyEnrollmentRequest' is set
        if (verifyEnrollmentRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyEnrollmentRequest' when calling verifyEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEnrollmentCall(authorization, userId, registrationId, verifyEnrollmentRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> verifyEnrollment(String authorization, Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = verifyEnrollmentWithHttpInfo(authorization, userId, registrationId, verifyEnrollmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> verifyEnrollmentWithHttpInfo(String authorization, Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyEnrollmentValidateBeforeCall(authorization, userId, registrationId, verifyEnrollmentRequest, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentAsync(String authorization, Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEnrollmentValidateBeforeCall(authorization, userId, registrationId, verifyEnrollmentRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEnrollmentVoiceProtect
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentVoiceProtectCall(String authorization, Integer userId, Integer registrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "registration_id" + "\\}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEnrollmentVoiceProtectValidateBeforeCall(String authorization, Integer userId, Integer registrationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling verifyEnrollmentVoiceProtect(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyEnrollmentVoiceProtect(Async)");
        }
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling verifyEnrollmentVoiceProtect(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectCall(authorization, userId, registrationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> verifyEnrollmentVoiceProtect(String authorization, Integer userId, Integer registrationId) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = verifyEnrollmentVoiceProtectWithHttpInfo(authorization, userId, registrationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> verifyEnrollmentVoiceProtectWithHttpInfo(String authorization, Integer userId, Integer registrationId) throws ApiException {
        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectValidateBeforeCall(authorization, userId, registrationId, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentVoiceProtectAsync(String authorization, Integer userId, Integer registrationId, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectValidateBeforeCall(authorization, userId, registrationId, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactor
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorCall(String authorization, Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "verification_id" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorValidateBeforeCall(String authorization, Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling verifyFactor(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyFactor(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyFactor(Async)");
        }
        
        // verify the required parameter 'verifyFactorRequest' is set
        if (verifyFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyFactorRequest' when calling verifyFactor(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorCall(authorization, userId, verificationId, verifyFactorRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @return Status2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public Status2 verifyFactor(String authorization, Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest) throws ApiException {
        ApiResponse<Status2> localVarResp = verifyFactorWithHttpInfo(authorization, userId, verificationId, verifyFactorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @return ApiResponse&lt;Status2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status2> verifyFactorWithHttpInfo(String authorization, Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorValidateBeforeCall(authorization, userId, verificationId, verifyFactorRequest, null);
        Type localVarReturnType = new TypeToken<Status2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorAsync(String authorization, Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, final ApiCallback<Status2> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorValidateBeforeCall(authorization, userId, verificationId, verifyFactorRequest, _callback);
        Type localVarReturnType = new TypeToken<Status2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactorSaml
     * @param authorization  (required)
     * @param verifyFactorSamlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorSamlCall(String authorization, VerifyFactorSamlRequest verifyFactorSamlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyFactorSamlRequest;

        // create path and map variables
        String localVarPath = "/api/2/saml_assertion/verify_factor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorSamlValidateBeforeCall(String authorization, VerifyFactorSamlRequest verifyFactorSamlRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling verifyFactorSaml(Async)");
        }
        
        // verify the required parameter 'verifyFactorSamlRequest' is set
        if (verifyFactorSamlRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyFactorSamlRequest' when calling verifyFactorSaml(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorSamlCall(authorization, verifyFactorSamlRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param verifyFactorSamlRequest  (required)
     * @return VerifyFactorSaml200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public VerifyFactorSaml200Response verifyFactorSaml(String authorization, VerifyFactorSamlRequest verifyFactorSamlRequest) throws ApiException {
        ApiResponse<VerifyFactorSaml200Response> localVarResp = verifyFactorSamlWithHttpInfo(authorization, verifyFactorSamlRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param verifyFactorSamlRequest  (required)
     * @return ApiResponse&lt;VerifyFactorSaml200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyFactorSaml200Response> verifyFactorSamlWithHttpInfo(String authorization, VerifyFactorSamlRequest verifyFactorSamlRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorSamlValidateBeforeCall(authorization, verifyFactorSamlRequest, null);
        Type localVarReturnType = new TypeToken<VerifyFactorSaml200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param verifyFactorSamlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorSamlAsync(String authorization, VerifyFactorSamlRequest verifyFactorSamlRequest, final ApiCallback<VerifyFactorSaml200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorSamlValidateBeforeCall(authorization, verifyFactorSamlRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyFactorSaml200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactorVoice
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorVoiceCall(String authorization, Integer userId, Integer verificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "verification_id" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorVoiceValidateBeforeCall(String authorization, Integer userId, Integer verificationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling verifyFactorVoice(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyFactorVoice(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyFactorVoice(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorVoiceCall(authorization, userId, verificationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @return List&lt;VerifyFactorVoice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<VerifyFactorVoice200ResponseInner> verifyFactorVoice(String authorization, Integer userId, Integer verificationId) throws ApiException {
        ApiResponse<List<VerifyFactorVoice200ResponseInner>> localVarResp = verifyFactorVoiceWithHttpInfo(authorization, userId, verificationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @return ApiResponse&lt;List&lt;VerifyFactorVoice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VerifyFactorVoice200ResponseInner>> verifyFactorVoiceWithHttpInfo(String authorization, Integer userId, Integer verificationId) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorVoiceValidateBeforeCall(authorization, userId, verificationId, null);
        Type localVarReturnType = new TypeToken<List<VerifyFactorVoice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorVoiceAsync(String authorization, Integer userId, Integer verificationId, final ApiCallback<List<VerifyFactorVoice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorVoiceValidateBeforeCall(authorization, userId, verificationId, _callback);
        Type localVarReturnType = new TypeToken<List<VerifyFactorVoice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
